const allProblemsData = [{"id": "IMO-2025-P6", "year": 2025, "problem_number": 6, "nickname": "Matilda Tiling", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Extremal Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.184, "stdev": 0.813, "histogram": [569, 45, 6, 1, 1, 2, 0, 6], "total_participants": 630}, "problem": {"natural_language": {"format": "latex", "text": "Consider a $2025 \\times 2025$ grid of unit squares. Matilda wishes to place on the grid some rectangular tiles, possibly of different sizes, such that each side of every tile lies on a grid line and every unit square is covered by at most one tile.\n\\medskip\n\\noindent\nDetermine the minimum number of tiles Matilda needs to place so that each row and each column of the grid has exactly one unit square that is not covered by any tile.", "prefix": "Consider a $2025 \\times 2025$ grid of unit squares. Matilda wishes to place on the grid some rectangular tiles, possibly of different sizes, such that each side of every tile lies on a grid line and every unit square is covered by at most one tile.", "suffix": "Determine the minimum number of tiles Matilda needs to place so that each row and each column of the grid has exactly one unit square that is not covered by any tile."}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nopen scoped Finset Function\n\nnamespace IMO2025P6\n\n/-- A cell of the grid. -/\nabbrev Cell : Type := Fin 2025 \u00d7 Fin 2025\n\n/-- A rectangular tile on the grid, given by two corners. -/\nstructure Tile where\n  /-- The lower left corner. -/\n  lowerLeft : Cell\n  /-- The upper right corner. -/\n  upperRight : Cell\n  below_left : lowerLeft \u2264 upperRight\n\n/-- The cells of a rectangle. -/\ndef Tile.cells (t : Tile) : Set Cell := Set.Icc t.lowerLeft t.upperRight\n\n/-- The answer to be determined. -/\ndef answer : \u2115 := sorry\n\ntheorem result :\n    IsLeast {k : \u2115 | \u2203 tiles : Fin k \u2192 Tile,\n      Pairwise (Disjoint on (fun i \u21a6 (tiles i).cells)) \u2227\n      \u2203 e : Fin 2025 \u2243 Fin 2025, (\u22c3 i, (tiles i).cells)\u1d9c = Set.range fun i \u21a6 (i, e i)} answer := by\n  sorry\n\nend IMO2025P6"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "We show a general construction when $n=k^2$ illustrated below for $k=5$; it generalizes readily. There are a total of $(k-1)^2$ tiles which are $k \\times k$ squares and another $4(k-1)$ tiles on the boundary, giving a total of\n$$\n(k-1)^2+4(k-1)=k^2+2 k-3\n$$\ntiles as promised.\n\\begin{center}\n\\includegraphics[width=0.45\\textwidth]{IMO2025p6_1.png}\n\\end{center}\nTheorem (Erd\u00f6s-Szekeres)\nLet $n \\geq 1$ be an integer. Given a permutation of $(1, \\ldots, n)$, if a longest increasing subsequence (LIS) has length $a$ and a longest decreasing subsequence (LDS) has length $b$, then $a b \\geq n$.\nThis is a stronger version of the theorem compared to another version which instead just asserts that $\\max (a, b) \\geq \\sqrt{n}$.\nTo apply this to the present problem, take the $n$ uncovered squares which we henceforth call \"black\" as a permutation. Then consider both an LIS of length $a$ and an LDS of length $b$. We do the following artistic illustration:\n- Draw the LIS as a broken line, then connect it to the southwest and northwest corner of the board.\n- Similarly, draw the LDS as a broken line, then connect it to the northwest and southeast corner of the board.\n- These two steps partition the board into four quadrants, which we call north, east, south, west.\n- For each black cell in the north quadrant, write an $\\mathbf{N}$ in the cell above it (for the cell in the first row, this will be off the board). Do the same for $\\mathbf{E}$ (east), $\\mathbf{S}$ (south), $\\mathbf{W}$ (west).\n- Some black cells are in multiple quadrants (i.e. part of the LIS/LDS). Write all letters in that case.\nThe figure below shows two examples of the process, each for a board with $n=9$, for two choices of LIS and LDS. The cells in the LIS and LDS have been marked with green circles, and the boundaries of the quadrants are drawn in green lines. In the left example, the LIS and LDS have a black square in common (that cell has all four directions labeled). In the right example, the LIS and do not have common squares.\n\\begin{center}\n\\includegraphics[width=0.7\\textwidth]{IMO2025p6_2.png}\n\\end{center}\nClaim - In this algorithm, the total number of letters written is exactly\n$$\nC:= \\begin{cases}n+a+b+1 & \\text { if the LIS and LDS intersect } \\\\ n+a+b & \\text { otherwise }\\end{cases}\n$$\nProof. This is obvious. Each black square contributes at least one letter. Each black square on exactly one of the LIS and LDS contributes one extra letter. And a black square on both contributes 4 letters instead of $1+1+1$.\nNote by AM-GM we have $a+b \\geq 2 \\sqrt{a b} \\geq 2 \\sqrt{n}$, so we have a bound of\n$$\nC \\geq n+2 \\sqrt{n}+\\varepsilon \\quad \\text { where } \\quad \\varepsilon:= \\begin{cases}1 & \\text { if the LIS and LDS intersect } \\\\ 0 & \\text { otherwise } .\\end{cases}\n$$\nTo relate $C$ to the number of tiles, the critical claim is the following, which is by construction:\nClaim - None of Matilda's tiles can have more than one letter written in any cell.\nProof. This follows from the construction.\nWe split into two cases based on $\\varepsilon$.\n- When $\\varepsilon=1$, at most four letters go off the grid (one for each direction), the number of tiles is at least $C-4 \\geq n+2 \\sqrt{n}-3$.\n- Suppose $\\varepsilon=0$. Then $C-4 \\geq n+2 \\sqrt{n}-4$. However, we make the additional observation here that the tile where the LIS and LDS meet has no letters on it either; hence there are at least $1+(C-4) \\geq n+2 \\sqrt{n}-3$ tiles.\nRemark. USJL mentions that when $a=b$, it is in fact always possible to guarantee $\\varepsilon=1$. Moreover, when $a \\neq b$, the AM-GM inequality is strict. This gives a way to avoid the additional observation needed for $\\varepsilon=0$ above."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Extremal Principle", "Induction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2025-P1", "year": 2025, "problem_number": 1, "nickname": "Sunny Lines", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 5.216, "stdev": 2.543, "histogram": [60, 26, 58, 31, 14, 19, 54, 368], "total_participants": 630}, "problem": {"natural_language": {"format": "latex", "text": "A line in the plane is called \\emph{sunny} if it is not parallel to any of the $x$\u2013axis, the $y$\u2013axis, and the line $x+y=0$.\n\\medskip\nLet $n\\ge3$ be a given integer. Determine all nonnegative integers $k$ such that there exist $n$ distinct lines in the plane satisfying both of the following conditions:\n\\medskip\n\\begin{itemize}\n\\item[(i)] for all positive integers $a$ and $b$ with $a+b\\le n+1$, the point $(a,b)$ is on at least one of the lines; and\n\\item[(ii)] exactly $k$ of the $n$ lines are sunny.\n\\end{itemize}", "prefix": "A line in the plane is called \\emph{sunny} if it is not parallel to any of the $x$\u2013axis, the $y$\u2013axis, and the line $x+y=0$.\n\\medskip\nLet $n\\ge3$ be a given integer.", "suffiex": "Determine all nonnegative integers $k$ such that there exist $n$ distinct lines in the plane satisfying both of the following conditions:\n\\medskip\n\\begin{itemize}\n\\item[(i)] for all positive integers $a$ and $b$ with $a+b\\le n+1$, the point $(a,b)$ is on at least one of the lines; and\n\\item[(ii)] exactly $k$ of the $n$ lines are sunny.\n\\end{itemize}"}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nopen scoped Affine Finset\nopen Module\n\nnamespace IMO2025P1\n\n/-- The `x`-axis, as an affine subspace. -/\nnoncomputable def xAxis : AffineSubspace \u211d (EuclideanSpace \u211d (Fin 2)) where\n  carrier := {p | p 1 = 0}\n  smul_vsub_vadd_mem c p\u2081 p\u2082 p\u2083 hp\u2081 hp\u2082 hp\u2083 := by simp_all\n\n/-- The `y`-axis, as an affine subspace. -/\nnoncomputable def yAxis : AffineSubspace \u211d (EuclideanSpace \u211d (Fin 2)) where\n  carrier := {p | p 0 = 0}\n  smul_vsub_vadd_mem c p\u2081 p\u2082 p\u2083 hp\u2081 hp\u2082 hp\u2083 := by simp_all\n\n/- The line `x+y=0`, as an affine subspace. -/\nnoncomputable def linexy0 : AffineSubspace \u211d (EuclideanSpace \u211d (Fin 2)) where\n  carrier := {p | p 0 + p 1 = 0}\n  smul_vsub_vadd_mem c p\u2081 p\u2082 p\u2083 hp\u2081 hp\u2082 hp\u2083 := by\n    simp only [Fin.isValue, vsub_eq_sub, vadd_eq_add, Set.mem_setOf_eq, PiLp.add_apply,\n      PiLp.smul_apply, PiLp.sub_apply, smul_eq_mul]\n    suffices c * (p\u2081 0 + p\u2081 1 - (p\u2082 0 + p\u2082 1)) + (p\u2083 0 + p\u2083 1) = 0 by\n      rw [\u2190 this]\n      ring\n    simp_all\n\n/-- The condition on lines in the problem. -/\ndef Sunny (s : AffineSubspace \u211d (EuclideanSpace \u211d (Fin 2))) : Prop :=\n   \u00ac s \u2225 xAxis \u2227 \u00ac s \u2225 yAxis \u2227 \u00ac s \u2225 linexy0\n\n/-- The answer to be determined. -/\ndef answer : (Set.Ici 3) \u2192 Set \u2115 := sorry\n\ntheorem result (n : Set.Ici 3) :\n    {k | \u2203 lines : Finset (AffineSubspace \u211d (EuclideanSpace \u211d (Fin 2))),\n      have : DecidablePred Sunny := Classical.decPred _;\n      #lines = n \u2227 (\u2200 l \u2208 lines, finrank \u211d l.direction = 1) \u2227\n      (\u2200 a b : \u2115, 0 < a \u2192 0 < b \u2192 a + b \u2264 (n : \u2115) + 1 \u2192 \u2203 l \u2208 lines, !\u2082[(a : \u211d), b] \u2208 l) \u2227\n      #{l \u2208 lines | Sunny l} = k} = answer n := by\n  sorry\n\nend IMO2025P1"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "The answer is 0,1 , or 3 sunny lines.\\\\\nIn what follows, we draw the grid as equilateral instead of a right triangle; this has no effect on the problem statement but is more symmetric.\nWe say a long line is one of the three lines at the edge of the grid, i.e. one of the (non-sunny) lines passing through $n$ points. The main claim is the following.\nClaim - If $n \\geq 4$, any set of $n$ lines must have at least one long line.\nProof. Consider the $3(n-1)$ points on the outer edge of the grid. If there was no long line, each of the $n$ lines passes through at most two such points. So we obtain $2 n \\geq 3(n-1)$, which forces $n \\leq 3$.\nHence, by induction we may repeatedly delete a long line without changing the number of sunny lines until $n=3$ (and vice-versa: given a construction for smaller $n$ we can increase $n$ by one and add a long line).\nWe now classify all the ways to cover the $1+2+3=6$ points in an $n=3$ grid with 3 lines.\n\\begin{center}\n\\includegraphics[width=0.4\\textwidth]{2025_08_08_97d312101a54723f81b1g-03.png}\n\\end{center}\n\\begin{center}\n\\includegraphics[width=0.4\\textwidth]{2025_08_08_97d312101a54723f81b1g-03(1).png}\n\\end{center}\n\\begin{itemize}\n\\item If there is a long line (say, the red one in the figure), the remaining $1+2=3$ points (circled in blue) are covered with two lines. One of the lines passes through 2 points\\\\\nand must not be sunny; the other line may or may not be sunny. Hence in this case the possible counts of sunny lines are 0 or 1 .\n\\item If there is no long line, each of the three lines passes through at most 2 points. But there are 6 total lines, so in fact each line must pass through exactly two points. The only way to do this is depicted in the figure in the right. In this case there are 3 sunny lines.\n\\end{itemize}\nThis proves that $0,1,3$ are the only possible answers.\\\\\nRemark. The concept of a sunny line is not that important to the problem. The proof above essentially classifies all the ways to cover the $1+2+\\cdots+n$ points with exactly $n$ lines. Namely, one should repeatedly take a long line and decrease $n$ until $n=3$, and then pick one of the finitely many cases for $n=3$. The count of sunny lines just happens to be whatever is possible for $n=3$, since long lines are not sunny."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2024-P5", "year": 2024, "problem_number": 5, "nickname": "Turbo the Snail", "category": "combinatorics", "subcategories": ["Combinatorial Game Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.246, "stdev": 3.012, "histogram": [316, 97, 3, 9, 1, 18, 11, 154], "total_participants": 609}, "problem": {"natural_language": {"format": "latex", "text": "Turbo the snail plays a game on a board with 2024 rows and 2023 columns. There are hidden monsters in 2022 of the cells. Initially, Turbo does not know where any of the monsters are, but he knows that there is exactly one monster in each row except the first row and the last row, and that each column contains at most one monster.\nTurbo makes a series of attempts to go from the first row to the last row. On each attempt, he chooses to start on any cell in the first row, then repeatedly moves to an adjacent cell sharing a common side. (He is allowed to return to a previously visited cell.) If he reaches a cell with a monster, his attempt ends and he is transported back to the first row to start a new attempt. The monsters do not move, and Turbo remembers whether or not each cell he has visited contains a monster. If he reaches any cell in the last row, his attempt ends and the game is over.\nDetermine the minimum value of $n$ for which Turbo has a strategy that guarantees reaching the last row on the $n^{\\text {th }}$ attempt or earlier, regardless of the locations of the monsters.\\\\", "prefix": "Turbo the snail plays a game on a board with 2024 rows and 2023 columns. There are hidden monsters in 2022 of the cells. Initially, Turbo does not know where any of the monsters are, but he knows that there is exactly one monster in each row except the first row and the last row, and that each column contains at most one monster.\nTurbo makes a series of attempts to go from the first row to the last row. On each attempt, he chooses to start on any cell in the first row, then repeatedly moves to an adjacent cell sharing a common side. (He is allowed to return to a previously visited cell.) If he reaches a cell with a monster, his attempt ends and he is transported back to the first row to start a new attempt. The monsters do not move, and Turbo remembers whether or not each cell he has visited contains a monster. If he reaches any cell in the last row, his attempt ends and the game is over.", "suffix": "Determine the minimum value of $n$ for which Turbo has a strategy that guarantees reaching the last row on the $n^{\\text {th }}$ attempt or earlier, regardless of the locations of the monsters.\\\\"}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nnamespace IMO2024P5\n\n/-- A cell on the board for the game. -/\nabbrev Cell : Type := Fin 2024 \u00d7 Fin 2023\n\n/-- A row that is neither the first nor the last (and thus contains a monster). -/\nabbrev InteriorRow : Type := (Set.Icc 1 \u27e82022, by decide\u27e9 : Set (Fin 2024))\n\n/-- Data for valid positions of the monsters. -/\nabbrev MonsterData : Type := InteriorRow \u21aa Fin 2023\n\n/-- The cells with monsters as a Set, given an injection from rows to columns. -/\ndef MonsterData.monsterCells (m : MonsterData) :\n    Set Cell :=\n  Set.range (fun x : InteriorRow \u21a6 ((x : Fin 2024), m x))\n\n/-- Whether two cells are adjacent. -/\ndef Adjacent (x y : Cell) : Prop :=\n  Nat.dist x.1 y.1 + Nat.dist x.2 y.2 = 1\n\n/-- A valid path from the first to the last row. -/\nstructure Path where\n  /-- The cells on the path. -/\n  cells : List Cell\n  nonempty : cells \u2260 []\n  head_first_row : (cells.head nonempty).1 = 0\n  last_last_row : (cells.getLast nonempty).1 = \u27e82023, by decide\u27e9\n  valid_move_seq : cells.Chain' Adjacent\n\n/-- The first monster on a path, or `none`. -/\nnoncomputable def Path.firstMonster (p : Path) (m : MonsterData) : Option Cell :=\n  letI := Classical.propDecidable\n  p.cells.find? (fun x \u21a6 (x \u2208 m.monsterCells : Bool))\n\n/-- A strategy, given the results of initial attempts, returns a path for the next attempt. -/\nabbrev Strategy : Type := \u2983k : \u2115\u2984 \u2192 (Fin k \u2192 Option Cell) \u2192 Path\n\n/-- Playing a strategy, k attempts. -/\nnoncomputable def Strategy.play (s : Strategy) (m : MonsterData) :\n    (k : \u2115) \u2192 Fin k \u2192 Option Cell\n| 0 => Fin.elim0\n| k + 1 => Fin.snoc (s.play m k) ((s (s.play m k)).firstMonster m)\n\n/-- The predicate for a strategy winning within the given number of attempts. -/\ndef Strategy.WinsIn (s : Strategy) (m : MonsterData) (k : \u2115) : Prop :=\n  none \u2208 Set.range (s.play m k)\n\n/-- Whether a strategy forces a win within the given number of attempts. -/\ndef Strategy.ForcesWinIn (s : Strategy) (k : \u2115) : Prop :=\n  \u2200 m, s.WinsIn m k\n\n/-- The answer to be determined. -/\ndef answer : \u2115 := sorry\n\ntheorem result : IsLeast {n | \u2203 s : Strategy, s.ForcesWinIn n} answer := by\n  sorry\n\nend IMO2024P5"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "First we demonstrate that there is no winning strategy if Turbo has 2 attempts.\\\\\nSuppose that $(2, i)$ is the first cell in the second row that Turbo reaches on his first attempt. There can be a monster in this cell, in which case Turbo must return to the first row immediately, and he cannot have reached any other cells past the first row.\nNext, suppose that $(3, j)$ is the first cell in the third row that Turbo reaches on his second attempt. Turbo must have moved to this cell from $(2, j)$, so we know $j \\neq i$. So it is possible that there is a monster on $(3, j)$, in which case Turbo also fails on his second attempt. Therefore Turbo cannot guarantee to reach the last row in 2 attempts.\nNext, we exhibit a strategy for $n=3$. On the first attempt, Turbo travels along the path\n$$\n(1,1) \\rightarrow(2,1) \\rightarrow(2,2) \\rightarrow \\cdots \\rightarrow(2,2023)\n$$\nThis path meets every cell in the second row, so Turbo will find the monster in row 2 and his attempt will end.\nIf the monster in the second row is not on the edge of the board (that is, it is in cell $(2, i)$ with $2 \\leqslant i \\leqslant 2022$ ), then Turbo takes the following two paths in his second and third attempts:\n$$\n\\begin{aligned}\n& (1, i-1) \\rightarrow(2, i-1) \\rightarrow(3, i-1) \\rightarrow(3, i) \\rightarrow(4, i) \\rightarrow \\cdots \\rightarrow(2024, i) \\\\\n& (1, i+1) \\rightarrow(2, i+1) \\rightarrow(3, i+1) \\rightarrow(3, i) \\rightarrow(4, i) \\rightarrow \\cdots \\rightarrow(2024, i)\n\\end{aligned}\n$$\nThe only cells that may contain monsters in either of these paths are $(3, i-1)$ and $(3, i+1)$. At most one of these can contain a monster, so at least one of the two paths will be successful.\\\\\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{problem_5_solution_img_1.png}\n\\end{center}\nIf the monster in the second row is on the edge of the board, without loss of generality we may assume it is in $(2,1)$. Then, on the second attempt, Turbo takes the following path:\n$$\n(1,2) \\rightarrow(2,2) \\rightarrow(2,3) \\rightarrow(3,3) \\rightarrow \\cdots \\rightarrow(2022,2023) \\rightarrow(2023,2023) \\rightarrow(2024,2023)\n$$\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{problem_5_solution_img_2.png}\n\\end{center}\nIf there are no monsters on this path, then Turbo wins. Otherwise, let $(i, j)$ be the first cell on which Turbo encounters a monster. We have that $j=i$ or $j=i+1$. Then, on the third attempt, Turbo takes the following path:\n$$\n\\begin{aligned}\n(1,2) & \\rightarrow(2,2) \\rightarrow(2,3) \\rightarrow(3,3) \\rightarrow \\cdots \\rightarrow(i-2, i-1) \\rightarrow(i-1, i-1) \\\\\n& \\rightarrow(i, i-1) \\rightarrow(i, i-2) \\rightarrow \\cdots \\rightarrow(i, 2) \\rightarrow(i, 1) \\\\\n& \\rightarrow(i+1,1) \\rightarrow \\cdots \\rightarrow(2023,1) \\rightarrow(2024,1)\n\\end{aligned}\n$$\nNow note that\n\\begin{itemize}\n\\item The cells from $(1,2)$ to $(i-1, i-1)$ do not contain monsters because they were reached earlier than $(i, j)$ on the previous attempt.\n\\item The cells $(i, k)$ for $1 \\leqslant k \\leqslant i-1$ do not contain monsters because there is only one monster in row $i$, and it lies in $(i, i)$ or $(i, i+1)$.\n\\item The cells $(k, 1)$ for $i \\leqslant k \\leqslant 2024$ do not contain monsters because there is at most one monster in column 1, and it lies in $(2,1)$.\n\\end{itemize}\nTherefore Turbo will win on the third attempt.\\\\\nComment. A small variation on Turbo's strategy when the monster on the second row is on the edge is possible. On the second attempt, Turbo can instead take the path\n$$\n\\begin{aligned}\n(1,2023) & \\rightarrow(2,2023) \\rightarrow(2,2022) \\rightarrow \\cdots \\rightarrow(2,3) \\rightarrow(2,2) \\rightarrow(2,3) \\rightarrow \\cdots \\rightarrow(2,2023) \\\\\n& \\rightarrow(3,2023) \\rightarrow(3,2022) \\rightarrow \\cdots \\rightarrow(3,4) \\rightarrow(3,3) \\rightarrow(3,4) \\rightarrow \\cdots \\rightarrow(3,2023) \\\\\n& \\rightarrow \\cdots \\\\\n& \\rightarrow(2022,2023) \\rightarrow(2022,2022) \\rightarrow(2022,2023) \\\\\n& \\rightarrow(2023,2023) \\\\\n& \\rightarrow(2024,2023) .\n\\end{aligned}\n$$\nIf there is a monster on this path, say in cell $(i, j)$, then on the third attempt Turbo can travel straight down to the cell just left of the monster instead of following the path traced out in the second attempt.\n$$\n\\begin{aligned}\n(1, j-1) & \\rightarrow(2, j-1) \\rightarrow \\cdots \\rightarrow(i-1, j-1) \\rightarrow(i, j-1) \\\\\n& \\rightarrow(i, j-2) \\rightarrow \\cdots \\rightarrow(i, 2) \\rightarrow(i, 1) \\\\\n& \\rightarrow(i+1,1) \\rightarrow \\cdots \\rightarrow(2023,1) \\rightarrow(2024,1)\n\\end{aligned}\n$$\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{problem_5_solution_img_3.png}\n\\end{center}"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Strategy Construction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2024-P3", "year": 2024, "problem_number": 3, "nickname": "Self-Counting Sequence", "category": "combinatorics", "subcategories": ["Enumerative Combinatorics", "Combinatorics on Words/Sequences"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.437, "stdev": 1.221, "histogram": [501, 40, 38, 10, 3, 2, 7, 8], "total_participants": 609}, "problem": {"natural_language": {"format": "latex", "text": "Let $(a_n)_{n=1}^{\\infty}$ be an infinite sequence of positive integers, and let $k$ be a positive integer. Suppose that, for each $i \\geq 1$, $a_i$ is equal to the number of times $i$ appears in the list $a_1, a_2, \\ldots, a_k$.\n\\medskip\n\\noindent\nProve that at least one of the sequence $(a_n)$ and $k$ is eventually periodic.\n\\medskip\n\\noindent\n(An infinite sequence $(a_n)$ is eventually periodic if there exist positive integers $N$ and $T$ such that $a_{n+T} = a_n$ for all $n \\geq N$.)", "prefix": "Let $(a_n)_{n=1}^{\\infty}$ be an infinite sequence of positive integers, and let $k$ be a positive integer. Suppose that, for each $i \\geq 1$, $a_i$ is equal to the number of times $i$ appears in the list $a_1, a_2, \\ldots, a_k$.", "suffix": "Prove that at least one of the sequence $(a_n)$ and $k$ is eventually periodic.\n\\medskip\n\\noindent\n(An infinite sequence $(a_n)$ is eventually periodic if there exist positive integers $N$ and $T$ such that $a_{n+T} = a_n$ for all $n \\geq N$.)"}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nopen scoped Finset\n\nnamespace IMO2024P3\n\n/-- The property of a sequence being eventually periodic. -/\ndef EventuallyPeriodic (b : \u2115 \u2192 \u2115) : Prop := \u2203 p M, 0 < p \u2227 \u2200 m, M \u2264 m \u2192 b (m + p) = b m\n\n/-- Following usual Lean conventions, this is expressed with indices starting from 0, rather than\nfrom 1 as in the informal statment (but `N` remains as the index of the last term for which `a n`\nis not defined in terms of previous terms). -/\ntheorem result {a : \u2115 \u2192 \u2115} {N : \u2115} (h0 : \u2200 i, 0 < a i)\n    (ha : \u2200 n, N < n \u2192 a n = #{i \u2208 (Finset.range n) | a i = a (n - 1)}) :\n    EventuallyPeriodic (fun i \u21a6 a (2 * i)) \u2228 EventuallyPeriodic (fun i \u21a6 a (2 * i + 1)) := by\n  sorry\n\nend IMO2024P3"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $a_{1}, a_{2}, a_{3}, \\ldots$ be an infinite sequence of positive integers, and let $N$ be a positive integer. Suppose that, for each $n>N$, the number $a_{n}$ is equal to the number of times $a_{n-1}$ appears in the list $\\left(a_{1}, a_{2}, \\ldots, a_{n-1}\\right)$. Prove that at least one of the sequences $a_{1}, a_{3}, a_{5}, \\ldots$ and $a_{2}, a_{4}, a_{6}, \\ldots$ is eventually periodic.\n\nSet $M:=\\max \\left(a_{1}, \\ldots, a_{N}\\right)$.\n\nSetup. We will visualize the entire process as follows. We draw a stack of towers labeled $1,2, \\ldots$, each initially empty. For $i=1,2, \\ldots$, we imagine the term $a_{i}$ as adding a block $B_{i}$ to tower $a_{i}$.\n\nThen there are $N$ initial blocks placed, colored red. The rest of the blocks are colored yellow: if the last block $B_{i}$ was added to a tower that then reaches height $a_{i+1}$, the next block $B_{i+1}$ is added to tower $a_{i+1}$. We'll say $B_{i}$ contributes to the tower containing $B_{i+1}$.\n\nIn other words, the yellow blocks $B_{i}$ for $i>N$ are given coordinates $B_{i}=\\left(a_{i}, a_{i+1}\\right)$ for $i>N$. Note in particular that in towers $M+1, M+2, \\ldots$, the blocks are all yellow.\\\\\n\n\\begin{center}\n\\fbox{\\includegraphics[width=0.2\\textwidth]{2025_08_08_a37278bc1cde189c383ag-06.jpg}}\n\\end{center}\n\n\nWe let $h_{\\ell}$ denote the height of the $\\ell^{\\text {th }}$ tower at a given time $n$. (This is an abuse of notation and we should write $h_{\\ell}(n)$ at time $n$, but $n$ will always be clear from context.)\n\nI Up to alternating up and down. We start with two independent easy observations: the set of numbers that occur infinitely often is downwards closed, and consecutive terms cannot both be huge.\n\n\n\\begin{center}\n\\fbox{\\includegraphics[width=0.2\\textwidth]{2025_08_08_a37278bc1cde189c383ag-07.jpg}}\n\\end{center}\n\n\n\nProof. Suppose $B_{n}$ is a yellow block in tower $k+1$. Then with at most finitely many exceptions, $B_{n-1}$ is a yellow block at height $k+1$, and the block $B_{r}$ right below $B_{n-1}$ is also yellow; then $B_{r+1}$ is in tower $k$. Hence, with at most finitely many exceptions, the map\n\n$$\nB_{n} \\mapsto B_{n-1} \\mapsto B_{r} \\mapsto B_{r+1}\n$$\n\nprovides an injective map taking each yellow block in tower $k+1$ to a yellow block in tower $k$. (The figure above shows $B_{32} \\rightarrow B_{31} \\rightarrow B_{19} \\rightarrow B_{20}$ as an example.)\n\n$$\n\\text { Claim - If } a_{n}>M \\text { then } a_{n+1} \\leq M\n$$\n\nProof. Assume for contradiction there's a first moment where $a_{n}>M$ and $a_{n+1}>M$, meaning the block $B_{n}$ was added to an all-yellow tower past $M$ that has height exceeding $M$. (This is the X'ed out region in the figure above.) In $B_{n}$ 's tower, every (yellow) block (including $B_{n}$ ) was contributed by a block placed in different towers at height $a_{n}>M$. So before $B_{n}$, there were already $a_{n+1}>M$ towers of height more than $M$. This contradicts minimality of $n$.\n\nIt follows that the set of indices with $a_{n} \\leq M$ has arithmetic density at least half, so certainly at least some of the numbers must occur infinitely often. Of the numbers in $\\{1,2, \\ldots, M\\}$, define $L$ such that towers 1 through $L$ grow unbounded but towers $L+1$ through $M$ do not. Then we can pick a larger threshold $N^{\\prime}>N$ such that\n\n\\begin{itemize}\n  \\item Towers 1 through $L$ have height greater than ( $M, N$ );\n  \\item Towers $L+1$ through $M$ will receive no further blocks;\n  \\item $a_{N^{\\prime}} \\leq L$.\n\\end{itemize}\n\nAfter this threshold, the following statement is true:\\\\\nClaim (Alternating small and big) - The terms $a_{N^{\\prime}}, a_{N^{\\prime}+2}, a_{N^{\\prime}+4}, \\ldots$ are all at most $L$ while the terms $a_{N^{\\prime}+1}, a_{N^{\\prime}+3}, a_{N^{\\prime}+5}, \\ldots$ are all greater than $M$.\n\nIT Automaton for $n \\equiv N^{\\prime}(\\bmod 2)$. From now on we always assume $n>N^{\\prime}$. When $n \\equiv N^{\\prime}(\\bmod 2)$, i.e., when $a_{n}$ is small, we define the state\n\n$$\nS(n)=\\left(h_{1}, h_{2}, \\ldots, h_{L} ; a_{n}\\right) .\n$$\n\nFor example, in the figure below, we illustrate how\n\n$$\nS(34)=\\left(9,11 ; a_{34}=1\\right) \\longrightarrow S(36)=\\left(9,12 ; a_{36}=2\\right)\n$$\n\n\\begin{center}\n\\fbox{\\includegraphics[width=0.3\\textwidth]{2025_08_08_a37278bc1cde189c383ag-08.jpg}}\n\\end{center}\n\n\n\nThe final element $a_{n}$ simply reminds us which tower was most recently incremented. At this point we can give a complete description of how to move from $S(n)$ to $S(n+2)$ :\n\n\\begin{itemize}\n  \\item The intermediate block $B_{n+1}$ is placed in the tower corresponding to the height $a_{n+1}$ of $B_{n}$;\n  \\item That tower will have height $a_{n+2}$ equal to the number of towers with height at least $a_{n+1}$; that is, it equals the cardinality of the set\n\\end{itemize}\n\n$$\n\\left\\{i: h_{i} \\geq h_{a_{n}}\\right\\}\n$$\n\n\\begin{itemize}\n  \\item We increment $h_{a_{n+2}}$ by 1 and update $a_{n}$.\n\\end{itemize}\n\nFor example, the illustrated $S(34) \\rightarrow S(36)$ corresponds to the block $B_{34}$ at height $h_{1}$ in tower 1 giving the block $B_{35}$ at height 2 in tower $h_{1}$, then block $B_{36}$ at height $h_{2}+1$ being placed in tower 2.\n\nPigeonhole periodicity argument. Because only the relative heights matter in the automata above, if we instead define\n\n$$\nT(n)=\\left(h_{1}-h_{2}, h_{2}-h_{3}, \\ldots, h_{L-1}-h_{L} ; a_{n}\\right) .\n$$\n\nthen $T(n+2)$ can be determined from just $T(n)$.\\\\\nSo it would be sufficient to show $T(n)$ only takes on finitely many values to show that $T(n)$ (and hence $a_{n}$ ) is eventually periodic.\n\nSince we have the bound $h_{k+1} \\leq h_{k}+C$, we are done upon proving the following lower bound:\n\nClaim - For every $1 \\leq \\ell<L$ and $n>N^{\\prime}$, we have $h_{\\ell} \\leq h_{\\ell+1}+C \\cdot(L-1)$.\n\nProof. Assume for contradiction that there is some moment $n>N^{\\prime}$ such that\n\n$$\nh_{\\ell}>h_{\\ell+1}+C \\cdot(L-1)\n$$\n\nand WLOG assume that $h_{\\ell}$ was just updated at the moment $n$. Together with $h_{k+1} \\leq$ $h_{k}+C$ for all $k$ and triangle inequality, we conclude\n\n$$\n\\min \\left(h_{1}, \\ldots, h_{\\ell}\\right)>q:=\\max \\left(h_{\\ell+1}, \\ldots, h_{L}\\right) .\n$$\n\nWe find that the blocks now in fact alternate between being placed among the first $\\ell$ towers and in towers with indices greater than $q$ thereafter. Hence the heights $h_{\\ell+1}, \\ldots$, $h_{L}$ never grow after this moment. This contradicts the definition of $L$.\n\nRemark. In fact, it can be shown that the period is actually exactly $L$, meaning the periodic part will be exactly a permutation of $(1,2, \\ldots, L)$. For any $L$, it turns out there is indeed a permutation achieving that periodic part.\n"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Pigeonhole Principle", "Bijection", "Coloring Argument"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2023-P5", "year": 2023, "problem_number": 5, "nickname": "Japanese Triangle", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.417, "stdev": 2.568, "histogram": [219, 29, 174, 52, 4, 13, 9, 118], "total_participants": 618}, "problem": {"natural_language": {"format": "latex", "text": "Let $n$ be a positive integer. A Japanese triangle consists of $1 + 2 + \\dots + n$ circles arranged in an equilateral triangular shape such that for each $i = 1$, $2$, $\\dots$, $n$, the $i^{th}$ row contains exactly $i$ circles, exactly one of which is coloured red. A ninja path in a Japanese triangle is a sequence of $n$ circles obtained by starting in the top row, then repeatedly going from a circle to one of the two circles immediately below it and finishing in the bottom row. Here is an example of a Japanese triangle with $n = 6$, along with a ninja path in that triangle containing two red circles.\nIn terms of $n$, find the greatest $k$ such that in each Japanese triangle there is a ninja path containing at least $k$ red circles.", "prefix": "Let $n$ be a positive integer. A Japanese triangle consists of $1 + 2 + \\dots + n$ circles arranged in an equilateral triangular shape such that for each $i = 1$, $2$, $\\dots$, $n$, the $i^{th}$ row contains exactly $i$ circles, exactly one of which is coloured red. A ninja path in a Japanese triangle is a sequence of $n$ circles obtained by starting in the top row, then repeatedly going from a circle to one of the two circles immediately below it and finishing in the bottom row. Here is an example of a Japanese triangle with $n = 6$, along with a ninja path in that triangle containing two red circles.", "suffix": "In terms of $n$, find the greatest $k$ such that in each Japanese triangle there is a ninja path containing at least $k$ red circles."}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nopen scoped Finset\n\nnamespace IMO2023P5\n\n/-- A circle of a Japanese triangle. -/\nabbrev Circle (n : \u2115) : Type := \u03a3 i : Fin n, Fin ((i : \u2115) + 1)\n\n/-- A Japanese triangle. -/\nstructure JapaneseTriangle (n : \u2115) where\n  /-- The red circle in each row. -/\n  redCirclePos : (i : Fin n) \u2192 Fin ((i : \u2115) + 1)\n\n/-- The set of red circles in a Japanese triangle. -/\ndef JapaneseTriangle.redCircles {n : \u2115} (jt : JapaneseTriangle n) : Finset (Circle n) :=\n  Finset.image (fun i \u21a6 \u27e8i, jt.redCirclePos i\u27e9) Finset.univ\n\n/-- A ninja path in a Japanese triangle. -/\nstructure NinjaPath (n : \u2115) where\n  /-- The circles in the path. -/\n  circlePos : (i : Fin n) \u2192 Fin ((i : \u2115) + 1)\n  adjacent : \u2200 i : Fin n, \u2200 hi : (i : \u2115) + 1 < n,\n    (circlePos \u27e8(i : \u2115) + 1, hi\u27e9 : \u2115) = (circlePos i : \u2115) \u2228\n      (circlePos \u27e8(i : \u2115) + 1, hi\u27e9 : \u2115) = (circlePos i : \u2115) + 1\n\n/-- The set of circles in a ninja path. -/\ndef NinjaPath.circles {n : \u2115} (np : NinjaPath n) : Finset (Circle n) :=\n  Finset.image (fun i \u21a6 \u27e8i, np.circlePos i\u27e9) Finset.univ\n\n/-- The answer to be determined. -/\ndef answer : \u2115+ \u2192 \u2115 := sorry\n\ntheorem result (n : \u2115+) : IsGreatest {k : \u2115 | \u2200 jt : JapaneseTriangle n, \u2203 np : NinjaPath n,\n    k \u2264 #(np.circles \u2229 jt.redCircles)} (answer n) := by\n  sorry\n\nend IMO2023P5"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $n$ be a positive integer. A Japanese triangle consists of $1+2+\\cdots+n$ circles arranged in an equilateral triangular shape such that for each $1 \\leq i \\leq n$, the $i^{\\text {th }}$ row contains exactly $i$ circles, exactly one of which is colored red. A ninja path in a Japanese triangle is a sequence of $n$ circles obtained by starting in the top row, then repeatedly going from a circle to one of the two circles immediately below it and finishing in the bottom row. Here is an example of a Japanese triangle with $n=6$, along with a ninja path in that triangle containing two red circles.\\\\\n\\begin{center}\n\\fbox{\\includegraphics[width=0.3\\textwidth]{2025_07_29_fac7edf8bce1c431b198g-11}}\n\\end{center}\nIn terms of $n$, find the greatest $k$ such that in each Japanese triangle there is a ninja path containing at least $k$ red circles.\nThe answer is\n$$\nk=\\left\\lfloor\\log _{2}(n)\\right\\rfloor+1 .\n$$\nI Construction. It suffices to find a Japanese triangle for $n=2^{e}-1$ with the property that at most $e$ red circles in any ninja path. The construction shown below for $e=4$ obviously generalizes, and works because in each of the sets $\\{1\\},\\{2,3\\},\\{4,5,6,7\\}, \\ldots$, $\\left\\{2^{e-1}, \\ldots, 2^{e}-1\\right\\}$, at most one red circle can be taken. (These sets are colored in different shades of red for visual clarity).\\\\\n\\begin{center}\n\\fbox{\\includegraphics[width=0.3\\textwidth]{2025_07_29_fac7edf8bce1c431b198g-11(1)}}\n\\end{center}\nI Bound. Conversely, we show that in any Japanese triangle, one can find a ninja path containing at least\n$$\nk=\\left\\lfloor\\log _{2}(n)\\right\\rfloor+1 .\n$$\nWe construct a rooted binary tree $T_{1}$ on the set of all circles as follows. For each row, other than the bottom row:\n\\begin{itemize}\n\\item Connect the red circle to both circles under it;\n\\item White circles to the left of the red circle in its row are connected to the left;\n\\item White circles to the right of the red circle in its row are connected to the right.\n\\end{itemize}\nThe circles in the bottom row are all leaves of this tree. For example, the $n=6$ construction in the beginning gives the tree shown on the left half of the figure below:\\\\\n\\begin{center}\n\\fbox{\\includegraphics[width=0.3\\textwidth]{2025_07_29_fac7edf8bce1c431b198g-12(1)}}\n\\end{center}\nNow focus on only the red circles, as shown in the right half of the figure. We build a new rooted tree $T_{2}$ where each red circle is joined to the red circle below it if there was a path of (zero or more) white circles in $T_{1}$ between them. Then each red circle has at most 2 direct descendants in $T_{2}$. Hence the depth of the new tree $T_{2}$ exceeds $\\log _{2}(n)$, which produces the desired path.\nIT Another recursive proof of bound, communicated by Helio Ng. We give another proof that $\\left\\lfloor\\log _{2} n\\right\\rfloor+1$ is always achievable. Define $f(i, j)$ to be the maximum number of red circles contained in the portion of a ninja path from $(1,1)$ to $(i, j)$, including the endpoints ( 1,1 ) and ( $i, j$ ). (If ( $i, j$ ) is not a valid circle in the triangle, define $f(i, j)=0$ for convenience.) An example is shown below with the values of $f(i, j)$ drawn in the circles.\\\\\n\\begin{center}\n\\fbox{\\includegraphics[width=0.3\\textwidth]{2025_07_29_fac7edf8bce1c431b198g-12}}\n\\end{center}\nWe have that\n$$\nf(i, j)=\\max \\{f(i-1, j-1), f(i, j-1)\\}+ \\begin{cases}1 & \\text { if }(i, j) \\text { is red } \\\\ 0 & \\text { otherwise }\\end{cases}\n$$\nsince every ninja path passing through $(i, j)$ also passes through either $(i-1, j-1)$ or $(i, j-1)$. Now consider the quantity $S_{j}=f(0, j)+\\cdots+f(j, j)$. We obtain the following recurrence:\nClaim $-S_{j+1} \\geq S_{j}+\\left\\lceil\\frac{S_{j}}{j}\\right\\rceil+1$.\nProof. Consider a maximal element $f(m, j)$ of $\\{f(0, j), \\ldots, f(j, j)\\}$. We perform the following manipulations:\n$$\n\\begin{aligned}\nS_{j+1} & =\\sum_{i=0}^{j+1} \\max \\{f(i-1, j), f(i, j)\\}+\\sum_{i=0}^{j+1} \\begin{cases}1 & \\text { if }(i, j+1) \\text { is red } \\\\\n0 & \\text { otherwise }\\end{cases} \\\\\n& =\\sum_{i=0}^{m} \\max \\{f(i-1, j), f(i, j)\\}+\\sum_{i=m+1}^{j} \\max \\{f(i-1, j), f(i, j)\\}+1 \\\\\n& \\geq \\sum_{i=0}^{m} f(i, j)+\\sum_{i=m+1}^{j} f(i-1, j)+1 \\\\\n& =S_{j}+f(m, j)+1 \\\\\n& \\geq S_{j}+\\left\\lceil\\frac{S_{j}}{j}\\right\\rceil+1\n\\end{aligned}\n$$\nwhere the last inequality is due to Pigeonhole.\\\\\nThis is actually enough to solve the problem. Write $n=2^{c}+r$, where $0 \\leq r \\leq$ $2^{c}-1$.\nClaim $-S_{n} \\geq c n+2 r+1$. In particular, $\\left\\lceil\\frac{S_{n}}{n}\\right\\rceil \\geq c+1$.\\\\\nProof. First note that $S_{n} \\geq c n+2 r+1$ implies $\\left\\lceil\\frac{S_{n}}{n}\\right\\rceil \\geq c+1$ because\n$$\n\\left\\lceil\\frac{S_{n}}{n}\\right\\rceil \\geq\\left\\lceil\\frac{c n+2 r+1}{n}\\right\\rceil=c+\\left\\lceil\\frac{2 r+1}{n}\\right\\rceil=c+1\n$$\nWe proceed by induction on $n$. The base case $n=1$ is clearly true as $S_{1}=1$. Assuming that the claim holds for some $n=j$, we have\n$$\n\\begin{aligned}\nS_{j+1} & \\geq S_{j}+\\left\\lceil\\frac{S_{j}}{j}\\right\\rceil+1 \\\\\n& \\geq c j+2 r+1+c+1+1 \\\\\n& =c(j+1)+2(r+1)+1\n\\end{aligned}\n$$\nso the claim is proved for $n=j+1$ if $j+1$ is not a power of 2 . If $j+1=2^{c+1}$, then by writing $c(j+1)+2(r+1)+1=c(j+1)+(j+1)+1=(c+2)(j+1)+1$, the claim is also proved.\nNow $\\left\\lceil\\frac{S_{n}}{n}\\right\\rceil \\geq c+1$ implies the existence of some ninja path containing at least $c+1$ red circles, and we are done."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Induction", "Pigeonhole Principle", "Coloring Argument", "Recursion"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2022-P6", "year": 2022, "problem_number": 6, "nickname": "Nordic Square", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Graph Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.683, "stdev": 1.588, "histogram": [434, 80, 22, 7, 19, 3, 2, 22], "total_participants": 589}, "problem": {"natural_language": {"format": "latex", "text": "Let $n$ be a positive integer. A Nordic square is an $n \\times n$ board containing all the integers from 1 to $n^{2}$ so that each cell contains exactly one number. An uphill path is a sequence of one or more cells such that:\n\\begin{enumerate}\n\\item the first cell in the sequence is a valley, meaning the number written is less than all its orthogonal neighbors,\n\\item each subsequent cell in the sequence is orthogonally adjacent to the previous cell, and\n\\item the numbers written in the cells in the sequence are in increasing order.\n\\end{enumerate}\nFind, as a function of $n$, the smallest possible total number of uphill paths in a Nordic square.", "prefix": "Let $n$ be a positive integer. A Nordic square is an $n \\times n$ board containing all the integers from 1 to $n^{2}$ so that each cell contains exactly one number. An uphill path is a sequence of one or more cells such that:\n\\begin{enumerate}\n\\item the first cell in the sequence is a valley, meaning the number written is less than all its orthogonal neighbors,\n\\item each subsequent cell in the sequence is orthogonally adjacent to the previous cell, and\n\\item the numbers written in the cells in the sequence are in increasing order.\n\\end{enumerate}", "suffix": "Find, as a function of $n$, the smallest possible total number of uphill paths in a Nordic square."}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nopen scoped Cardinal\n\nnamespace IMO2022P6\n\n/-- A cell of the board. -/\nabbrev Cell (n : \u2115) : Type := Fin n \u00d7 Fin n\n\n/-- A Nordic square. -/\nabbrev NordicSquare (n : \u2115) : Type := Cell n \u2243 Finset.Icc 1 ($n ^ 2$)\n\n/-- Whether two cells are adjacent. -/\ndef Adjacent {n : \u2115} (x y : Cell n) : Prop :=\n  Nat.dist x.1 y.1 + Nat.dist x.2 y.2 = 1\n\n/-- The definition of a valley from the problem. -/\ndef NordicSquare.Valley {n : \u2115} (ns : NordicSquare n) (c : Cell n) : Prop :=\n  \u2200 c' : Cell n, Adjacent c c' \u2192 (ns c : \u2115) < (ns c' : \u2115)\n\n/-- The definition of an uphill path from the problem. -/\nstructure NordicSquare.UphillPath {n : \u2115} (ns : NordicSquare n) where\n  /-- The cells on the path. -/\n  cells : List (Cell n)\n  nonempty : cells \u2260 []\n  first\\_valley : ns.Valley (cells.head nonempty)\n  adjacent : cells.Chain' Adjacent\n  increasing : cells.Chain' fun x y \u21a6 (ns x : \u2115) < (ns y : \u2115)\n\n/-- The answer to be determined. -/\ndef answer : \u2115+ \u2192 \u2115 := sorry\n\ntheorem result {n : \u2115+} :\n    IsLeast {k : \u2115 | \u2203 ns : NordicSquare n, #ns.UphillPath = k} (answer n) := by\n  sorry\n\nend IMO2022P6"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "We will call any field that is only adjacent to fields with larger numbers a well. Other fields will be called non-wells. Let us make a second $n \\times n$ board $B$ where in each field we will write the number of good sequences which end on the corresponding field in the original board $A$. We will thus look for the minimal possible value of the sum of all entries in $B$.\nWe note that any well has just one good path ending in it, consisting of just the well, and that any other field has the number of good paths ending in it equal to the sum of this quantity for all the adjacent fields with smaller values, since a good path can only come into the field from a field of lower value. Therefore, if we fill in the fields in $B$ in increasing order with respect to their values in $A$, it follows that each field not adjacent to any already filled field will receive a 1, while each field adjacent to already filled fields will receive the sum of the numbers already written on these adjacent fields.\nWe note that there is at least one well in $A$, that corresponding with the field with the entry 1 in $A$. Hence, the sum of values of fields in $B$ corresponding to wells in $A$ is at least 1 . We will now try to minimize the sum of the non-well entries, i.e. of the entries in $B$ corresponding to the non-wells in $A$. We note that we can ascribe to each pair of adjacent fields the value of the lower assigned number and that the sum of non-well entries will then equal to the sum of the ascribed numbers. Since the lower number is still at least 1, the sum of non-well entries will at least equal the number of pairs of adjacent fields, which is $2 n(n-1)$. Hence, the total minimum sum of entries in $B$ is at least $2 n(n-1)+1=2 n^{2}-2 n+1$. The necessary conditions for the minimum to be achieved is for there to be only one well and for no two entries in $B$ larger than 1 to be adjacent to each other.\nWe will now prove that the lower limit of $2 n^{2}-2 n+1$ entries can be achieved. This amounts to finding a way of marking a certain set of squares, those that have a value of 1 in $B$, such that no two unmarked squares are adjacent and that the marked squares form a connected tree with respect to adjacency.\nFor $n=1$ and $n=2$ the markings are respectively the lone field and the L-trimino. Now, for $n>2$, let $s=2$ for $n \\equiv 0,2 \\bmod 3$ and $s=1$ for $n \\equiv 1 \\bmod 3$. We will take indices $k$ and $l$ to be arbitrary non-negative integers. For $n \\geqslant 3$ we will construct a path of marked squares in the first two columns consisting of all squares of the form $(1, i)$ where $i$ is not of the form $6 k+s$ and $(2, j)$ where $j$ is of the form $6 k+s-1,6 k+s$ or $6+s+1$. Obviously, this path is connected. Now, let us consider the fields $(2,6 k+s)$ and $(1,6 k+s+3)$. For each considered field $(i, j)$ we will mark all squares of the form $(l, j)$ for $l>i$ and $(i+2 k, j \\pm 1)$. One can easily see that no set of marked fields will produce a cycle, that the only fields of the unmarked form $(1,6 k+s),(2+2 l+1,6 k+s \\pm 1)$ and $(2+2 l, 6 k+s+3 \\pm 1)$ and that no two are adjacent, since\\\\\nthe consecutive considered fields are in columns of opposite parity. Examples of markings are given for $n=3,4,5,6,7$, and the corresponding constructions for $A$ and $B$ are given for $n=5$.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.8\\textwidth]\n{2024_08_22_43e9f60d54e95a6171d1g-41}}\\end{center}\n\\section*{Common remarks.}\n\\begin{itemize}\n\\item The construction can be achieved in different ways. For example, it can also be done recursively; we can complete any construction for $n$ to a construction for $n+1$.\n\\item It is a natural idea to change the direction of the path: that way it can start anywhere, but only can end in a well, which exactly means that we cannot extend the path. This is just a reformulation of the problem, but can give some intuitions.\n\\end{itemize}"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Graph-Theoretic Reformulation"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2022-P1", "year": 2022, "problem_number": 1, "nickname": "The Bank of Oslo", "category": "combinatorics", "subcategories": ["Combinatorics on Words/Sequences"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 5.54, "stdev": 2.413, "histogram": [34, 56, 19, 21, 10, 13, 51, 385], "total_participants": 589}, "problem": {"natural_language": {"format": "latex", "text": "The Bank of Oslo issues two types of coin: aluminium (denoted $A$ ) and bronze (denoted $B$ ). Marianne has $n$ aluminium coins and $n$ bronze coins, arranged in a row in some arbitrary initial order. A chain is any subsequence of consecutive coins of the same type. Given a fixed positive integer $k \\leqslant 2 n$, Marianne repeatedly performs the following operation: she identifies the longest chain containing the $k^{\\text {th }}$ coin from the left, and moves all coins in that chain to the left end of the row. For example, if $n=4$ and $k=4$, the process starting from the ordering $A A B B B A B A$ would be\n$$\nA A B \\underline{B} B A B A \\rightarrow B B B \\underline{A} A A B A \\rightarrow A A A \\underline{B} B B B A \\rightarrow B B B \\underline{B} A A A A \\rightarrow B B B \\underline{B} A A A A \\rightarrow \\cdots .\n$$\nFind all pairs $(n, k)$ with $1 \\leqslant k \\leqslant 2 n$ such that for every initial ordering, at some moment during the process, the leftmost $n$ coins will all be of the same type.", "prefix": "The Bank of Oslo issues two types of coin: aluminium (denoted $A$ ) and bronze (denoted $B$ ). Marianne has $n$ aluminium coins and $n$ bronze coins, arranged in a row in some arbitrary initial order. A chain is any subsequence of consecutive coins of the same type. Given a fixed positive integer $k \\leqslant 2 n$, Marianne repeatedly performs the following operation: she identifies the longest chain containing the $k^{\\text {th }}$ coin from the left, and moves all coins in that chain to the left end of the row. For example, if $n=4$ and $k=4$, the process starting from the ordering $A A B B B A B A$ would be\n$$\nA A B \\underline{B} B A B A \\rightarrow B B B \\underline{A} A A B A \\rightarrow A A A \\underline{B} B B B A \\rightarrow B B B \\underline{B} A A A A \\rightarrow B B B \\underline{B} A A A A \\rightarrow \\cdots .\n$$", "suffix": "Find all pairs $(n, k)$ with $1 \\leqslant k \\leqslant 2 n$ such that for every initial ordering, at some moment during the process, the leftmost $n$ coins will all be of the same type."}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nopen scoped Finset\n\nnamespace IMO2022P1\n\n/-- The two types of coins. -/\ninductive Coin : Type where\n  | A : Coin\n  | B : Coin\n\n/-- A row of coins. -/\nabbrev Row (n : \u2115) : Type := Fin (2 * n) \u2192 Coin\n\nopen scoped Classical in\n/-- The property of a row having `n` of each kind of coin. -/\ndef Row.valid {n : \u2115} (c : Row n) : Prop := #{i | c i = Coin.A} = n\n\nopen scoped Classical in\n/-- The first coin in the chain containing coin `k` (zero-based). -/\nnoncomputable def Row.chainLeft {n : \u2115} (c : Row n) (k : Fin (2 * n)) : Fin (2 * n) :=\n  {j \u2208 Finset.Iic k | \u2200 i, j \u2264 i \u2192 i \u2264 k \u2192 c i = c k}.min' \u27e8k, by\n    simp only [Finset.mem_filter, Finset.mem_Iic, le_refl, true_and]\n    rintro i hki hik\n    rw [le_antisymm hki hik]\u27e9\n\nopen scoped Classical in\n/-- The last coin in the chain containing coin `k` (zero-based). -/\nnoncomputable def Row.chainRight {n : \u2115} (c : Row n) (k : Fin (2 * n)) : Fin (2 * n) :=\n  {j \u2208 Finset.Ici k | \u2200 i, k \u2264 i \u2192 i \u2264 j \u2192 c i = c k}.max' \u27e8k, by\n    simp only [Finset.mem_filter, Finset.mem_Ici, le_refl, true_and]\n    rintro i hki hik\n    rw [le_antisymm hki hik]\u27e9\n\n/-- Move coins `a` through `b` to the left of the row. -/\ndef Row.move {n : \u2115} (c : Row n) (a b : Fin (2 * n)) : Row n :=\n  fun i \u21a6 if b < i then c i else c \u27e8(((i : \u2115) + (a : \u2115)) % ((b : \u2115) + 1)),\n    (Nat.mod_lt _ (by omega)).trans_le (by omega)\u27e9\n\n/-- The operation moving the chain containing coin `k` (zero-based). -/\nnoncomputable def Row.operation {n : \u2115} (k : Fin (2 * n)) (c : Row n) : Row n :=\n  c.move (c.chainLeft k) (c.chainRight k)\n\n/-- The operation moving the chain containing coin `k` (one-based). -/\nnoncomputable def Row.operationOneBased {n k : \u2115} (hk1 : 1 \u2264 k) (hkn : k \u2264 2 * n) (c : Row n) :\n    Row n :=\n  c.operation \u27e8k - 1, by omega\u27e9\n\n/-- The answer to be determined. -/\ndef answer : Set (\u2115 \u00d7 \u2115) := sorry\n\ntheorem result : {(n, k) | \u2203 hk1 : 1 \u2264 k, \u2203 hkn : k \u2264 2 * n, \u2200 c : Row n, c.valid \u2192\n    \u2203 i, \u2200 j\u2081 j\u2082 : Fin (2 * n), (j\u2081 : \u2115) < n \u2192 (j\u2082 : \u2115) < n \u2192\n    (Row.operationOneBased hk1 hkn)^[i] c j\u2081 = (Row.operationOneBased hk1 hkn)^[i] c j\u2082} =\n    answer := by\n  sorry\n\nend IMO2022P1"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "The Bank of Oslo issues coins made out of two types of metal: aluminium (denoted $A$ ) and copper (denoted $C$ ). Morgane has $n$ aluminium coins, and $n$ copper coins, and arranges her $2 n$ coins in a row in some arbitrary initial order. Given a fixed positive integer $k \\leqslant 2 n$, she repeatedly performs the following operation: identify the largest subsequence containing the $k$-th coin from the left which consists of consecutive coins made of the same metal, and move all coins in that subsequence to the left end of the row. For example, if $n=4$ and $k=4$, the process starting from the configuration $A A C C C A C A$ would be\n$$\nA A C C C A C A \\rightarrow C C C A A A C A \\rightarrow A A A C C C C A \\rightarrow C C C C A A A A \\rightarrow \\cdots\n$$\nFind all pairs $(n, k)$ with $1 \\leqslant k \\leqslant 2 n$ such that for every initial configuration, at some point of the process there will be at most one aluminium coin adjacent to a copper coin.\\\\\nAnswer: All pairs $(n, k)$ such that $n \\leqslant k \\leqslant \\frac{3 n+1}{2}$.\\\\\nSolution. Define a block to be a maximal subsequence of consecutive coins made out of the same metal, and let $M^{b}$ denote a block of $b$ coins of metal $M$. The property that there is at most one aluminium coin adjacent to a copper coin is clearly equivalent to the configuration having two blocks, one consisting of all $A$-s and one consisting of all $C$-s.\nFirst, notice that if $k<n$, the sequence $A^{n-1} C^{n-1} A C$ remains fixed under the operation, and will therefore always have 4 blocks. Next, if $k>\\frac{3 n+1}{2}$, let $a=k-n-1, b=2 n-k+1$. Then $k>2 a+b, k>2 b+a$, so the configuration $A^{a} C^{b} A^{b} C^{a}$ will always have four blocks:\n$$\nA^{a} C^{b} A^{b} C^{a} \\rightarrow C^{a} A^{a} C^{b} A^{b} \\rightarrow A^{b} C^{a} A^{a} C^{b} \\rightarrow C^{b} A^{b} C^{a} A^{a} \\rightarrow A^{a} C^{b} A^{b} C^{a} \\rightarrow \\ldots\n$$\nTherefore a pair $(n, k)$ can have the desired property only if $n \\leqslant k \\leqslant \\frac{3 n+1}{2}$. We claim that all such pairs in fact do have the desired property. Clearly, the number of blocks in a configuration cannot increase, so whenever the operation is applied, it either decreases or remains constant. We show that unless there are only two blocks, after a finite amount of steps the number of blocks will decrease.\nConsider an arbitrary configuration with $c \\geqslant 3$ blocks. We note that as $k \\geqslant n$, the leftmost block cannot be moved, because in this case all $n$ coins of one type are in the leftmost block, meaning there are only two blocks. If a block which is not the leftmost or rightmost block is moved, its neighbor blocks will be merged, causing the number of blocks to decrease.\nHence the only case in which the number of blocks does not decrease in the next step is if the rightmost block is moved. If $c$ is odd, the leftmost and the rightmost blocks are made of the same metal, so this would merge two blocks. Hence $c \\geqslant 4$ must be even. Suppose there is a configuration of $c$ blocks with the $i$-th block having size $a_{i}$ so that the operation always moves the rightmost block:\n$$\nA^{a_{1}} \\ldots A^{a_{c-1}} C^{a_{c}} \\rightarrow C^{a_{c}} A^{a_{1}} \\ldots A^{a_{c-1}} \\rightarrow A^{a_{c-1}} C^{a_{c}} A^{a_{1}} \\ldots C^{a_{c-2}} \\rightarrow \\ldots\n$$\nBecause the rightmost block is always moved, $k \\geqslant 2 n+1-a_{i}$ for all $i$. Because $\\sum a_{i}=2 n$, summing this over all $i$ we get $c k \\geqslant 2 c n+c-\\sum a_{i}=2 c n+c-2 n$, so $k \\geqslant 2 n+1-\\frac{2 n}{c} \\geqslant \\frac{3 n}{2}+1$. But this contradicts $k \\leqslant \\frac{3 n+1}{2}$. Hence at some point the operation will not move the rightmost block, meaning that the number of blocks will decrease, as desired."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Strategy Construction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2021-P5", "year": 2021, "problem_number": 5, "nickname": "Walnuts Swapped Around a Circle", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Graph Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.152, "stdev": 3.142, "histogram": [404, 12, 13, 4, 2, 5, 4, 175], "total_participants": 619}, "problem": {"natural_language": {"format": "latex", "text": "Two squirrels, Bushy and Jumpy, have collected 2021 walnuts for the winter. Jumpy numbers the walnuts from 1 through 2021, and digs 2021 little holes in a circular pattern in the ground around their favourite tree. The next morning Jumpy notices that Bushy had placed one walnut into each hole, but had paid no attention to the numbering. Unhappy, Jumpy decides to reorder the walnuts by performing a sequence of 2021 moves. In the $k$-th move, Jumpy swaps the positions of the two walnuts adjacent to walnut $k$.\n\\medskip\n\\noindent\nProve that there exists a value of $k$ such that, on the $k$-th move, Jumpy swaps some walnuts $a$ and $b$ such that $a < k < b$.", "prefix": "Two squirrels, Bushy and Jumpy, have collected 2021 walnuts for the winter. Jumpy numbers the walnuts from 1 through 2021, and digs 2021 little holes in a circular pattern in the ground around their favourite tree. The next morning Jumpy notices that Bushy had placed one walnut into each hole, but had paid no attention to the numbering. Unhappy, Jumpy decides to reorder the walnuts by performing a sequence of 2021 moves. In the $k$-th move, Jumpy swaps the positions of the two walnuts adjacent to walnut $k$.", "suffix": "Prove that there exists a value of $k$ such that, on the $k$-th move, Jumpy swaps some walnuts $a$ and $b$ such that $a < k < b$."}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nnamespace IMO2021P5\n\n/-- The arrangement of walnuts, as an equiv from holes to walnuts (0-based). -/\nabbrev Position : Type := Fin 2021 \u2243 Fin 2021\n\n/-- The numbers of the walnuts swapped in move `k` (0-based), given the position. -/\ndef Position.swapped (p : Position) (k : Fin 2021) : Fin 2021 \u00d7 Fin 2021 :=\n  (p ((p.symm k) - 1), p ((p.symm k) + 1))\n\n/-- A single move, on a pair of position and move number. -/\ndef move (p : Position \u00d7 Fin 2021) : Position \u00d7 Fin 2021 :=\n  (p.1.trans (Equiv.swap (p.1.swapped p.2).1 (p.1.swapped p.2).2), p.2 + 1)\n\n/-- The position after `n` moves. -/\ndef Position.nth (p : Position) (n : Fin 2021) : Position := (move$^[n]$ (p, 0)).1\n\ntheorem result (p : Position) :\n    \u2203 k, (((p.nth k).swapped k).1 < k \u2227 k < ((p.nth k).swapped k).2) \u2228\n      (((p.nth k).swapped k).2 < k \u2227 k < ((p.nth k).swapped k).1) := by\n  sorry\n\nend IMO2021P5"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "A thimblerigger has 2021 thimbles numbered from 1 through 2021. The thimbles are arranged in a circle in arbitrary order. The thimblerigger performs a sequence of 2021 moves; in the $k^{\\text {th }}$ move, he swaps the positions of the two thimbles adjacent to thimble $k$.\nProve that there exists a value of $k$ such that, in the $k^{\\text {th }}$ move, the thimblerigger swaps some thimbles $a$ and $b$ such that $a<k<b$.\nSolution. Assume the contrary. Say that the $k^{\\text {th }}$ thimble is the central thimble of the $k^{\\text {th }}$ move, and its position on that move is the central position of the move.\n\\section*{Step 1: Black and white colouring.}\nBefore the moves start, let us paint all thimbles in white. Then, after each move, we repaint its central thimble in black. This way, at the end of the process all thimbles have become black.\nBy our assumption, in every move $k$, the two swapped thimbles have the same colour (as their numbers are either both larger or both smaller than $k$ ). At every moment, assign the colours of the thimbles to their current positions; then the only position which changes its colour in a move is its central position. In particular, each position is central for exactly one move (when it is being repainted to black).\n\\section*{Step 2: Red and green colouring.}\nNow we introduce a colouring of the positions. If in the $k^{\\text {th }}$ move, the numbers of the two swapped thimbles are both less than $k$, then we paint the central position of the move in red; otherwise we paint that position in green. This way, each position has been painted in red or green exactly once. We claim that among any two adjacent positions, one becomes green and the other one becomes red; this will provide the desired contradiction since 2021 is odd.\nConsider two adjacent positions $A$ and $B$, which are central in the $a^{\\text {th }}$ and in the $b^{\\text {th }}$ moves, respectively, with $a<b$. Then in the $a^{\\text {th }}$ move the thimble at position $B$ is white, and therefore has a number greater than $a$. After the $a^{\\text {th }}$ move, position $A$ is green and the thimble at position $A$ is black. By the arguments from Step 1, position $A$ contains only black thimbles after the $a^{\\text {th }}$ step. Therefore, on the $b^{\\text {th }}$ move, position $A$ contains a black thimble whose number is therefore less than $b$, while thimble $b$ is at position $B$. So position $B$ becomes red, and hence $A$ and $B$ have different colours.\nComment 1. Essentially, Step 1 provides the proof of the following two assertions (under the indirect assumption):\\\\\n(1) Each position $P$ becomes central in exactly one move (denote that move's number by $k$ ); and\\\\\n(2) Before the $k^{\\text {th }}$ move, position $P$ always contains a thimble whose number is larger than the number of the current move, while after the $k^{\\text {th }}$ move the position always contains a thimble whose number is smaller than the number of the current move.\nBoth (1) and (2) can be proved without introduction of colours, yet the colours help to visualise the argument.\nAfter these two assertions have been proved, Step 2 can be performed in various ways, e.g., as follows.\nAt any moment in the process, the black positions are split into several groups consisting of one or more contiguous black positions each; different groups are separated by white positions. Now one can prove by induction on $k$ that, after the $k^{\\text {th }}$ move, all groups have odd sizes. Indeed, in every move, the new black position either forms a separate group, or merges two groups (say, of lengths $a$ and $b$ ) into a single group of length $a+b+1$.\nHowever, after the $2020^{\\text {th }}$ move the black positions should form one group of length 2020. This is a contradiction.\nThis argument has several variations; e.g., one can check in a similar way that, after the process starts, at least one among the groups of white positions has an even size.\nComment 2. The solution above works equally well for any odd number of thimbles greater than 1 , instead of 2021. On the other hand, a similar statement with an even number $n=2 k \\geqslant 4$ of thimbles is wrong. To show that, the thimblerigger can enumerate positions from 1 through $n$ clockwise, and then put thimbles $1,2, \\ldots, k$ at the odd positions, and thimbles $k+1, k+2, \\ldots, 2 k$ at the even positions."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Parity", "Matching/Hall"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2020-P4", "year": 2020, "problem_number": 4, "nickname": "Cable Car Linking Problem", "category": "combinatorics", "subcategories": ["Graph Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.938, "stdev": 3.17, "histogram": [213, 11, 3, 42, 35, 14, 13, 285], "total_participants": 616}, "problem": {"natural_language": {"format": "latex", "text": "There is an integer $n>1$. There are $n^{2}$ stations on a slope of a mountain, all at different altitudes. Each of two cable car companies, $A$ and $B$, operates $k$ cable cars; each cable car provides a transfer from one of the stations to a higher one (with no intermediate stops). The $k$ cable cars of $A$ have $k$ different starting points and $k$ different finishing points, and a cable car which starts higher also finishes higher. The same conditions hold for $B$. We say that two stations are linked by a company if one can start from the lower station and reach the higher one by using one or more cars of that company (no other movements between stations are allowed).\nDetermine the smallest positive integer $k$ for which one can guarantee that there are two stations that are linked by both companies.", "prefix": "There is an integer $n>1$. There are $n^{2}$ stations on a slope of a mountain, all at different altitudes. Each of two cable car companies, $A$ and $B$, operates $k$ cable cars; each cable car provides a transfer from one of the stations to a higher one (with no intermediate stops). The $k$ cable cars of $A$ have $k$ different starting points and $k$ different finishing points, and a cable car which starts higher also finishes higher. The same conditions hold for $B$. We say that two stations are linked by a company if one can start from the lower station and reach the higher one by using one or more cars of that company (no other movements between stations are allowed).", "suffix": "Determine the smallest positive integer $k$ for which one can guarantee that there are two stations that are linked by both companies."}, "code": [{"language": "lean4", "text": "import Mathlib\n\n\nnamespace IMO2020P4\n\n/-- A cable car's starting and finishing points. -/\nstructure Car (n : \u2115) : Type where\n  /-- The starting point. -/\n  start : Fin (n ^ 2)\n  /-- The finishing point. -/\n  finish : Fin (n ^ 2)\n  start_lt_finish : start < finish\n\n/-- The cable cars of a company. -/\nstructure Company (n k : \u2115) : Type where\n  /-- The individual cars. -/\n  cars : Fin k \u2192 Car n\n  injective_start : Function.Injective fun i \u21a6 (cars i).start\n  injective_finish : Function.Injective fun i \u21a6 (cars i).finish\n  monovary_start_finish : Monovary (fun i \u21a6 (cars i).start) (fun i \u21a6 (cars i).finish)\n\n/-- A linkage between two stations. -/\nstructure Company.linkage {n k : \u2115} (c : Company n k) : Type where\n  /-- The sequence of cars used. -/\n  cars : List (Fin k)\n  nonempty : cars \u2260 []\n  valid : cars.Chain' fun i j \u21a6 (c.cars i).finish = (c.cars j).start\n\n/-- The first station in a linkage. -/\ndef Company.linkage.start {n k : \u2115} {c : Company n k} (x : c.linkage) : Fin (n ^ 2) :=\n  (c.cars (x.cars.head x.nonempty)).start\n\n/-- The last station in a linkage. -/\ndef Company.linkage.finish {n k : \u2115} {c : Company n k} (x : c.linkage) : Fin (n ^ 2) :=\n  (c.cars (x.cars.getLast x.nonempty)).finish\n\n/-- The property of two stations being linked (in the given order). -/\ndef Company.linked {n k : \u2115} (c : Company n k) (l h : Fin (n ^ 2)) : Prop :=\n  \u2203 x : c.linkage, x.start = l \u2227 x.finish = h\n\n/-- The answer to be determined. -/\ndef answer : (Set.Ioi 1) \u2192 \u2115 := sorry\n\ntheorem result (n : Set.Ioi 1) :\n    IsLeast {k : \u2115 | \u2200 A B : Company n k, \u2203 i j, A.linked i j \u2227 B.linked i j} (answer n) := by\n  sorry\n\nend IMO2020P4"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $n$ be an integer with $n \\geqslant 2$. On a slope of a mountain, $n^{2}$ checkpoints are marked, numbered from 1 to $n^{2}$ from the bottom to the top. Each of two cable car companies, $A$ and $B$, operates $k$ cable cars numbered from 1 to $k$; each cable car provides a transfer from some checkpoint to a higher one. For each company, and for any $i$ and $j$ with $1 \\leqslant i<j \\leqslant k$, the starting point of car $j$ is higher than the starting point of car $i$; similarly, the finishing point of car $j$ is higher than the finishing point of car $i$. Say that two checkpoints are linked by some company if one can start from the lower checkpoint and reach the higher one by using one or more cars of that company (no movement on foot is allowed).\nDetermine the smallest $k$ for which one can guarantee that there are two checkpoints that are linked by each of the two companies.\\\\\n(India)\\\\\nAnswer: $k=n^{2}-n+1$.\\\\\nSolution. We start with showing that for any $k \\leqslant n^{2}-n$ there may be no pair of checkpoints linked by both companies. Clearly, it suffices to provide such an example for $k=n^{2}-n$.\nLet company $A$ connect the pairs of checkpoints of the form $(i, i+1)$, where $n \\nmid i$. Then all pairs of checkpoints $(i, j)$ linked by $A$ satisfy $\\lceil i / n\\rceil=\\lceil j / n\\rceil$.\nLet company $B$ connect the pairs of the form $(i, i+n)$, where $1 \\leqslant i \\leqslant n^{2}-n$. Then pairs of checkpoints $(i, j)$ linked by $B$ satisfy $i \\equiv j(\\bmod n)$. Clearly, no pair $(i, j)$ satisfies both conditions, so there is no pair linked by both companies.\nNow we show that for $k=n^{2}-n+1$ there always exist two required checkpoints. Define an $A$-chain as a sequence of checkpoints $a_{1}<a_{2}<\\ldots<a_{t}$ such that company $A$ connects $a_{i}$ with $a_{i+1}$ for all $1 \\leqslant i \\leqslant t-1$, but there is no $A$-car transferring from some checkpoint to $a_{1}$ and no $A$-car transferring from $a_{t}$ to any other checkpoint. Define $B$-chains similarly. Moving forth and back, one easily sees that any checkpoint is included in a unique $A$-chain (possibly consisting of that single checkpoint), as well as in a unique $B$-chain. Now, put each checkpoint into a correspondence to the pair of the $A$-chain and the $B$-chain it belongs to.\nAll finishing points of $A$-cars are distinct, so there are $n^{2}-k=n-1$ checkpoints that are not such finishing points. Each of them is a starting point of a unique $A$-chain, so the number of $A$-chains is $n-1$. Similarly, the number of $B$-chains also equals $n-1$. Hence, there are $(n-1)^{2}$ pairs consisting of an $A$ - and a $B$-chain. Therefore, two of the $n^{2}$ checkpoints correspond to the same pair, so that they belong to the same $A$-chain, as well as to the same $B$-chain. This means that they are linked by both companies, as required.\nComment 1. The condition that the $i^{\\text {th }}$ car starts and finishes lower than the $j^{\\text {th }}$ one is used only in the \"moving forth and back\" argument and in the counting of starting points of the chains. In both cases, the following weaker assumption suffices: No two cars of the same company start at the same checkpoint, and no two such cars finish at the same checkpoint.\nThus, the problem conditions could be weakened in this way,, with no affect on the solution.\\\\\nComment 2. If the number of checkpoints were $N$, then the answer would be $N-\\lceil\\sqrt{N}\\rceil+1$. The solution above works verbatim for this generalization."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Graph-Theoretic Reformulation"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2020-P3", "year": 2020, "problem_number": 3, "nickname": "Partition 4N Colored Pebbles", "category": "combinatorics", "subcategories": ["Graph Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.94, "stdev": 2.022, "histogram": [465, 47, 3, 14, 40, 0, 5, 42], "total_participants": 616}, "problem": {"natural_language": {"format": "latex", "text": "There are $4n$ pebbles of weights $1, 2, 3, \\ldots, 4n$. Each pebble is colored in one of $n$ colors and there are four pebbles of each color. Show that we can arrange the pebbles into two piles so that the following two conditions are both satisfied:\n\\medskip\n\\begin{itemize}\n\\item The total weights of both piles are the same.\n\\item Each pile contains two pebbles of each color.\n\\end{itemize}", "prefix": "There are $4n$ pebbles of weights $1, 2, 3, \\ldots, 4n$. Each pebble is colored in one of $n$ colors and there are four pebbles of each color.", "suffix": "Show that we can arrange the pebbles into two piles so that the following two conditions are both satisfied:\n\\medskip\n\\begin{itemize}\n\\item The total weights of both piles are the same.\n\\item Each pile contains two pebbles of each color.\n\\end{itemize}"}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen scoped Finset\n\nnamespace IMO2020P3\n\ntheorem result {n : \u2115} {c : Fin (4 * n) \u2192 Fin n} (h : \u2200 i, #{j | c j = i} = 4) :\n    \u2203 S : Finset (Fin (4 * n)), \u2211 i \u2208 S, ((i : \u2115) + 1) = \u2211 i \u2208 S\u1d9c, ((i : \u2115) + 1) \u2227\n      \u2200 i, #{j \u2208 S | c j = i} = 2 := by\n  sorry\n\nend IMO2020P3"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "$4 n$ coins of weights $1,2,3, \\ldots, 4 n$ are given. Each coin is colored in one of $n$ colors and there are four coins of each color. Show that all these coins can be partitioned into two sets with the same total weight, such that each set contains two coins of each color.\\\\\n(Hungary)\\\\\nSolution 1. Let us pair the coins with weights summing up to $4 n+1$, resulting in the set $S$ of $2 n$ pairs: $\\{1,4 n\\},\\{2,4 n-1\\}, \\ldots,\\{2 n, 2 n+1\\}$. It suffices to partition $S$ into two sets, each consisting of $n$ pairs, such that each set contains two coins of each color.\nIntroduce a multi-graph $G$ (i.e., a graph with loops and multiple edges allowed) on $n$ vertices, so that each vertex corresponds to a color. For each pair of coins from $S$, we add an edge between the vertices corresponding to the colors of those coins. Note that each vertex has degree 4. Also, a desired partition of the coins corresponds to a coloring of the edges of $G$ in two colors, say red and blue, so that each vertex has degree 2 with respect to each color (i.e., each vertex has equal red and blue degrees).\nTo complete the solution, it suffices to provide such a coloring for each component $G^{\\prime}$ of $G$. Since all degrees of the vertices are even, in $G^{\\prime}$ there exists an Euler circuit $C$ (i.e., a circuit passing through each edge of $G^{\\prime}$ exactly once). Note that the number of edges in $C$ is even (it equals twice the number of vertices in $G^{\\prime}$ ). Hence all the edges can be colored red and blue so that any two edges adjacent in $C$ have different colors (one may move along $C$ and color the edges one by one alternating red and blue colors). Thus in $G^{\\prime}$ each vertex has equal red and blue degrees, as desired.\nComment 1. To complete Solution 1, any partition of the edges of $G$ into circuits of even lengths could be used. In the solution above it was done by the reference to the well-known Euler Circuit Lemma: Let $G$ be a connected graph with all its vertices of even degrees. Then there exists a circuit passing through each edge of $G$ exactly once.\nSolution 2. As in Solution 1, we will show that it is possible to partition $2 n$ pairs $\\{1,4 n\\}$, $\\{2,4 n-1\\}, \\ldots,\\{2 n, 2 n+1\\}$ into two sets, each consisting of $n$ pairs, such that each set contains two coins of each color.\nIntroduce a multi-graph (i.e., a graph with multiple edges allowed) $\\Gamma$ whose vertices correspond to coins; thus we have $4 n$ vertices of $n$ colors so that there are four vertices of each color. Connect pairs of vertices $\\{1,4 n\\},\\{2,4 n-1\\}, \\ldots,\\{2 n, 2 n+1\\}$ by $2 n$ black edges.\nFurther, for each monochromatic quadruple of vertices $i, j, k, \\ell$ we add a pair of grey edges forming a matching, e.g., $(i, j)$ and $(k, \\ell)$. In each of $n$ colors of coins we can choose one of three possible matchings; this results in $3^{n}$ ways of constructing grey edges. Let us call each of $3^{n}$ possible graphs $\\Gamma$ a cyclic graph. Note that in a cyclic graph $\\Gamma$ each vertex has both black and grey degrees equal to 1 . Hence $\\Gamma$ is a union of disjoint cycles, and in each cycle black and grey edges alternate (in particular, all cycles have even lengths).\nIt suffices to find a cyclic graph with all its cycle lengths divisible by 4. Indeed, in this case, for each cycle we start from some vertex, move along the cycle and recolor the black edges either to red or to blue, alternating red and blue colors. Now blue and red edges define the required partition, since for each monochromatic quadruple of vertices the grey edges provide a bijection between the endpoints of red and blue edges.\nAmong all possible cyclic graphs, let us choose graph $\\Gamma_{0}$ having the minimal number of components (i.e., cycles). The following claim completes the solution.\\\\\nClaim. In $\\Gamma_{0}$, all cycle lengths are divisible by 4.\\\\\nProof. Assuming the contrary, choose a cycle $C_{1}$ with an odd number of grey edges. For some color $c$ the cycle $C_{1}$ contains exactly one grey edge joining two vertices $i, j$ of color $c$, while the other edge joining two vertices $k, \\ell$ of color $c$ lies in another cycle $C_{2}$. Now delete edges $(i, j)$ and $(k, \\ell)$ and add edges $(i, k)$ and $(j, \\ell)$. By this switch we again obtain a cyclic graph $\\Gamma_{0}^{\\prime}$ and decrease the number of cycles by 1 . This contradicts the choice of $\\Gamma_{0}$.\nComment 2. Use of an auxiliary graph and reduction to a new problem in terms of this graph is one of the crucial steps in both solutions presented. In fact, graph $G$ from Solution 1 could be obtained from any graph $\\Gamma$ from Solution 2 by merging the vertices of the same color."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Coloring Argument", "Graph-Theoretic Reformulation"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2019-P5", "year": 2019, "problem_number": 5, "nickname": "The Bank of Bath", "category": "combinatorics", "subcategories": ["Combinatorics on Words/Sequences"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.567, "stdev": 2.979, "histogram": [156, 20, 168, 12, 5, 7, 3, 250], "total_participants": 621}, "problem": {"natural_language": {"format": "latex", "text": "The Bank of Bath issues coins with an $A$ on one side and a $B$ on the other. Harry has $n$ of these coins arranged in a line from left to right. He repeatedly performs the following operation:\n\\medskip\n\\noindent\nIf there are exactly $k$ coins showing $A$, then he turns over the $k$-th coin from the left; otherwise, all coins show $B$ and he stops.\n\\medskip\n\\noindent\nFor example, if $n = 3$, the process starting with the configuration $AAB$ would be $AAB \\to ABB \\to BBB$, which stops after three operations.\n\\medskip\n\\begin{enumerate}\n\\item[(a)] Show that, for each initial configuration, Harry stops after a finite number of operations.\n\\item[(b)] For each initial configuration $C$, let $f(C)$ be the number of operations before Harry stops. For example, $f(AAB) = 3$ and $f(BBB) = 0$. Determine the average value of $f(C)$ over all $2^n$ possible initial configurations $C$.\n\\end{enumerate}", "prefix": "The Bank of Bath issues coins with an $A$ on one side and a $B$ on the other. Harry has $n$ of these coins arranged in a line from left to right. He repeatedly performs the following operation:\n\\medskip\n\\noindent\nIf there are exactly $k$ coins showing $A$, then he turns over the $k$-th coin from the left; otherwise, all coins show $B$ and he stops.\n\\medskip\n\\noindent\nFor example, if $n = 3$, the process starting with the configuration $AAB$ would be $AAB \\to ABB \\to BBB$, which stops after three operations.", "suffix": "\begin{enumerate}\n\\item[(a)] Show that, for each initial configuration, Harry stops after a finite number of operations.\n\\item[(b)] For each initial configuration $C$, let $f(C)$ be the number of operations before Harry stops. For example, $f(AAB) = 3$ and $f(BBB) = 0$. Determine the average value of $f(C)$ over all $2^n$ possible initial configurations $C$.\n\\end{enumerate}"}, "code": [{"language": "lean4", "text": "import Mathlib\n\nabbrev Coin := Fin 2\n\nabbrev Coin.H : Coin := 0\n\nabbrev Coin.T : Coin := 1\n\nabbrev CoinConfig (n : \u2115) := Fin n \u2192 Coin\n\ndef CoinConfig.countH {n : \u2115} (c : CoinConfig n) : \u2115 := (List.ofFn c).count .H\n\ndef CoinConfig.flip {n : \u2115} (c : CoinConfig n) (k : \u2115) : CoinConfig n :=\n  fun i => if i.val + 1 = k then\n    match c i with\n    | .H => .T\n    | .T => .H\n  else c i\n\ndef CoinConfig.update {n : \u2115} (c : CoinConfig n) : Option (CoinConfig n) :=\n  if c.countH = 0 then none else .some <| c.flip c.countH\n\ndef CoinConfig.updateMultipleTimes {n : \u2115} (c : CoinConfig n) : \u2115 \u2192 Option (CoinConfig n)\n  | 0 => if c.countH = 0 then none else .some c\n  | k+1 => c.updateMultipleTimes k >>= update\n\nabbrev imo_2019_p5_2_solution : \u2115 \u2192 \u211a := sorry\n\n\ntheorem imo_2019_p5_1 {n : \u2115} (hn : n > 0) : \u2200 (c : CoinConfig n), \u2203 N : \u2115, c.updateMultipleTimes N = .none := by sorry\n\ntheorem imo_2019_p5_2 {n : \u2115} (hn : n > 0) : imo_2019_p5_2_solution n =\n    \u2211 c : CoinConfig n, (Nat.find (imo_2019_p5_1 hn c) : \u211a) / (Fintype.card (CoinConfig n)) := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $n$ be a positive integer. Harry has $n$ coins lined up on his desk, each showing heads or tails. He repeatedly does the following operation: if there are $k$ coins showing heads and $k>0$, then he flips the $k^{\\text {th }}$ coin over; otherwise he stops the process. (For example, the process starting with $T H T$ would be $T H T \\rightarrow H H T \\rightarrow H T T \\rightarrow T T T$, which takes three steps.)\nLetting $C$ denote the initial configuration (a sequence of $n H$ 's and $T$ 's), write $\\ell(C)$ for the number of steps needed before all coins show $T$. Show that this number $\\ell(C)$ is finite, and determine its average value over all $2^{n}$ possible initial configurations $C$.\nAnswer: The average is $\\frac{1}{4} n(n+1)$.\\\\\nCommon remarks. Throughout all these solutions, we let $E(n)$ denote the desired average value.\nSolution 1. We represent the problem using a directed graph $G_{n}$ whose vertices are the length $n$ strings of $H$ 's and $T$ 's. The graph features an edge from each string to its successor (except for $T T \\cdots T T$, which has no successor). We will also write $\\bar{H}=T$ and $\\bar{T}=H$.\nThe graph $G_{0}$ consists of a single vertex: the empty string. The main claim is that $G_{n}$ can be described explicitly in terms of $G_{n-1}$ :\n\\begin{itemize}\n\\item We take two copies, $X$ and $Y$, of $G_{n-1}$.\n\\item In $X$, we take each string of $n-1$ coins and just append a $T$ to it. In symbols, we replace $s_{1} \\cdots s_{n-1}$ with $s_{1} \\cdots s_{n-1} T$.\n\\item In $Y$, we take each string of $n-1$ coins, flip every coin, reverse the order, and append an $H$ to it. In symbols, we replace $s_{1} \\cdots s_{n-1}$ with $\\bar{s}_{n-1} \\bar{s}_{n-2} \\cdots \\bar{s}_{1} H$.\n\\item Finally, we add one new edge from $Y$ to $X$, namely $H H \\cdots H H H \\rightarrow H H \\cdots H H T$.\n\\end{itemize}\nWe depict $G_{4}$ below, in a way which indicates this recursive construction:\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.5\\textwidth]{2024_08_22_9e58862c38624455a821g-034}}\n\\end{center}\nWe prove the claim inductively. Firstly, $X$ is correct as a subgraph of $G_{n}$, as the operation on coins is unchanged by an extra $T$ at the end: if $s_{1} \\cdots s_{n-1}$ is sent to $t_{1} \\cdots t_{n-1}$, then $s_{1} \\cdots s_{n-1} T$ is sent to $t_{1} \\cdots t_{n-1} T$.\nNext, $Y$ is also correct as a subgraph of $G_{n}$, as if $s_{1} \\cdots s_{n-1}$ has $k$ occurrences of $H$, then $\\bar{s}_{n-1} \\cdots \\bar{s}_{1} H$ has $(n-1-k)+1=n-k$ occurrences of $H$, and thus (provided that $k>0$ ), if $s_{1} \\cdots s_{n-1}$ is sent to $t_{1} \\cdots t_{n-1}$, then $\\bar{s}_{n-1} \\cdots \\bar{s}_{1} H$ is sent to $\\bar{t}_{n-1} \\cdots \\bar{t}_{1} H$.\nFinally, the one edge from $Y$ to $X$ is correct, as the operation does send $H H \\cdots H H H$ to $H H \\cdots H H T$.\nTo finish, note that the sequences in $X$ take an average of $E(n-1)$ steps to terminate, whereas the sequences in $Y$ take an average of $E(n-1)$ steps to reach $H H \\cdots H$ and then an additional $n$ steps to terminate. Therefore, we have\n$$\nE(n)=\\frac{1}{2}(E(n-1)+(E(n-1)+n))=E(n-1)+\\frac{n}{2}\n$$\nWe have $E(0)=0$ from our description of $G_{0}$. Thus, by induction, we have $E(n)=\\frac{1}{2}(1+\\cdots+$ $n)=\\frac{1}{4} n(n+1)$, which in particular is finite.\nSolution 2. We consider what happens with configurations depending on the coins they start and end with.\n\\begin{itemize}\n\\item If a configuration starts with $H$, the last $n-1$ coins follow the given rules, as if they were all the coins, until they are all $T$, then the first coin is turned over.\n\\item If a configuration ends with $T$, the last coin will never be turned over, and the first $n-1$ coins follow the given rules, as if they were all the coins.\n\\item If a configuration starts with $T$ and ends with $H$, the middle $n-2$ coins follow the given rules, as if they were all the coins, until they are all $T$. After that, there are $2 n-1$ more steps: first coins $1,2, \\ldots, n-1$ are turned over in that order, then coins $n, n-1, \\ldots, 1$ are turned over in that order.\n\\end{itemize}\nAs this covers all configurations, and the number of steps is clearly finite for 0 or 1 coins, it follows by induction on $n$ that the number of steps is always finite.\nWe define $E_{A B}(n)$, where $A$ and $B$ are each one of $H, T$ or *, to be the average number of steps over configurations of length $n$ restricted to those that start with $A$, if $A$ is not *, and that end with $B$, if $B$ is not * (so * represents \"either $H$ or $T$ \"). The above observations tell us that, for $n \\geqslant 2$ :\n\\begin{itemize}\n\\item $E_{H *}(n)=E(n-1)+1$.\n\\item $E_{* T}(n)=E(n-1)$.\n\\item $E_{H T}(n)=E(n-2)+1$ (by using both the observations for $H *$ and for $* T$ ).\n\\item $E_{T H}(n)=E(n-2)+2 n-1$.\n\\end{itemize}\nNow $E_{H *}(n)=\\frac{1}{2}\\left(E_{H H}(n)+E_{H T}(n)\\right)$, so $E_{H H}(n)=2 E(n-1)-E(n-2)+1$. Similarly, $E_{T T}(n)=2 E(n-1)-E(n-2)-1$. So\n$$\nE(n)=\\frac{1}{4}\\left(E_{H T}(n)+E_{H H}(n)+E_{T T}(n)+E_{T H}(n)\\right)=E(n-1)+\\frac{n}{2}\n$$\nWe have $E(0)=0$ and $E(1)=\\frac{1}{2}$, so by induction on $n$ we have $E(n)=\\frac{1}{4} n(n+1)$.\\\\\nSolution 3. Let $H_{i}$ be the number of heads in positions 1 to $i$ inclusive (so $H_{n}$ is the total number of heads), and let $I_{i}$ be 1 if the $i^{\\text {th }}$ coin is a head, 0 otherwise. Consider the function\n$$\nt(i)=I_{i}+2\\left(\\min \\left\\{i, H_{n}\\right\\}-H_{i}\\right)\n$$\nWe claim that $t(i)$ is the total number of times coin $i$ is turned over (which implies that the process terminates). Certainly $t(i)=0$ when all coins are tails, and $t(i)$ is always a nonnegative integer, so it suffices to show that when the $k^{\\text {th }}$ coin is turned over (where $k=H_{n}$ ), $t(k)$ goes down by 1 and all the other $t(i)$ are unchanged. We show this by splitting into cases:\n\\begin{itemize}\n\\item If $i<k, I_{i}$ and $H_{i}$ are unchanged, and $\\min \\left\\{i, H_{n}\\right\\}=i$ both before and after the coin flip, so $t(i)$ is unchanged.\n\\item If $i>k, \\min \\left\\{i, H_{n}\\right\\}=H_{n}$ both before and after the coin flip, and both $H_{n}$ and $H_{i}$ change by the same amount, so $t(i)$ is unchanged.\n\\item If $i=k$ and the coin is heads, $I_{i}$ goes down by 1 , as do both $\\min \\left\\{i, H_{n}\\right\\}=H_{n}$ and $H_{i}$; so $t(i)$ goes down by 1 .\n\\item If $i=k$ and the coin is tails, $I_{i}$ goes up by $1, \\min \\left\\{i, H_{n}\\right\\}=i$ is unchanged and $H_{i}$ goes up by 1 ; so $t(i)$ goes down by 1 .\n\\end{itemize}\nWe now need to compute the average value of\n$$\n\\sum_{i=1}^{n} t(i)=\\sum_{i=1}^{n} I_{i}+2 \\sum_{i=1}^{n} \\min \\left\\{i, H_{n}\\right\\}-2 \\sum_{i=1}^{n} H_{i}\n$$\nThe average value of the first term is $\\frac{1}{2} n$, and that of the third term is $-\\frac{1}{2} n(n+1)$. To compute the second term, we sum over choices for the total number of heads, and then over the possible values of $i$, getting\n$$\n2^{1-n} \\sum_{j=0}^{n}\\binom{n}{j} \\sum_{i=1}^{n} \\min \\{i, j\\}=2^{1-n} \\sum_{j=0}^{n}\\binom{n}{j}\\left(n j-\\binom{j}{2}\\right)\n$$\nNow, in terms of trinomial coefficients,\n$$\n\\sum_{j=0}^{n} j\\binom{n}{j}=\\sum_{j=1}^{n}\\binom{n}{n-j, j-1,1}=n \\sum_{j=0}^{n-1}\\binom{n-1}{j}=2^{n-1} n\n$$\nand\n$$\n\\sum_{j=0}^{n}\\binom{j}{2}\\binom{n}{j}=\\sum_{j=2}^{n}\\binom{n}{n-j, j-2,2}=\\binom{n}{2} \\sum_{j=0}^{n-2}\\binom{n-2}{j}=2^{n-2}\\binom{n}{2}\n$$\nSo the second term above is\n$$\n2^{1-n}\\left(2^{n-1} n^{2}-2^{n-2}\\binom{n}{2}\\right)=n^{2}-\\frac{n(n-1)}{4}\n$$\nand the required average is\n$$\nE(n)=\\frac{1}{2} n+n^{2}-\\frac{n(n-1)}{4}-\\frac{1}{2} n(n+1)=\\frac{n(n+1)}{4}\n$$\nSolution 4. Harry has built a Turing machine to flip the coins for him. The machine is initially positioned at the $k^{\\text {th }}$ coin, where there are $k$ heads (and the position before the first coin is considered to be the $0^{\\text {th }}$ coin). The machine then moves according to the following rules, stopping when it reaches the position before the first coin: if the coin at its current position is $H$, it flips the coin and moves to the previous coin, while if the coin at its current position is $T$, it flips the coin and moves to the next position.\nConsider the maximal sequences of consecutive moves in the same direction. Suppose the machine has $a$ consecutive moves to the next coin, before a move to the previous coin. After those $a$ moves, the $a$ coins flipped in those moves are all heads, as is the coin the machine is now at, so at least the next $a+1$ moves will all be moves to the previous coin. Similarly, $a$ consecutive moves to the previous coin are followed by at least $a+1$ consecutive moves to\\\\\nthe next coin. There cannot be more than $n$ consecutive moves in the same direction, so this proves that the process terminates (with a move from the first coin to the position before the first coin).\nThus we have a (possibly empty) sequence $a_{1}<\\cdots<a_{t} \\leqslant n$ giving the lengths of maximal sequences of consecutive moves in the same direction, where the final $a_{t}$ moves must be moves to the previous coin, ending before the first coin. We claim there is a bijection between initial configurations of the coins and such sequences. This gives\n$$\nE(n)=\\frac{1}{2}(1+2+\\cdots+n)=\\frac{n(n+1)}{4}\n$$\nas required, since each $i$ with $1 \\leqslant i \\leqslant n$ will appear in half of the sequences, and will contribute $i$ to the number of moves when it does.\nTo see the bijection, consider following the sequence of moves backwards, starting with the machine just before the first coin and all coins showing tails. This certainly determines a unique configuration of coins that could possibly correspond to the given sequence. Furthermore, every coin flipped as part of the $a_{j}$ consecutive moves is also flipped as part of all subsequent sequences of $a_{k}$ consecutive moves, for all $k>j$, meaning that, as we follow the moves backwards, each coin is always in the correct state when flipped to result in a move in the required direction. (Alternatively, since there are $2^{n}$ possible configurations of coins and $2^{n}$ possible such ascending sequences, the fact that the sequence of moves determines at most one configuration of coins, and thus that there is an injection from configurations of coins to such ascending sequences, is sufficient for it to be a bijection, without needing to show that coins are in the right state as we move backwards.)\nSolution 5. We explicitly describe what happens with an arbitrary sequence $C$ of $n$ coins. Suppose that $C$ contain $k$ heads at positions $1 \\leqslant c_{1}<c_{2}<\\cdots<c_{k} \\leqslant n$.\nLet $i$ be the minimal index such that $c_{i} \\geqslant k$. Then the first few steps will consist of turning over the $k^{\\mathrm{th}},(k+1)^{\\mathrm{th}}, \\ldots, c_{i}^{\\mathrm{th}},\\left(c_{i}-1\\right)^{\\mathrm{th}},\\left(c_{i}-2\\right)^{\\mathrm{th}}, \\ldots, k^{\\mathrm{th}}$ coins in this order. After that we get a configuration with $k-1$ heads at the same positions as in the initial one, except for $c_{i}$. This part of the process takes $2\\left(c_{i}-k\\right)+1$ steps.\nAfter that, the process acts similarly; by induction on the number of heads we deduce that the process ends. Moreover, if the $c_{i}$ disappear in order $c_{i_{1}}, \\ldots, c_{i_{k}}$, the whole process takes\n$$\n\\ell(C)=\\sum_{j=1}^{k}\\left(2\\left(c_{i_{j}}-(k+1-j)\\right)+1\\right)=2 \\sum_{j=1}^{k} c_{j}-2 \\sum_{j=1}^{k}(k+1-j)+k=2 \\sum_{j=1}^{k} c_{j}-k^{2}\n$$\nsteps.\\\\\nNow let us find the total value $S_{k}$ of $\\ell(C)$ over all $\\binom{n}{k}$ configurations with exactly $k$ heads. To sum up the above expression over those, notice that each number $1 \\leqslant i \\leqslant n$ appears as $c_{j}$ exactly $\\binom{n-1}{k-1}$ times. Thus\n$$\n\\begin{gathered}\nS_{k}=2\\binom{n-1}{k-1} \\sum_{i=1}^{n} i-\\binom{n}{k} k^{2}=2 \\frac{(n-1) \\cdots(n-k+1)}{(k-1)!} \\cdot \\frac{n(n+1)}{2}-\\frac{n \\cdots(n-k+1)}{k!} k^{2} \\\\\n=\\frac{n(n-1) \\cdots(n-k+1)}{(k-1)!}((n+1)-k)=n(n-1)\\binom{n-2}{k-1}+n\\binom{n-1}{k-1}\n\\end{gathered}\n$$\nTherefore, the total value of $\\ell(C)$ over all configurations is\n$$\n\\sum_{k=1}^{n} S_{k}=n(n-1) \\sum_{k=1}^{n}\\binom{n-2}{k-1}+n \\sum_{k=1}^{n}\\binom{n-1}{k-1}=n(n-1) 2^{n-2}+n 2^{n-1}=2^{n} \\frac{n(n+1)}{4}\n$$\nHence the required average is $E(n)=\\frac{n(n+1)}{4}$."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Invariant"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2019-P3", "year": 2019, "problem_number": 3, "nickname": "Social-Network Friend Switch Process", "category": "combinatorics", "subcategories": ["Graph Theory", "Extremal Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.572, "stdev": 1.669, "histogram": [520, 46, 3, 6, 5, 9, 4, 28], "total_participants": 621}, "problem": {"natural_language": {"format": "latex", "text": "A social network has $2019$ users, some pairs of whom are friends. Whenever user $A$ is friends with user $B$, user $B$ is also friends with user $A$. Events of the following kind may happen repeatedly, one at a time:\nThree users $A$, $B$, and $C$ such that $A$ is friends with both $B$ and $C$, but $B$ and $C$ are not friends, change their friendship statuses such that $B$ and $C$ are now friends, but $A$ is no longer friends with $B$, and no longer friends with $C$. All other friendship statuses are unchanged.\nInitially, $1010$ users have $1009$ friends each, and $1009$ users have $1010$ friends each. Prove that there exists a sequence of such events after which each user is friends with at most one other user.", "prefix": "A social network has $2019$ users, some pairs of whom are friends. Whenever user $A$ is friends with user $B$, user $B$ is also friends with user $A$. Events of the following kind may happen repeatedly, one at a time:\nThree users $A$, $B$, and $C$ such that $A$ is friends with both $B$ and $C$, but $B$ and $C$ are not friends, change their friendship statuses such that $B$ and $C$ are now friends, but $A$ is no longer friends with $B$, and no longer friends with $C$. All other friendship statuses are unchanged.\nInitially, $1010$ users have $1009$ friends each, and $1009$ users have $1010$ friends each.", "suffix": "Prove that there exists a sequence of such events after which each user is friends with at most one other user."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nnoncomputable instance (users : SimpleGraph (Fin 2019)) (a : Fin 2019) : Fintype (users.neighborSet a) :=\n  Fintype.ofFinite \u2191(users.neighborSet a)\n\ndef IsTriple (l : List (Fin 2019)) (G : SimpleGraph (Fin 2019)) : Prop :=\n  l.length = 3 \u2227 G.Adj l[0]! l[1]! \u2227 G.Adj l[0]! l[2]! \u2227 \u00ac G.Adj l[1]! l[2]! \u2227 l[1]! \u2260 l[2]!\n\n@[simp]\nlemma triple.hab' (l : List (Fin 2019)) (users : SimpleGraph (Fin 2019)) (h : IsTriple l users) :\n  l[1]! = l[2]! \u2194 False := by\n  constructor\n  \u00b7 exact (h.2.2.2.2 \u00b7)\n  \u00b7 tauto\n\nattribute [local aesop safe] SimpleGraph.Adj.symm IsTriple\n\n-- For any such triple of users a, b, c, b and c becomes friends now, \n-- but a is no longer friends with b, and no longer friends with c.\ndef update (l : List (Fin 2019)) (users : SimpleGraph (Fin 2019)) (h : IsTriple l users) :\n  SimpleGraph (Fin 2019) where\n    Adj x y :=\n      if x = l[0]! then\n        if y = l[1]! then False\n        else if y = l[2]! then False\n        else users.Adj l[0]! y\n      else if x = l[1]! then\n        if y = l[0]! then False\n        else if y = l[2]! then True\n        else users.Adj l[1]! y\n      else if x = l[2]! then\n        if y = l[0]! then False\n        else if y = l[1]! then True\n        else users.Adj l[2]! y\n      else users.Adj x y\n    symm := by\n      simp only [if_false_left, if_true_left]\n      intro x y\n      simp only\n      split_ifs <;> aesop\n    loopless := by\n      intro x\n      simp only [if_false_left, if_true_left, SimpleGraph.irrefl, if_false_right]\n      split_ifs with h1 h2\n      \u00b7 aesop\n      \u00b7 subst h2\n        simp_all only [not_false_eq_true, SimpleGraph.irrefl, imp_false, Decidable.not_not, true_and]\n        apply Aesop.BuiltinRules.not_intro\n        intro a_1\n        apply h.2.2.2.2; simp [a_1]\n      \u00b7 aesop\n\nstructure ExpectSeq where\n  l : List (SimpleGraph (Fin 2019) \u00d7 List (Fin 2019))\n  h_length : l.length > 0\n  h_card : \u2200 li \u2208 l, li.2.length = 3\n  h_triple : \u2200 li \u2208 l, IsTriple li.2 li.1\n  h_update : \u2200 i : Fin l.length, (finRotate _ i).1 \u2260 0 \u2192\n    update l[i].2 l[i].1 (h_triple l[i] (by simp)) = l[finRotate _ i].1\n\ndef final_state (seq : ExpectSeq) : SimpleGraph (Fin 2019) :=\n  update seq.l[((finRotate seq.l.length).symm \u27e80, by simp [seq.h_length]\u27e9 )]!.2\n    seq.l[((finRotate seq.l.length).symm \u27e80, by simp [seq.h_length]\u27e9)]!.1\n    (seq.h_triple seq.l[((finRotate seq.l.length).symm \u27e80, by simp [seq.h_length]\u27e9)]! (by simp))\n\n\ntheorem imo_2019_p3 (users : SimpleGraph (Fin 2019))\n    (cond : \u2203 (A B : Finset (Fin 2019)), A.card = 1010 \u2227 B.card = 1009 \u2227\n    (\u2200 a \u2208 A, (users.neighborFinset a).card = 1009) \u2227\n    (\u2200 b \u2208 B, (users.neighborFinset b).card = 1010)) :\n    \u2203 seq : ExpectSeq, \u2200 i, ((final_state seq).neighborFinset i).card \u2264 1 := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Initially, 1009 users have 1010 friends and 1010 users have 1009 friends. Prove that the administrator can make a sequence of operations such that all users have at most 1 friend.\nWe take the obvious graph formulation and call the move a toggle.\\\\\nClaim - Let $G$ be a connected graph. Then one can toggle $G$ without disconnecting the graph, unless $G$ is a clique, a cycle, or a tree.\nProof. Assume $G$ is connected and not a tree, so it has a cycle. Take the smallest cycle $C$; by hypothesis $C \\neq G$.\nIf $C$ is not a triangle (equivalently, $G$ is triangle-free), then let $b \\notin C$ be a vertex adjacent to $C$, say at $a$. Take a vertex $c$ of the cycle adjacent to $a$ (hence not to $b$ ). Then we can toggle $a b c$.\nNow assume there exists a triangle; let $K$ be the maximal clique. By hypothesis, $K \\neq G$. We take an edge $e=a b$ dangling off the clique, with $a \\in K$ and $b \\notin K$. Note some vertex $c$ of $K$ is not adjacent to $b$; now toggle $a b c$.\nBack to the original problem; let $G_{\\text {imo }}$ be the given graph. The point is that we can apply toggles (by the claim) repeatedly, without disconnecting the graph, until we get a tree. This is because\n\\begin{itemize}\n\\item $G_{\\text {imo }}$ is connected, since any two vertices which are not adjacent have a common neighbor by pigeonhole $(1009+1009+2>2019)$.\n\\item $G_{\\text {imo }}$ cannot become a cycle, because it initially has an odd-degree vertex, and toggles preserve parity of degree!\n\\item $G_{\\text {imo }}$ is obviously not a clique initially (and hence not afterwards).\n\\end{itemize}\nSo, we can eventually get $G_{\\text {imo }}$ to be a tree.\\\\\nOnce $G_{\\text {imo }}$ is a tree the problem follows by repeatedly applying toggles arbitrarily until no more are possible; the graph (although now disconnected) remains acyclic (in particular having no triangles) and therefore can only terminate in the desired situation.\nRemark. The above proof in fact shows the following better result:\\\\\nThe task is possible if and only if $G_{\\text {imo }}$ is a connected graph which is not a clique and has any vertex of odd degree.\nThe \"only if\" follows from the observation that toggles preserve parity of degree.\nThus the given condition about the degrees of vertices being 1009 and 1010 is largely a red herring; it's a somewhat strange way of masking the correct and more natural both-sufficient-and-necessary condition."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Extremal Principle", "Pigeonhole Principle", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2018-P4", "year": 2018, "problem_number": 4, "nickname": "Amy Places Red Stones on 20\u00d720 Grid", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Combinatorial Game Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.961, "stdev": 3.015, "histogram": [148, 13, 106, 18, 18, 15, 5, 271], "total_participants": 594}, "problem": {"natural_language": {"format": "latex", "text": "A site is any point $(x,y)$ in the plane such that $x$ and $y$ are both positive integers less than or equal to $20$. Initially, each of the $400$ sites is unoccupied. Amy and Ben take turns placing stones with Amy going first. On her turn, Amy places a new red stone on an unoccupied site such that the distance between any two sites occupied by red stones is not equal to $\\sqrt{5}$. On his turn, Ben places a new blue stone on any unoccupied site. (A site occupied by a blue stone is allowed to be at any distance from any other occupied site.) They stop as soon as a player cannot place a stone.\n\\medskip\n\\noindent\nFind the greatest $k$ such that Amy can ensure that she places at least $k$ red stones, no matter how Ben places his blue stones.", "prefix": "A site is any point $(x,y)$ in the plane such that $x$ and $y$ are both positive integers less than or equal to $20$. Initially, each of the $400$ sites is unoccupied. Amy and Ben take turns placing stones with Amy going first. On her turn, Amy places a new red stone on an unoccupied site such that the distance between any two sites occupied by red stones is not equal to $\\sqrt{5}$. On his turn, Ben places a new blue stone on any unoccupied site. (A site occupied by a blue stone is allowed to be at any distance from any other occupied site.) They stop as soon as a player cannot place a stone.", "suffix": "Find the greatest $k$ such that Amy can ensure that she places at least $k$ red stones, no matter how Ben places his blue stones."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nabbrev Site := Fin 20 \u00d7 Fin 20\n\n-- when we see them as real points, their coordinates become within 1,...,20\ndef Site.asPoint (s : Site) : EuclideanSpace \u211d (Fin 2) :=\n  fun x => if x = 0 then (s.1.val + 1) else (s.2.val + 1)\n\ninductive State\n  | red\n  | blue\n  | unoccupied\n\nabbrev Game := Site \u2192 State\n\n-- initially the all sites are unoccupied\ndef initialGame : Game := fun _ => State.unoccupied\n\ndef valid_Amy_move (x : Site) (g : Game) : Prop :=\n  g x = State.unoccupied \u2227\n  \u2200 y, g y = State.red \u2192 dist x.asPoint y.asPoint \u2260 \u221a5\n\ndef valid_Ben_move (x : Site) (g : Game) : Prop :=\n  g x = State.unoccupied\n\n-- Either Amy can still move, or the game is finished\ndef AmyStrategy := \u03a0 (g : Game), Option ((x : Site) \u00d7' valid_Amy_move x g)\n\n-- if Amy can still make a move, then update the game according to her strategy\ndef Game.updateAccordingToAmyStrategy (g : Game) (s : AmyStrategy) : Option Game :=\n  (s g) >>= fun p => .some <| Function.update g p.1 .red\n\n-- Either Ben can still move, or the game is finished\ndef BenStrategy := \u03a0 (g : Game), Option ((x : Site) \u00d7' valid_Ben_move x g)\n\n-- if Ben can still make a move, then update the game according to his strategy\ndef Game.updateAccordingToBenStrategy (g : Game) (s : BenStrategy) : Option Game :=\n  (s g) >>= fun p => .some <| Function.update g p.1 .blue\n\n-- Amy goes first\ndef updateOneTurn (a : AmyStrategy) (b : BenStrategy) (g : Game) : Option Game :=\n  g.updateAccordingToAmyStrategy a >>= fun g' => g'.updateAccordingToBenStrategy b\n\n-- counting from `0`, at the `0`-th turn, the board if empty\n-- at the first turn, amy and ben has both placed one stone\n-- at the nth turn, amy and ben has both placed n stones\ndef updateGame (a : AmyStrategy) (b : BenStrategy) (g : Game) : \u2115 \u2192 Option Game\n  | 0 => .some g\n  | (n + 1) => updateOneTurn a b g >>= (updateGame a b \u00b7 n)\n\ndef CanPlaceKRedStones (a : AmyStrategy) (b : BenStrategy) : \u2115 \u2192 Prop\n  | 0 => True -- amy can always place at least 0 stones\n  | n+1 => -- amy can places (n+1) stones when:\n    \u2203 (h : updateGame a b initialGame n |>.isSome), -- the game is not over at n-th turn\n      a ((updateGame a b initialGame n).get h) |>.isSome -- amy can still make a move at (n+1)-th turn\n\nabbrev imo_2018_p4_solution : \u2115 := sorry\n\ntheorem imo_2018_p4 :\n    -- there exists a strategy for Amy, such that no matter how Ben play, Amy can place at least `k` stone.\n    (\u2203 a : AmyStrategy, \u2200 b : BenStrategy, CanPlaceKRedStones a b imo_2018_p4_solution) \u2227\n    -- but no matter how Amy play, there is a strategy for Ben, such that Amy can not place `k+1` stones.\n    (\u2200 a : AmyStrategy, \u2203 b : BenStrategy, \u00ac CanPlaceKRedStones a b (imo_2018_p4_solution + 1)) := by\n    sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Queenie and Horst play a game on a $20 \\times 20$ chessboard. In the beginning the board is empty. In every turn, Horst places a black knight on an empty square in such a way that his new knight does not attack any previous knights. Then Queenie places a white queen on an empty square. The game gets finished when somebody cannot move.\nFind the maximal positive $K$ such that, regardless of the strategy of Queenie, Horst can put at least $K$ knights on the board.\\\\\nAnswer: $K=20^{2} / 4=100$. In case of a $4 N \\times 4 M$ board, the answer is $K=4 N M$.\\\\\nSolution. We show two strategies, one for Horst to place at least 100 knights, and another strategy for Queenie that prevents Horst from putting more than 100 knights on the board.\nA strategy for Horst: Put knights only on black squares, until all black squares get occupied.\nColour the squares of the board black and white in the usual way, such that the white and black squares alternate, and let Horst put his knights on black squares as long as it is possible. Two knights on squares of the same colour never attack each other. The number of black squares is $20^{2} / 2=200$. The two players occupy the squares in turn, so Horst will surely find empty black squares in his first 100 steps.\nA strategy for Queenie: Group the squares into cycles of length 4, and after each step of Horst, occupy the opposite square in the same cycle.\nConsider the squares of the board as vertices of a graph; let two squares be connected if two knights on those squares would attack each other. Notice that in a $4 \\times 4$ board the squares can be grouped into 4 cycles of length 4, as shown in Figure 1. Divide the board into parts of size $4 \\times 4$, and perform the same grouping in every part; this way we arrange the 400 squares of the board into 100 cycles (Figure 2).\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.7\\textwidth]\n{imo2018p4}}\\end{center}\nThe strategy of Queenie can be as follows: Whenever Horst puts a new knight to a certain square $A$, which is part of some cycle $A-B-C-D-A$, let Queenie put her queen on the opposite square $C$ in that cycle (Figure 3). From this point, Horst cannot put any knight on $A$ or $C$ because those squares are already occupied, neither on $B$ or $D$ because those squares are attacked by the knight standing on $A$. Hence, Horst can put at most one knight on each cycle, that is at most 100 knights in total.\nComment 1. Queenie's strategy can be prescribed by a simple rule: divide the board into $4 \\times 4$ parts; whenever Horst puts a knight in a part $P$, Queenie reflects that square about the centre of $P$ and puts her queen on the reflected square.\nComment 2. The result remains the same if Queenie moves first. In the first turn, she may put her first queen arbitrarily. Later, if she has to put her next queen on a square that already contains a queen, she may move arbitrarily again."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Strategy Construction", "Invariant"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2018-P3", "year": 2018, "problem_number": 3, "nickname": "Anti-Pascal Triangle", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.278, "stdev": 1.125, "histogram": [548, 7, 9, 14, 4, 1, 0, 11], "total_participants": 594}, "problem": {"natural_language": {"format": "latex", "text": "An anti-Pascal triangle is an equilateral triangular array of numbers such that, except for the numbers in the bottom row, each number is the absolute value of the difference of the two numbers immediately below it. For example, the following is an anti-Pascal triangle with four rows which contains every integer from $1$ to $10$:\n\\begin{gather*}\n4 \\\\\n2 \\quad 6 \\\\\n5 \\quad 7 \\quad 1 \\\\\n8 \\quad 3 \\quad 10 \\quad 9\n\\end{gather*}\nDoes there exist an anti-Pascal triangle with $2018$ rows which contains every integer from $1$ to $1 + 2 + 3 + \\dots + 2018$?", "prefix": "An anti-Pascal triangle is an equilateral triangular array of numbers such that, except for the numbers in the bottom row, each number is the absolute value of the difference of the two numbers immediately below it. For example, the following is an anti-Pascal triangle with four rows which contains every integer from $1$ to $10$:\n\\begin{gather*}\n4 \\\\\n2 \\quad 6 \\\\\n5 \\quad 7 \\quad 1 \\\\\n8 \\quad 3 \\quad 10 \\quad 9\n\\end{gather*}", "suffix": "Does there exist an anti-Pascal triangle with $2018$ rows which contains every integer from $1$ to $1 + 2 + 3 + \\dots + 2018$?"}, "code": [{"language": "lean4", "text": "import Mathlib.Tactic\n\nnamespace Imo2018P3\n\nstructure Coords where\n(row : \u2115) (col : \u2115)\n\ndef left_child (c : Coords) : Coords :=\n \u27e8c.row.succ, c.col\u27e9\n\ndef right_child (c : Coords) : Coords :=\n  \u27e8c.row.succ, c.col.succ\u27e9\n\n/--\nantipascal triangle with n rows\n-/\nstructure antipascal_triangle (n : \u2115) where\n(f : Coords \u2192 \u2115)\n(antipascal : \u2200 x : Coords, x.row + 1 < n \u2227 x.col \u2264 x.row \u2192\n  f x + f (left_child x) = f (right_child x) \u2228\n  f x + f (right_child x) = f (left_child x))\n\ndef exists_desired_triangle : Prop :=\n   \u2203 t : antipascal_triangle 2018,\n     \u2200 n, 1 \u2264 n \u2192 n \u2264 \u2211 i \u2208 Finset.range 2018, (i + 1) \u2192\n         \u2203 r, r \u2264 2018 \u2227 \u2203 c, c < r \u2227 t.f \u27e8r,c\u27e9 = n\n\n/- determine -/ abbrev does_exist : Bool := sorry\n\ntheorem imo2018_p3 :\n    if does_exist then exists_desired_triangle else \u00ac exists_desired_triangle := sorry\n\n\nend Imo2018P3"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $T$ be an anti-Pascal pyramid with $n$ rows, containing every integer from 1 to $1+2+\\cdots+n$, and let $a_{1}$ be the topmost number in $T$ (Figure 1). The two numbers below $a_{1}$ are some $a_{2}$ and $b_{2}=a_{1}+a_{2}$, the two numbers below $b_{2}$ are some $a_{3}$ and $b_{3}=a_{1}+a_{2}+a_{3}$, and so on and so forth all the way down to the bottom row, where some $a_{n}$ and $b_{n}=a_{1}+a_{2}+\\cdots+a_{n}$ are the two neighbours below $b_{n-1}=a_{1}+a_{2}+\\cdots+a_{n-1}$. Since the $a_{k}$ are $n$ pairwise distinct positive integers whose sum does not exceed the largest number in $T$, which is $1+2+\\cdots+n$, it follows that they form a permutation of $1,2, \\ldots, n$.\n%\n% \\begin{center}\n% \\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]\n% {2024_08_22_a6e79578441dd0db0699g-29}}\\end{center}\n%\n% \\begin{center}\n% \\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]\n% {2024_08_22_a6e79578441dd0db0699g-29(1)}}\\end{center}\n\\begin{center}\n\\begin{minipage}{0.35\\textwidth}\n\\centering\n\\fcolorbox{black}{white}{\\includegraphics[width=0.6\\textwidth]{2024_08_22_a6e79578441dd0db0699g-29}}\nFigure 1\n\\end{minipage}%\n\\hspace{0.5em}%\n\\begin{minipage}{0.35\\textwidth}\n\\centering\n\\fcolorbox{black}{white}{\\includegraphics[width=0.6\\textwidth]{2024_08_22_a6e79578441dd0db0699g-29(1)}}\nFigure 2\n\\end{minipage}\n\\end{center}\nConsider now (Figure 2) the two 'equilateral' subtriangles of $T$ whose bottom rows contain the numbers to the left, respectively right, of the pair $a_{n}, b_{n}$. (One of these subtriangles may very well be empty.) At least one of these subtriangles, say $T^{\\prime}$, has side length $\\ell \\geqslant\\lceil(n-2) / 2\\rceil$. Since $T^{\\prime}$ obeys the anti-Pascal rule, it contains $\\ell$ pairwise distinct positive integers $a_{1}^{\\prime}, a_{2}^{\\prime}, \\ldots, a_{\\ell}^{\\prime}$, where $a_{1}^{\\prime}$ is at the apex, and $a_{k}^{\\prime}$ and $b_{k}^{\\prime}=a_{1}^{\\prime}+a_{2}^{\\prime}+\\cdots+a_{k}^{\\prime}$ are the two neighbours below $b_{k-1}^{\\prime}$ for each $k=2,3 \\ldots, \\ell$. Since the $a_{k}$ all lie outside $T^{\\prime}$, and they form a permutation of $1,2, \\ldots, n$, the $a_{k}^{\\prime}$ are all greater than $n$. Consequently,\n$$\n\\begin{array}{r}\nb_{\\ell}^{\\prime} \\geqslant(n+1)+(n+2)+\\cdots+(n+\\ell)=\\frac{\\ell(2 n+\\ell+1)}{2} \\\\\n\\quad \\geqslant \\frac{1}{2} \\cdot \\frac{n-2}{2}\\left(2 n+\\frac{n-2}{2}+1\\right)=\\frac{5 n(n-2)}{8}\n\\end{array}\n$$\nwhich is greater than $1+2+\\cdots+n=n(n+1) / 2$ for $n=2018$. A contradiction.\\\\\nComment. The above estimate may be slightly improved by noticing that $b_{\\ell}^{\\prime} \\neq b_{n}$. This implies $n(n+1) / 2=b_{n}>b_{\\ell}^{\\prime} \\geqslant\\lceil(n-2) / 2\\rceil(2 n+\\lceil(n-2) / 2\\rceil+1) / 2$, so $n \\leqslant 7$ if $n$ is odd, and $n \\leqslant 12$ if $n$ is even. It seems that the largest anti-Pascal pyramid whose entries are a permutation of the integers from 1 to $1+2+\\cdots+n$ has 5 rows."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Induction", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2017-P5", "year": 2017, "problem_number": 5, "nickname": "Circumcircle of a Certain Coaxal Bundle", "category": "combinatorics", "subcategories": ["Combinatorics on Words/Sequences"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.969, "stdev": 2.101, "histogram": [451, 46, 47, 9, 0, 2, 1, 59], "total_participants": 615}, "problem": {"natural_language": {"format": "latex", "text": "An integer $N \\ge 2$ is given. A collection of $N(N + 1)$ soccer players, no two of whom are of the same height, stand in a row. Sir Alex wants to remove $N(N - 1)$ players from this row leaving a new row of $2N$ players in which the following $N$ conditions hold:\n\\medskip\n\\begin{itemize}\n\\item[($1$)] no one stands between the two tallest players,\n\\item[($2$)] no one stands between the third and fourth tallest players,\n\\item[] \\centerline{\\vdots}\n\\item[($N$)] no one stands between the two shortest players.\n\\end{itemize}\n\\medskip\nShow that this is always possible.", "prefix": "An integer $N \\ge 2$ is given. A collection of $N(N + 1)$ soccer players, no two of whom are of the same height, stand in a row. Sir Alex wants to remove $N(N - 1)$ players from this row leaving a new row of $2N$ players in which the following $N$ conditions hold:\n\\medskip\n\\begin{itemize}\n\\item[($1$)] no one stands between the two tallest players,\n\\item[($2$)] no one stands between the third and fourth tallest players,\n\\item[] \\centerline{\\vdots}\n\\item[($N$)] no one stands between the two shortest players.\n\\end{itemize}", "suffix": "Show that this is always possible."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen Equiv Finset\n\ntheorem imo_2017_p5 (N : \u2115) (h_N : N \u2265 2) (height : Perm (Fin (N * (N + 1)))) :\n    \u2203 kept : Fin (2 * N) \u21aao Fin (N * (N + 1)),\n    -- For any i, j, such that the ith kept player in the line has an even number kept players shorter than them\n    \u2200 i j, Even #{l | height (kept l) < height (kept i)} \u2192\n      -- and the jth kept player has one more kept player shorter than them\n      #{l | height (kept l) < height (kept i)} + 1 = #{l | height (kept l) < height (kept j)} \u2192\n        -- There is no kept player between the ith and jth kept players\n         (\u00ac \u2203 k, (i < k \u2227 k < j) \u2228 (j < k \u2227 k < i)) := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Solution 1. Split the row into $N$ blocks with $N+1$ consecutive people each. We will show how to remove $N-1$ people from each block in order to satisfy the coach's wish.\nFirst, construct a $(N+1) \\times N$ matrix where $x_{i, j}$ is the height of the $i^{\\text {th }}$ tallest person of the $j^{\\text {th }}$ block-in other words, each column lists the heights within a single block, sorted in decreasing order from top to bottom.\nWe will reorder this matrix by repeatedly swapping whole columns. First, by column permutation, make sure that $x_{2,1}=\\max \\left\\{x_{2, i}: i=1,2, \\ldots, N\\right\\}$ (the first column contains the largest height of the second row). With the first column fixed, permute the other ones so that $x_{3,2}=\\max \\left\\{x_{3, i}: i=2, \\ldots, N\\right\\}$ (the second column contains the tallest person of the third row, first column excluded). In short, at step $k(k=1,2, \\ldots, N-1)$, we permute the columns from $k$ to $N$ so that $x_{k+1, k}=\\max \\left\\{x_{i, k}: i=k, k+1, \\ldots, N\\right\\}$, and end up with an array like this:\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.4\\textwidth]{2024_08_22_d87ed7beb898e38f9bcbg-44.jpg}}\n\\end{center}\nNow we make the bold choice: from the original row of people, remove everyone but those with heights\n\\begin{equation*}\nx_{1,1}>x_{2,1}>x_{2,2}>x_{3,2}>\\cdots>x_{N, N-1}>x_{N, N}>x_{N+1, N} \\tag{*}\n\\end{equation*}\nOf course this height order (*) is not necessarily their spatial order in the new row. We now need to convince ourselves that each pair $\\left(x_{k, k} ; x_{k+1, k}\\right)$ remains spatially together in this new row. But $x_{k, k}$ and $x_{k+1, k}$ belong to the same column/block of consecutive $N+1$ people; the only people that could possibly stand between them were also in this block, and they are all gone.\nSolution 2. Split the people into $N$ groups by height: group $G_{1}$ has the $N+1$ tallest ones, group $G_{2}$ has the next $N+1$ tallest, and so on, up to group $G_{N}$ with the $N+1$ shortest people.\nNow scan the original row from left to right, stopping as soon as you have scanned two people (consecutively or not) from the same group, say, $G_{i}$. Since we have $N$ groups, this must happen before or at the $(N+1)^{\\text {th }}$ person of the row. Choose this pair of people, removing all the other people from the same group $G_{i}$ and also all people that have been scanned so far. The only people that could separate this pair's heights were in group $G_{i}$ (and they are gone); the only people that could separate this pair's positions were already scanned (and they are gone too).\nWe are now left with $N-1$ groups (all except $G_{i}$ ). Since each of them lost at most one person, each one has at least $N$ unscanned people left in the row. Repeat the scanning process from left to right, choosing the next two people from the same group, removing this group and\\\\\neveryone scanned up to that point. Once again we end up with two people who are next to each other in the remaining row and whose heights cannot be separated by anyone else who remains (since the rest of their group is gone). After picking these 2 pairs, we still have $N-2$ groups with at least $N-1$ people each.\nIf we repeat the scanning process a total of $N$ times, it is easy to check that we will end up with 2 people from each group, for a total of $2 N$ people remaining. The height order is guaranteed by the grouping, and the scanning construction from left to right guarantees that each pair from a group stand next to each other in the final row. We are done.\nSolution 3. This is essentially the same as solution 1, but presented inductively. The essence of the argument is the following lemma.\\\\\nLemma. Assume that we have $N$ disjoint groups of at least $N+1$ people in each, all people have distinct heights. Then one can choose two people from each group so that among the chosen people, the two tallest ones are in one group, the third and the fourth tallest ones are in one group, ..., and the two shortest ones are in one group.\\\\\nProof. Induction on $N \\geqslant 1$; for $N=1$, the statement is trivial.\\\\\nConsider now $N$ groups $G_{1}, \\ldots, G_{N}$ with at least $N+1$ people in each for $N \\geqslant 2$. Enumerate the people by $1,2, \\ldots, N(N+1)$ according to their height, say, from tallest to shortest. Find the least $s$ such that two people among $1,2, \\ldots, s$ are in one group (without loss of generality, say this group is $G_{N}$ ). By the minimality of $s$, the two mentioned people in $G_{N}$ are $s$ and some $i<s$.\nNow we choose people $i$ and $s$ in $G_{N}$, forget about this group, and remove the people $1,2, \\ldots, s$ from $G_{1}, \\ldots, G_{N-1}$. Due to minimality of $s$ again, each of the obtained groups $G_{1}^{\\prime}, \\ldots, G_{N-1}^{\\prime}$ contains at least $N$ people. By the induction hypothesis, one can choose a pair of people from each of $G_{1}^{\\prime}, \\ldots, G_{N-1}^{\\prime}$ so as to satisfy the required conditions. Since all these people have numbers greater than $s$, addition of the pair $(s, i)$ from $G_{N}$ does not violate these requirements.\nTo solve the problem, it suffices now to split the row into $N$ contiguous groups with $N+1$ people in each and apply the Lemma to those groups.\nComment 1. One can identify each person with a pair of indices $(p, h)(p, h \\in\\{1,2, \\ldots, N(N+1)\\})$ so that the $p^{\\text {th }}$ person in the row (say, from left to right) is the $h^{\\text {th }}$ tallest person in the group. Say that $(a, b)$ separates $\\left(x_{1}, y_{1}\\right)$ and $\\left(x_{2}, y_{2}\\right)$ whenever $a$ is strictly between $x_{1}$ and $y_{1}$, or $b$ is strictly between $x_{2}$ and $y_{2}$. So the coach wants to pick $2 N$ people $\\left(p_{i}, h_{i}\\right)(i=1,2, \\ldots, 2 N)$ such that no chosen person separates $\\left(p_{1}, h_{1}\\right)$ from $\\left(p_{2}, h_{2}\\right)$, no chosen person separates $\\left(p_{3}, h_{3}\\right)$ and $\\left(p_{4}, h_{4}\\right)$, and so on. This formulation reveals a duality between positions and heights. In that sense, solutions 1 and 2 are dual of each other.\nComment 2. The number $N(N+1)$ is sharp for $N=2$ and $N=3$, due to arrangements $1,5,3,4,2$ and $1,10,6,4,3,9,5,8,7,2,11$."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Greedy Algorithm"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2017-P3", "year": 2017, "problem_number": 3, "nickname": "Hunter-Rabbit", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Combinatorial Game Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.042, "stdev": 0.479, "histogram": [608, 3, 0, 0, 1, 1, 0, 2], "total_participants": 615}, "problem": {"natural_language": {"format": "latex", "text": "A hunter and an invisible rabbit play a game in the Euclidean plane. The rabbit's starting point, $A_0$, and the hunter's starting point, $B_0$, are the same. After $n-1$ rounds of the game, the rabbit is at point $A_{n-1}$ and the hunter is at point $B_{n-1}$. In the $n$-th round of the game, three things occur in order.\n\\medskip\n\\begin{enumerate}\n\\item[(i)] The rabbit moves invisibly to a point $A_n$ such that the distance between $A_{n-1}$ and $A_n$ is exactly 1.\n\\item[(ii)] A tracking device reports a point $P_n$ to the hunter. The only guarantee provided by the tracking device is that the distance between $P_n$ and $A_n$ is at most 1.\n\\item[(iii)] The hunter moves visibly to a point $B_n$ such that the distance between $B_{n-1}$ and $B_n$ is exactly 1.\n\\end{enumerate}\n\\medskip\nIs it always possible, no matter how the rabbit moves, and no matter what points are reported by the tracking device, for the hunter to choose her moves so that after $10^9$ rounds she can ensure that the distance between her and the rabbit is at most 100?", "prefix": "A hunter and an invisible rabbit play a game in the Euclidean plane. The rabbit's starting point, $A_0$, and the hunter's starting point, $B_0$, are the same. After $n-1$ rounds of the game, the rabbit is at point $A_{n-1}$ and the hunter is at point $B_{n-1}$. In the $n$-th round of the game, three things occur in order.\n\\medskip\n\\begin{enumerate}\n\\item[(i)] The rabbit moves invisibly to a point $A_n$ such that the distance between $A_{n-1}$ and $A_n$ is exactly 1.\n\\item[(ii)] A tracking device reports a point $P_n$ to the hunter. The only guarantee provided by the tracking device is that the distance between $P_n$ and $A_n$ is at most 1.\n\\item[(iii)] The hunter moves visibly to a point $B_n$ such that the distance between $B_{n-1}$ and $B_n$ is exactly 1.\n\\end{enumerate}", "suffix": "Is it always possible, no matter how the rabbit moves, and no matter what points are reported by the tracking device, for the hunter to choose her moves so that after $10^9$ rounds she can ensure that the distance between her and the rabbit is at most 100?"}, "code": [{"language": "lean4", "text": "import Mathlib\n\nabbrev imo_2017_p3_solution : Bool := sorry\n\ntheorem imo_2017_p3 (start : EuclideanSpace \u211d (Fin 2)) : imo_2017_p3_solution =\n    \u2200 (A : \u2115 \u2192 EuclideanSpace \u211d (Fin 2)),\n      A 0 = (fun x => if x = 0 then start 1 else start 2) \u2192\n      \u2200 n, dist (A n) (A (n + 1)) = 1 \u2192\n      (\u2203 (P : \u2115 \u2192 EuclideanSpace \u211d (Fin 2)), \u2200 n > 0, dist (P n) (A n) \u2264 1) \u2192\n      (\u2203 (B : \u2115 \u2192 EuclideanSpace \u211d (Fin 2)),\n        B 0 = (fun x => if x = 0 then start 1 else start 2) \u2227 \u2200 n, dist (B n) (B (n + 1)) = 1 \u2227\n        dist (A (10 ^ 9)) (B (10 ^9)) \u2264 100) := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "A hunter and an invisible rabbit play a game in the Euclidean plane. The hunter's starting point $H_{0}$ coincides with the rabbit's starting point $R_{0}$. In the $n^{\\text {th }}$ round of the game $(n \\geqslant 1)$, the following happens.\\\\\n(1) First the invisible rabbit moves secretly and unobserved from its current point $R_{n-1}$ to some new point $R_{n}$ with $R_{n-1} R_{n}=1$.\\\\\n(2) The hunter has a tracking device (e.g. dog) that returns an approximate position $R_{n}^{\\prime}$ of the rabbit, so that $R_{n} R_{n}^{\\prime} \\leqslant 1$.\\\\\n(3) The hunter then visibly moves from point $H_{n-1}$ to a new point $H_{n}$ with $H_{n-1} H_{n}=1$.\nIs there a strategy for the hunter that guarantees that after $10^{9}$ such rounds the distance between the hunter and the rabbit is below 100 ?\\\\\nAnswer: There is no such strategy for the hunter. The rabbit \"wins\".\\\\\nSolution. If the answer were \"yes\", the hunter would have a strategy that would \"work\", no matter how the rabbit moved or where the radar pings $R_{n}^{\\prime}$ appeared. We will show the opposite: with bad luck from the radar pings, there is no strategy for the hunter that guarantees that the distance stays below 100 in $10^{9}$ rounds.\nSo, let $d_{n}$ be the distance between the hunter and the rabbit after $n$ rounds. Of course, if $d_{n} \\geqslant 100$ for any $n<10^{9}$, the rabbit has won - it just needs to move straight away from the hunter, and the distance will be kept at or above 100 thereon.\nWe will now show that, while $d_{n}<100$, whatever given strategy the hunter follows, the rabbit has a way of increasing $d_{n}^{2}$ by at least $\\frac{1}{2}$ every 200 rounds (as long as the radar pings are lucky enough for the rabbit). This way, $d_{n}^{2}$ will reach $10^{4}$ in less than $2 \\cdot 10^{4} \\cdot 200=4 \\cdot 10^{6}<10^{9}$ rounds, and the rabbit wins.\nSuppose the hunter is at $H_{n}$ and the rabbit is at $R_{n}$. Suppose even that the rabbit reveals its position at this moment to the hunter (this allows us to ignore all information from previous radar pings). Let $r$ be the line $H_{n} R_{n}$, and $Y_{1}$ and $Y_{2}$ be points which are 1 unit away from $r$ and 200 units away from $R_{n}$, as in the figure below.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.5\\textwidth]{2024_08_22_d87ed7beb898e38f9bcbg-46.jpg}}\n\\end{center}\nThe rabbit's plan is simply to choose one of the points $Y_{1}$ or $Y_{2}$ and hop 200 rounds straight towards it. Since all hops stay within 1 distance unit from $r$, it is possible that all radar pings stay on $r$. In particular, in this case, the hunter has no way of knowing whether the rabbit chose $Y_{1}$ or $Y_{2}$.\nLooking at such pings, what is the hunter going to do? If the hunter's strategy tells him to go 200 rounds straight to the right, he ends up at point $H^{\\prime}$ in the figure. Note that the hunter does not have a better alternative! Indeed, after these 200 rounds he will always end up at a point to the left of $H^{\\prime}$. If his strategy took him to a point above $r$, he would end up even further from $Y_{2}$; and if his strategy took him below $r$, he would end up even further from $Y_{1}$. In other words, no matter what strategy the hunter follows, he can never be sure his distance to the rabbit will be less than $y \\xlongequal{\\text { def }} H^{\\prime} Y_{1}=H^{\\prime} Y_{2}$ after these 200 rounds.\nTo estimate $y^{2}$, we take $Z$ as the midpoint of segment $Y_{1} Y_{2}$, we take $R^{\\prime}$ as a point 200 units to the right of $R_{n}$ and we define $\\varepsilon=Z R^{\\prime}$ (note that $H^{\\prime} R^{\\prime}=d_{n}$ ). Then\n$$\ny^{2}=1+\\left(H^{\\prime} Z\\right)^{2}=1+\\left(d_{n}-\\varepsilon\\right)^{2}\n$$\nwhere\n$$\n\\varepsilon=200-R_{n} Z=200-\\sqrt{200^{2}-1}=\\frac{1}{200+\\sqrt{200^{2}-1}}>\\frac{1}{400}\n$$\nIn particular, $\\varepsilon^{2}+1=400 \\varepsilon$, so\n$$\ny^{2}=d_{n}^{2}-2 \\varepsilon d_{n}+\\varepsilon^{2}+1=d_{n}^{2}+\\varepsilon\\left(400-2 d_{n}\\right)\n$$\nSince $\\varepsilon>\\frac{1}{400}$ and we assumed $d_{n}<100$, this shows that $y^{2}>d_{n}^{2}+\\frac{1}{2}$. So, as we claimed, with this list of radar pings, no matter what the hunter does, the rabbit might achieve $d_{n+200}^{2}>d_{n}^{2}+\\frac{1}{2}$. The wabbit wins.\nComment 1. Many different versions of the solution above can be found by replacing 200 with some other number $N$ for the number of hops the rabbit takes between reveals. If this is done, we have:\n$$\n\\varepsilon=N-\\sqrt{N^{2}-1}>\\frac{1}{N+\\sqrt{N^{2}-1}}>\\frac{1}{2 N}\n$$\nand\n$$\n\\varepsilon^{2}+1=2 N \\varepsilon\n$$\nso, as long as $N>d_{n}$, we would find\n$$\ny^{2}=d_{n}^{2}+\\varepsilon\\left(2 N-2 d_{n}\\right)>d_{n}^{2}+\\frac{N-d_{n}}{N}\n$$\nFor example, taking $N=101$ is already enough-the squared distance increases by at least $\\frac{1}{101}$ every 101 rounds, and $101^{2} \\cdot 10^{4}=1.0201 \\cdot 10^{8}<10^{9}$ rounds are enough for the rabbit. If the statement is made sharper, some such versions might not work any longer.\nComment 2. The original statement asked whether the distance could be kept under $10^{10}$ in $10^{100}$ rounds."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Symmetry", "Invariant", "Strategy Construction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2016-P6", "year": 2016, "problem_number": 6, "nickname": "Circular Game on N\u00d7N Board", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Combinatorial Game Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.806, "stdev": 1.889, "histogram": [474, 31, 9, 39, 4, 4, 4, 37], "total_participants": 602}, "problem": {"natural_language": {"format": "latex", "text": "There are $n\\ge 2$ line segments in the plane such that every two segments cross and no three segments meet at a point. Geoff has to choose an endpoint of each segment and place a frog on it facing the other endpoint. Then he will clap his hands $n-1$ times. Every time he claps, each frog will immediately jump forward to the next intersection point on its segment. Frogs never change the direction of their jumps. Geoff wishes to place the frogs in such a way that no two of them will ever occupy the same intersection point at the same time.\n\\medskip\n\\begin{enumerate}\n\\item[(a)] Prove that Geoff can always fulfill his wish if $n$ is odd.\n\\item[(b)] Prove that Geoff can never fulfill his wish if $n$ is even.\n\\end{enumerate}", "prefix": "There are $n\\ge 2$ line segments in the plane such that every two segments cross and no three segments meet at a point. Geoff has to choose an endpoint of each segment and place a frog on it facing the other endpoint. Then he will clap his hands $n-1$ times. Every time he claps, each frog will immediately jump forward to the next intersection point on its segment. Frogs never change the direction of their jumps. Geoff wishes to place the frogs in such a way that no two of them will ever occupy the same intersection point at the same time.", "suffix": "\begin{enumerate}\n\\item[(a)] Prove that Geoff can always fulfill his wish if $n$ is odd.\n\\item[(b)] Prove that Geoff can never fulfill his wish if $n$ is even.\n\\end{enumerate}"}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen Function\n\n-- A `N`-frog system is the data of `N * (N - 1) / 2` points and `N` segments straight in the plane of each `N - 1` points ---- such that every two segments intersect in exactly one point.\nstructure FrogSystem (N : \u2115) where\n  -- For each segment `s` and time `t`, the `t`-th segment `s'` that `s` meets.\n  otherSegment (s : Fin N) : Fin (N - 1) \u2243 {s' : Fin N // s \u2260 s'}\n  -- The point indexed by the pair of segments it belongs to.\n  point : {p : Sym2 (Fin N) // \u00ac p.IsDiag} \u2192 EuclideanSpace \u211d (Fin 2)\n  -- Points are in order along each segment.\n  mem_collinear {s t\u2080 t\u2081 t\u2082} : t\u2080 < t\u2081 \u2192 t\u2081 < t\u2082 \u2192 Sbtw \u211d\n      (point \u27e8s(s, otherSegment s t\u2080), by simpa using (otherSegment s t\u2080).2\u27e9)\n      (point \u27e8s(s, otherSegment s t\u2081), by simpa using (otherSegment s t\u2081).2\u27e9)\n      (point \u27e8s(s, otherSegment s t\u2082), by simpa using (otherSegment s t\u2082).2\u27e9)\n\n-- Geoff's wish is that for each time `t` the `t` intersections of each segment are different.\ndef FrogSystem.GeoffsWish {N : \u2115} (F : FrogSystem N) : Prop :=\n  \u2200 t, Injective fun s \u21a6 s(s, F.otherSegment s t)\n\n\ntheorem imo_2016_p6 :\n    -- If `n \u2265 2` is odd, then Geoff can always fulfill his wish.\n    (\u2200 n \u2265 2, Odd n \u2192 \u2203 F : FrogSystem n, F.GeoffsWish) \u2227\n    -- If `n \u2265 2` is even, then Geoff can never fulfill his wish.\n      \u2200 n \u2265 2, Even n \u2192 \u2200 F : FrogSystem n, \u00ac F.GeoffsWish := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Imagine taking a larger circle $\\omega$ encasing all $\\binom{n}{2}$ intersection points. Denote by $P_{1}, P_{2}$, $\\ldots, P_{2 n}$ the order of the points on $\\omega$ in clockwise order; we imagine placing the frogs on $P_{i}$ instead. Observe that, in order for every pair of segments to meet, each line segment must be of the form $P_{i} P_{i+n}$.\\\\\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.2\\textwidth]{imo2016p6.png}}\n\\end{center}\n% \\begin{center}\n% \\includegraphics[width=0.3\\textwidth]{2025_08_08_97d312101a54723f81b1g-03.png}\n% \\end{center}\nThen:\\\\\n(a) Place the frogs on $P_{1}, P_{3}, \\ldots, P_{2 n-1}$. A simple parity arguments shows this works.\\\\\n(b) Observe that we cannot place frogs on consecutive $P_{i}$, so the $n$ frogs must be placed on alternating points. But since we also are supposed to not place frogs on diametrically opposite points, for even $n$ we immediately get a contradiction."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2016-P2", "year": 2016, "problem_number": 2, "nickname": "Fill N\u00d7N Table with I,M,O Equally", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.033, "stdev": 2.617, "histogram": [277, 65, 99, 30, 7, 8, 9, 107], "total_participants": 602}, "problem": {"natural_language": {"format": "latex", "text": "Find all integers $n$ for which each cell of an $n \\times n$ table can be filled with one of the letters $A$, $B$, and $C$ in such a way that:\n\\medskip\n\\begin{itemize}\n\\item in each row and each column, one third of the entries are $A$, one third are $B$, and one third are $C$; and\n\\item in any diagonal, if the number of entries on the diagonal is a multiple of three, then one third of the entries are $A$, one third are $B$, and one third are $C$.\n\\end{itemize}\n\\medskip\n\\noindent\n\\textbf{Note.} The rows and columns of an $n \\times n$ table are each labelled $1$ to $n$ in a natural order. Thus each cell corresponds to a pair of positive integers $(i,j)$ with $1 \\leq i,j \\leq n$. For $n \\geq 2$, the table has $4n-2$ diagonals of two types. A diagonal of the first type consists of all cells $(i,j)$ for which $i-j$ is a constant, and a diagonal of the second type consists of all cells $(i,j)$ for which $i+j$ is constant.", "prefix": "Find all integers $n$ for which each cell of an $n \\times n$ table can be filled with one of the letters $A$, $B$, and $C$ in such a way that:", "suffix": "\begin{itemize}\n\\item in each row and each column, one third of the entries are $A$, one third are $B$, and one third are $C$; and\n\\item in any diagonal, if the number of entries on the diagonal is a multiple of three, then one third of the entries are $A$, one third are $B$, and one third are $C$.\n\\end{itemize}\n\\medskip\n\\noindent\n\\textbf{Note.} The rows and columns of an $n \\times n$ table are each labelled $1$ to $n$ in a natural order. Thus each cell corresponds to a pair of positive integers $(i,j)$ with $1 \\leq i,j \\leq n$. For $n \\geq 2$, the table has $4n-2$ diagonals of two types. A diagonal of the first type consists of all cells $(i,j)$ for which $i-j$ is a constant, and a diagonal of the second type consists of all cells $(i,j)$ for which $i+j$ is constant."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen Finset\n\ninductive Letters\n  | I | M | O\nderiving BEq, DecidableEq\n\ndef diagonal_I_set (n k : \u2115) : Finset (Fin n \u00d7 Fin n) :=\n  (@Finset.univ (Fin n \u00d7 Fin n) _ |>.filter (fun (i, j) => i.1 + j.1 = k))\n\ndef diagonal_I (n k : \u2115) (A : Matrix (Fin n) (Fin n) Letters) : Prop :=\n  3 \u2223 #(diagonal_I_set n k) \u2192\n  #(diagonal_I_set n k) = 3 * #{x \u2208 diagonal_I_set n k | A x.1 x.2 = Letters.I} \u2227\n  #(diagonal_I_set n k) = 3 * #{x \u2208 diagonal_I_set n k | A x.1 x.2 = Letters.M} \u2227\n  #(diagonal_I_set n k) = 3 * #{x \u2208 diagonal_I_set n k | A x.1 x.2 = Letters.O}\n\ndef diagonal_II_set (n : \u2115) (k : \u2124) : Finset (Fin n \u00d7 Fin n) :=\n  (@Finset.univ (Fin n \u00d7 Fin n) _ |>.filter (fun (i, j) => (i.1 : \u2124) - (j.1 : \u2124) = k))\n\ndef diagonal_II (n : \u2115) (k : \u2124) (A : Matrix (Fin n) (Fin n) Letters) : Prop :=\n  3 \u2223 #(diagonal_II_set n k) \u2192\n  #(diagonal_II_set n k) = 3 * #{x \u2208 diagonal_II_set n k | A x.1 x.2 = Letters.I} \u2227\n  #(diagonal_II_set n k) = 3 * #{x \u2208 diagonal_II_set n k | A x.1 x.2 = Letters.M} \u2227\n  #(diagonal_II_set n k) = 3 * #{x \u2208 diagonal_II_set n k | A x.1 x.2 = Letters.O}\n\ndef exists_valid_table (n : \u2115) : Prop :=\n  \u2203 (A : Matrix (Fin n) (Fin n) Letters),\n  (\u2200 i : Fin n,\n    n = 3 * #{j | A i j = Letters.I} \u2227 n = 3 * #{j | A i j = Letters.M} \u2227\n    n = 3 * #{j | A i j = Letters.O}) \u2227\n  (\u2200 j : Fin n,\n    n = 3 * #{i | A i j = Letters.I} \u2227 n = 3 * #{i | A i j = Letters.M} \u2227\n    n = 3 * #{i | A i j = Letters.O}) \u2227\n  (\u2200 k \u2208 Finset.range (2 * n - 1), diagonal_I n k A) \u2227\n  \u2200 k \u2208 Finset.Icc (-(n : \u2124) + 1) (n - 1), diagonal_II n k A\n\nabbrev imo_2016_p2_solution : Set \u2115 := sorry\n\n\ntheorem imo_2016_p2 : {n | exists_valid_table n} = imo_2016_p2_solution := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Find all integers $n$ for which each cell of $n \\times n$ table can be filled with one of the letters $I, M$ and $O$ in such a way that:\n\\begin{itemize}\n\\item In each row and column, one third of the entries are $I$, one third are $M$ and one third are $O$; and\n\\item in any diagonal, if the number of entries on the diagonal is a multiple of three, then one third of the entries are $I$, one third are $M$ and one third are $O$.\n\\end{itemize}\nNote that an $n \\times n$ table has $4 n-2$ diagonals.\nThe answer is $n$ divisible by 9 .\\\\\nFirst we construct $n=9$ and by extension every multiple of 9 .\n\\begin{center}\n\\begin{tabular}{|ccc|ccc|ccc|}\n\\hline\n$I$ & $I$ & $I$ & $M$ & $M$ & $M$ & $O$ & $O$ & $O$ \\\\\n$M$ & $M$ & $M$ & $O$ & $O$ & $O$ & $I$ & $I$ & $I$ \\\\\n$O$ & $O$ & $O$ & $I$ & $I$ & $I$ & $M$ & $M$ & $M$ \\\\\n\\hline\n$I$ & $I$ & $I$ & $M$ & $M$ & $M$ & $O$ & $O$ & $O$ \\\\\n$M$ & $M$ & $M$ & $O$ & $O$ & $O$ & $I$ & $I$ & $I$ \\\\\n$O$ & $O$ & $O$ & $I$ & $I$ & $I$ & $M$ & $M$ & $M$ \\\\\n\\hline\n$I$ & $I$ & $I$ & $M$ & $M$ & $M$ & $O$ & $O$ & $O$ \\\\\n$M$ & $M$ & $M$ & $O$ & $O$ & $O$ & $I$ & $I$ & $I$ \\\\\n$O$ & $O$ & $O$ & $I$ & $I$ & $I$ & $M$ & $M$ & $M$ \\\\\n\\hline\n\\end{tabular}\n\\end{center}\nWe now prove $9 \\mid n$ is necessary.\\\\\nLet $n=3 k$, which divides the given grid into $k^{2}$ sub-boxes (of size $3 \\times 3$ each). We say a multiset of squares $S$ is clean if the letters distribute equally among them; note that unions of clean multisets are clean.\nConsider the following clean sets (given to us by problem statement):\n\\begin{itemize}\n\\item All columns indexed $2(\\bmod 3)$,\n\\item All rows indexed $2(\\bmod 3)$, and\n\\item All $4 k-2$ diagonals mentioned in the problem.\n\\end{itemize}\nTake their union. This covers the center of each box four times, and every other cell exactly once. We conclude the set of $k^{2}$ center squares are clean, hence $3 \\mid k^{2}$ and so $9 \\mid n$, as desired.\nShown below is the sums over all diagonals only, and of the entire union.\n\\begin{center}\n\\begin{tabular}{|lll|ll|lll|}\n\\hline\n1 &  & 1 & 1 &  & 1 & 1 &  \\\\\n& 2 &  &  & 2 &  &  & 2 \\\\\n1 &  & 1 & 1 &  & 1 & 1 &  \\\\\n\\hline\n1 &  & 1 & 1 &  & 1 & 1 &  \\\\\n& 2 &  &  & 2 &  &  & 2 \\\\\n1 &  & 1 & 1 &  & 1 & 1 &  \\\\\n\\hline\n1 &  & 1 & 1 &  & 1 & 1 &  \\\\\n& 2 &  &  & 2 &  &  & 1 \\\\\n1 &  & 1 & 1 &  & 1 & 1 &  \\\\\n\\hline\n\\end{tabular}\n\\end{center}\n\\begin{center}\n\\begin{tabular}{|lll|lll|lll|}\n\\hline\n1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n1 & 4 & 1 & 1 & 4 & 1 & 1 & 4 & 1 \\\\\n1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n\\hline\n1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n1 & 4 & 1 & 1 & 4 & 1 & 1 & 4 & 1 \\\\\n1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n\\hline\n1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n1 & 4 & 1 & 1 & 4 & 1 & 1 & 4 & 1 \\\\\n1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\\\\n\\hline\n\\end{tabular}\n\\end{center}"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Invariant", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2015-P6", "year": 2015, "problem_number": 6, "nickname": "Diophantine Problem on Factorial Products", "category": "combinatorics", "subcategories": ["Combinatorics on Words/Sequences", "Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.355, "stdev": 1.294, "histogram": [521, 11, 15, 6, 3, 3, 7, 11], "total_participants": 577}, "problem": {"natural_language": {"format": "latex", "text": "The sequence $a_{1}, a_{2}, \\ldots$ of integers satisfies the conditions:\\\\\n(i) $1 \\leq a_{j} \\leq 2015$ for all $j \\geq 1$,\\\\\n(ii) $k+a_{k} \\neq \\ell+a_{\\ell}$ for all $1 \\leq k<\\ell$.\nProve that there exist two positive integers $b$ and $N$ for which\n$$\n\\left|\\sum_{j=m+1}^{n}\\left(a_{j}-b\\right)\\right| \\leq 1007^{2}\n$$\nfor all integers $m$ and $n$ such that $n>m \\geq N$.", "prefix": "The sequence $a_{1}, a_{2}, \\ldots$ of integers satisfies the conditions:\\\\\n(i) $1 \\leq a_{j} \\leq 2015$ for all $j \\geq 1$,\\\\\n(ii) $k+a_{k} \\neq \\ell+a_{\\ell}$ for all $1 \\leq k<\\ell$.", "suffix": "Prove that there exist two positive integers $b$ and $N$ for which\n$$\n\\left|\\sum_{j=m+1}^{n}\\left(a_{j}-b\\right)\\right| \\leq 1007^{2}\n$$\nfor all integers $m$ and $n$ such that $n>m \\geq N$."}, "code": [{"language": "lean4", "text": "import Mathlib.Tactic\nimport Mathlib.Algebra.Order.Group.Int.Sum\n\n\ndef Condition (a : \u2115 \u2192 \u2124) : Prop :=\n  (\u2200 i, a i \u2208 Finset.Icc 1 2015) \u2227 Function.Injective fun i \u21a6 i + a i\n\nnamespace Imo2015P6\n\ntheorem imo2015_p6 (ha : Condition a) :\n    \u2203 b > 0, \u2203 N, \u2200 m \u2265 N, \u2200 n > m, |\u2211 j \u2208 Finset.Ico m n, (a j - b)| \u2264 1007 $^$ 2 := sorry\n\nend Imo2015P6"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Consider an infinite sequence $a_{1}, a_{2}, \\ldots$ of positive integers with $a_{i} \\leqslant 2015$ for all $i \\geqslant 1$. Suppose that for any two distinct indices $i$ and $j$ we have $i+a_{i} \\neq j+a_{j}$.\nProve that there exist two positive integers $b$ and $N$ such that\n$$\n\\left|\\sum_{i=m+1}^{n}\\left(a_{i}-b\\right)\\right| \\leqslant 1007^{2}\n$$\nwhenever $n>m \\geqslant N$.\\\\\nSolution 1. We visualize the set of positive integers as a sequence of points. For each $n$ we draw an arrow emerging from $n$ that points to $n+a_{n}$; so the length of this arrow is $a_{n}$. Due to the condition that $m+a_{m} \\neq n+a_{n}$ for $m \\neq n$, each positive integer receives at most one arrow. There are some positive integers, such as 1 , that receive no arrows; these will be referred to as starting points in the sequel. When one starts at any of the starting points and keeps following the arrows, one is led to an infinite path, called its ray, that visits a strictly increasing sequence of positive integers. Since the length of any arrow is at most 2015, such a ray, say with starting point $s$, meets every interval of the form $[n, n+2014]$ with $n \\geqslant s$ at least once.\nSuppose for the sake of contradiction that there would be at least 2016 starting points. Then we could take an integer $n$ that is larger than the first 2016 starting points. But now the interval $[n, n+2014]$ must be met by at least 2016 rays in distinct points, which is absurd. We have thereby shown that the number $b$ of starting points satisfies $1 \\leqslant b \\leqslant 2015$. Let $N$ denote any integer that is larger than all starting points. We contend that $b$ and $N$ are as required.\nTo see this, let any two integers $m$ and $n$ with $n>m \\geqslant N$ be given. The sum $\\sum_{i=m+1}^{n} a_{i}$ gives the total length of the arrows emerging from $m+1, \\ldots, n$. Taken together, these arrows form $b$ subpaths of our rays, some of which may be empty. Now on each ray we look at the first number that is larger than $m$; let $x_{1}, \\ldots, x_{b}$ denote these numbers, and let $y_{1}, \\ldots, y_{b}$ enumerate in corresponding order the numbers defined similarly with respect to $n$. Then the list of differences $y_{1}-x_{1}, \\ldots, y_{b}-x_{b}$ consists of the lengths of these paths and possibly some zeros corresponding to empty paths. Consequently, we obtain\n$$\n\\sum_{i=m+1}^{n} a_{i}=\\sum_{j=1}^{b}\\left(y_{j}-x_{j}\\right)\n$$\nwhence\n$$\n\\sum_{i=m+1}^{n}\\left(a_{i}-b\\right)=\\sum_{j=1}^{b}\\left(y_{j}-n\\right)-\\sum_{j=1}^{b}\\left(x_{j}-m\\right)\n$$\nNow each of the $b$ rays meets the interval $[m+1, m+2015]$ at some point and thus $x_{1}-$ $m, \\ldots, x_{b}-m$ are $b$ distinct members of the set $\\{1,2, \\ldots, 2015\\}$. Moreover, since $m+1$ is not a starting point, it must belong to some ray; so 1 has to appear among these numbers, wherefore\n$$\n1+\\sum_{j=1}^{b-1}(j+1) \\leqslant \\sum_{j=1}^{b}\\left(x_{j}-m\\right) \\leqslant 1+\\sum_{j=1}^{b-1}(2016-b+j)\n$$\nThe same argument applied to $n$ and $y_{1}, \\ldots, y_{b}$ yields\n$$\n1+\\sum_{j=1}^{b-1}(j+1) \\leqslant \\sum_{j=1}^{b}\\left(y_{j}-n\\right) \\leqslant 1+\\sum_{j=1}^{b-1}(2016-b+j)\n$$\nSo altogether we get\n$$\n\\begin{aligned}\n\\left|\\sum_{i=m+1}^{n}\\left(a_{i}-b\\right)\\right| & \\leqslant \\sum_{j=1}^{b-1}((2016-b+j)-(j+1))=(b-1)(2015-b) \\\\\n& \\leqslant\\left(\\frac{(b-1)+(2015-b)}{2}\\right)^{2}=1007^{2}\n\\end{aligned}\n$$\nas desired.\\\\\nSolution 2. Set $s_{n}=n+a_{n}$ for all positive integers $n$. By our assumptions, we have\n$$\nn+1 \\leqslant s_{n} \\leqslant n+2015\n$$\nfor all $n \\in \\mathbb{Z}_{>0}$. The members of the sequence $s_{1}, s_{2}, \\ldots$ are distinct. We shall investigate the set\n$$\nM=\\mathbb{Z}_{>0} \\backslash\\left\\{s_{1}, s_{2}, \\ldots\\right\\}\n$$\nClaim. At most 2015 numbers belong to $M$.\\\\\nProof. Otherwise let $m_{1}<m_{2}<\\cdots<m_{2016}$ be any 2016 distinct elements from $M$. For $n=m_{2016}$ we have\n$$\n\\left\\{s_{1}, \\ldots, s_{n}\\right\\} \\cup\\left\\{m_{1}, \\ldots, m_{2016}\\right\\} \\subseteq\\{1,2, \\ldots, n+2015\\}\n$$\nwhere on the left-hand side we have a disjoint union containing altogether $n+2016$ elements. But the set on the right-hand side has only $n+2015$ elements. This contradiction proves our claim.\nNow we work towards proving that the positive integers $b=|M|$ and $N=\\max (M)$ are as required. Recall that we have just shown $b \\leqslant 2015$.\nLet us consider any integer $r \\geqslant N$. As in the proof of the above claim, we see that\n\\begin{equation*}\nB_{r}=M \\cup\\left\\{s_{1}, \\ldots, s_{r}\\right\\} \\tag{1}\n\\end{equation*}\nis a subset of $[1, r+2015] \\cap \\mathbb{Z}$ with precisely $b+r$ elements. Due to the definitions of $M$ and $N$, we also know $[1, r+1] \\cap \\mathbb{Z} \\subseteq B_{r}$. It follows that there is a set $C_{r} \\subseteq\\{1,2, \\ldots, 2014\\}$ with $\\left|C_{r}\\right|=b-1$ and\n\\begin{equation*}\nB_{r}=([1, r+1] \\cap \\mathbb{Z}) \\cup\\left\\{r+1+x \\mid x \\in C_{r}\\right\\} \\tag{2}\n\\end{equation*}\nFor any finite set of integers $J$ we denote the sum of its elements by $\\sum J$. Now the equations (1) and (2) give rise to two ways of computing $\\sum B_{r}$ and the comparison of both methods leads to\n$$\n\\sum M+\\sum_{i=1}^{r} s_{i}=\\sum_{i=1}^{r} i+b(r+1)+\\sum C_{r}\n$$\nor in other words to\n\\begin{equation*}\n\\sum M+\\sum_{i=1}^{r}\\left(a_{i}-b\\right)=b+\\sum C_{r} \\tag{3}\n\\end{equation*}\nAfter this preparation, we consider any two integers $m$ and $n$ with $n>m \\geqslant N$. Plugging $r=n$ and $r=m$ into (3) and subtracting the estimates that result, we deduce\n$$\n\\sum_{i=m+1}^{n}\\left(a_{i}-b\\right)=\\sum C_{n}-\\sum C_{m}\n$$\nSince $C_{n}$ and $C_{m}$ are subsets of $\\{1,2, \\ldots, 2014\\}$ with $\\left|C_{n}\\right|=\\left|C_{m}\\right|=b-1$, it is clear that the absolute value of the right-hand side of the above inequality attains its largest possible value if either $C_{m}=\\{1,2, \\ldots, b-1\\}$ and $C_{n}=\\{2016-b, \\ldots, 2014\\}$, or the other way around. In these two cases we have\n$$\n\\left|\\sum C_{n}-\\sum C_{m}\\right|=(b-1)(2015-b)\n$$\nso in the general case we find\n$$\n\\left|\\sum_{i=m+1}^{n}\\left(a_{i}-b\\right)\\right| \\leqslant(b-1)(2015-b) \\leqslant\\left(\\frac{(b-1)+(2015-b)}{2}\\right)^{2}=1007^{2}\n$$\nas desired.\nComment. The sets $C_{n}$ may be visualized by means of the following process: Start with an empty blackboard. For $n \\geqslant 1$, the following happens during the $n^{\\text {th }}$ step. The number $a_{n}$ gets written on the blackboard, then all numbers currently on the blackboard are decreased by 1 , and finally all zeros that have arisen get swept away.\nIt is not hard to see that the numbers present on the blackboard after $n$ steps are distinct and form the set $C_{n}$. Moreover, it is possible to complete a solution based on this idea."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Bijection"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2015-P1", "year": 2015, "problem_number": 1, "nickname": "Balanced and Centre-Free Sets", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 4.307, "stdev": 2.87, "histogram": [93, 89, 5, 21, 72, 12, 20, 265], "total_participants": 577}, "problem": {"natural_language": {"format": "latex", "text": "We say that a finite set $\\mathcal{S}$ in the plane is balanced if, for any two different points $A$, $B$ in $\\mathcal{S}$, there is a point $C$ in $\\mathcal{S}$ such that $AC=BC$. We say that $\\mathcal{S}$ is centre-free if for any three points $A$, $B$, $C$ in $\\mathcal{S}$, there is no point $P$ in $\\mathcal{S}$ such that $PA=PB=PC$.\nShow that for all integers $n\\geq 3$, there exists a balanced set consisting of $n$ points.\nDetermine all integers $n\\geq 3$ for which there exists a balanced centre-free set consisting of $n$ points.", "prefix": "We say that a finite set $\\mathcal{S}$ in the plane is balanced if, for any two different points $A$, $B$ in $\\mathcal{S}$, there is a point $C$ in $\\mathcal{S}$ such that $AC=BC$. We say that $\\mathcal{S}$ is centre-free if for any three points $A$, $B$, $C$ in $\\mathcal{S}$, there is no point $P$ in $\\mathcal{S}$ such that $PA=PB=PC$.\nShow that for all integers $n\\geq 3$, there exists a balanced set consisting of $n$ points.", "suffix": "Determine all integers $n\\geq 3$ for which there exists a balanced centre-free set consisting of $n$ points."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ndef balanced (S : Set (EuclideanSpace \u211d (Fin 2))) : Prop :=\n  \u2200 A \u2208 S, \u2200 B \u2208 S, A \u2260 B \u2192 (\u2203 C \u2208 S, dist A C = dist B C)\n\ndef centre_free (S : Set (EuclideanSpace \u211d (Fin 2))) : Prop :=\n  \u2200 A \u2208 S, \u2200 B \u2208 S, \u2200 C \u2208 S, A \u2260 B \u2192 B \u2260 C \u2192 A \u2260 C \u2192\n    \u00ac (\u2203 P \u2208 S, dist A P = dist B P \u2227 dist B P = dist C P)\n\nabbrev imo_2015_p1_solution : Set \u2115 := sorry\n\n\ntheorem imo_2015_p1 : (\u2200 n \u2265 3, \u2203 (S : Finset (EuclideanSpace \u211d (Fin 2))), balanced S \u2227 S.card = n) \u2227\n    {n | n \u2265 3 \u2227 (\u2203 (S : Finset (EuclideanSpace \u211d (Fin 2))), balanced S \u2227 centre_free S \u2227 S.card = n)} =\n    imo_2015_p1_solution := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $\\mathcal{V}$ be a finite set of points in the plane. We say that $\\mathcal{V}$ is balanced if for any two distinct points $A, B \\in \\mathcal{V}$, there exists a point $C \\in \\mathcal{V}$ such that $A C=B C$. We say that $\\mathcal{V}$ is center-free if for any distinct points $A, B, C \\in \\mathcal{V}$, there does not exist a point $P \\in \\mathcal{V}$ such that $P A=P B=P C$.\\\\\n(a) Show that for all $n \\geqslant 3$, there exists a balanced set consisting of $n$ points.\\\\\n(b) For which $n \\geqslant 3$ does there exist a balanced, center-free set consisting of $n$ points?\\\\\n(Netherlands)\\\\\nAnswer for part (b). All odd integers $n \\geqslant 3$.\n\\section*{Solution.}\nPart ( $\\boldsymbol{a}$ ). Assume that $n$ is odd. Consider a regular $n$-gon. Label the vertices of the $n$-gon as $A_{1}, A_{2}, \\ldots, A_{n}$ in counter-clockwise order, and set $\\mathcal{V}=\\left\\{A_{1}, \\ldots, A_{n}\\right\\}$. We check that $\\mathcal{V}$ is balanced. For any two distinct vertices $A_{i}$ and $A_{j}$, let $k \\in\\{1,2, \\ldots, n\\}$ be the solution of $2 k \\equiv i+j(\\bmod n)$. Then, since $k-i \\equiv j-k(\\bmod n)$, we have $A_{i} A_{k}=A_{j} A_{k}$, as required.\nNow assume that $n$ is even. Consider a regular $(3 n-6)$-gon, and let $O$ be its circumcenter. Again, label its vertices as $A_{1}, \\ldots, A_{3 n-6}$ in counter-clockwise order, and choose $\\mathcal{V}=$ $\\left\\{O, A_{1}, A_{2}, \\ldots, A_{n-1}\\right\\}$. We check that $\\mathcal{V}$ is balanced. For any two distinct vertices $A_{i}$ and $A_{j}$, we always have $O A_{i}=O A_{j}$. We now consider the vertices $O$ and $A_{i}$. First note that the triangle $O A_{i} A_{n / 2-1+i}$ is equilateral for all $i \\leqslant \\frac{n}{2}$. Hence, if $i \\leqslant \\frac{n}{2}$, then we have $O A_{n / 2-1+i}=A_{i} A_{n / 2-1+i}$; otherwise, if $i>\\frac{n}{2}$, then we have $O A_{i-n / 2+1}=A_{i} A_{i-n / 2+1}$. This completes the proof.\nAn example of such a construction when $n=10$ is shown in Figure 1.\n\\begin{center}\n\\fcolorbox{black}{white}\n{\\includegraphics[width=0.5\\textwidth]{imo2015p1.png}}\n\\end{center}\nComment ( $a$ ). There are many ways to construct an example by placing equilateral triangles in a circle. Here we present one general method.\nLet $O$ be the center of a circle and let $A_{1}, B_{1}, \\ldots, A_{k}, B_{k}$ be distinct points on the circle such that the triangle $O A_{i} B_{i}$ is equilateral for each $i$. Then $\\mathcal{V}=\\left\\{O, A_{1}, B_{1}, \\ldots, A_{k}, B_{k}\\right\\}$ is balanced. To construct a set of even cardinality, put extra points $C, D, E$ on the circle such that triangles $O C D$ and $O D E$ are equilateral (see Figure 2). Then $\\mathcal{V}=\\left\\{O, A_{1}, B_{1}, \\ldots, A_{k}, B_{k}, C, D, E\\right\\}$ is balanced.\nPart (b). We now show that there exists a balanced, center-free set containing $n$ points for all odd $n \\geqslant 3$, and that one does not exist for any even $n \\geqslant 3$.\nIf $n$ is odd, then let $\\mathcal{V}$ be the set of vertices of a regular $n$-gon. We have shown in part ( $a$ ) that $\\mathcal{V}$ is balanced. We claim that $\\mathcal{V}$ is also center-free. Indeed, if $P$ is a point such that\\\\\n$P A=P B=P C$ for some three distinct vertices $A, B$ and $C$, then $P$ is circumcenter of the $n$-gon, which is not contained in $\\mathcal{V}$.\nNow suppose that $\\mathcal{V}$ is a balanced, center-free set of even cardinality $n$. We will derive a contradiction. For a pair of distinct points $A, B \\in \\mathcal{V}$, we say that a point $C \\in \\mathcal{V}$ is associated with the pair $\\{A, B\\}$ if $A C=B C$. Since there are $\\frac{n(n-1)}{2}$ pairs of points, there exists a point $P \\in \\mathcal{V}$ which is associated with at least $\\left\\lceil\\frac{n(n-1)}{2} / n\\right\\rceil=\\frac{n}{2}$ pairs. Note that none of these $\\frac{n}{2}$ pairs can contain $P$, so that the union of these $\\frac{n}{2}$ pairs consists of at most $n-1$ points. Hence there exist two such pairs that share a point. Let these two pairs be $\\{A, B\\}$ and $\\{A, C\\}$. Then $P A=P B=P C$, which is a contradiction.\nComment (b). We can rephrase the argument in graph theoretic terms as follows. Let $\\mathcal{V}$ be a balanced, center-free set consisting of $n$ points. For any pair of distinct vertices $A, B \\in \\mathcal{V}$ and for any $C \\in \\mathcal{V}$ such that $A C=B C$, draw directed edges $A \\rightarrow C$ and $B \\rightarrow C$. Then all pairs of vertices generate altogether at least $n(n-1)$ directed edges; since the set is center-free, these edges are distinct. So we must obtain a graph in which any two vertices are connected in both directions. Now, each vertex has exactly $n-1$ incoming edges, which means that $n-1$ is even. Hence $n$ is odd."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Pigeonhole Principle"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2014-P6", "year": 2014, "problem_number": 6, "nickname": "Cover n\u00d7n Grid with L-Trominoes", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Graph Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.339, "stdev": 1.313, "histogram": [514, 7, 7, 11, 0, 5, 1, 15], "total_participants": 560}, "problem": {"natural_language": {"format": "latex", "text": "A set of lines in the plane is in general position if no two are parallel and no three pass through the same point. A set of lines in general position cuts the plane into regions, some of which have finite area; we call these its finite regions. Prove that for all sufficiently large $n$, in any set of $n$ lines in general position it is possible to colour at least $\\sqrt{n}$ lines blue in such a way that none of its finite regions has a completely blue boundary.", "prefix": "A set of lines in the plane is in general position if no two are parallel and no three pass through the same point. A set of lines in general position cuts the plane into regions, some of which have finite area; we call these its finite regions.", "suffix": "Prove that for all sufficiently large $n$, in any set of $n$ lines in general position it is possible to colour at least $\\sqrt{n}$ lines blue in such a way that none of its finite regions has a completely blue boundary."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ndef General_position (L : Finset (\u211d \u00d7 \u211d \u00d7 \u211d)) : Prop :=\n  (\u2200 l \u2208 L, l.1 \u2260 0 \u2228 l.2.1 \u2260 0) \u2227\n  (\u2200 l1 \u2208 L, \u2200 l2 \u2208 L, l1 \u2260 l2 \u2192 l1.1 * l2.2.1 \u2260 l1.2.1 * l2.1) \u2227\n  (\u2200 l1 \u2208 L, \u2200 l2 \u2208 L, \u2200 l3 \u2208 L, l1 \u2260 l2 \u2192 l1 \u2260 l3 \u2192 l2 \u2260 l3 \u2192\n    (\u00ac \u2203 (p : \u211d \u00d7 \u211d), l1.1 * p.1 + l1.2.1 * p.2 + l1.2.2 = 0 \u2227\n      l2.1 * p.1 + l2.2.1 * p.2 + l2.2.2 = 0 \u2227 l3.1 * p.1 + l3.2.1 * p.2 + l3.2.2 = 0))\n\ndef finite_regions (S : Set (\u211d \u00d7 \u211d)) (L : Finset (\u211d \u00d7 \u211d \u00d7 \u211d)) : Prop :=\n  S \u2260 \u2205 \u2227 (\u2203 a b : \u211d, \u2200 p \u2208 S, |p.1| \u2264 a \u2227 |p.2| \u2264 b) \u2227 (\u2200 p \u2208 S, \u2200 q \u2208 S, p \u2260 q \u2192 \u2200 l \u2208 L,\n    Real.sign (l.1 * p.1 + l.2.1 * p.2 + l.2.2) = Real.sign (l.1 * q.1 + l.2.1 * q.2 + l.2.2))\n\n\ntheorem imo_2014_p6 : \u2200\u1da0 n in Filter.atTop,\n    \u2200 (L : Finset (\u211d \u00d7 \u211d \u00d7 \u211d)), General_position L \u2227 L.card = n \u2192\n    \u2203 B \u2264 L, B.card \u2265 Nat.sqrt n \u2227 \u2200 S \u2264 B, \u2200 (R : Set (\u211d \u00d7 \u211d)), \u00acfinite_regions R S := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Consider $n \\geqslant 3$ lines in the plane such that no two lines are parallel and no three have a common point. These lines divide the plane into polygonal regions; let $\\mathcal{F}$ be the set of regions having finite area. Prove that it is possible to colour $\\lceil\\sqrt{n / 2}\\rceil$ of the lines blue in such a way that no region in $\\mathcal{F}$ has a completely blue boundary. (For a real number $x,\\lceil x\\rceil$ denotes the least integer which is not smaller than $x$.)\\\\\nSolution. Let $L$ be the given set of lines. Choose a maximal (by inclusion) subset $B \\subseteq L$ such that when we colour the lines of $B$ blue, no region in $\\mathcal{F}$ has a completely blue boundary. Let $|B|=k$. We claim that $k \\geqslant\\lceil\\sqrt{n / 2}\\rceil$.\nLet us colour all the lines of $L \\backslash B$ red. Call a point blue if it is the intersection of two blue lines. Then there are $\\binom{k}{2}$ blue points.\nNow consider any red line $\\ell$. By the maximality of $B$, there exists at least one region $A \\in \\mathcal{F}$ whose only red side lies on $\\ell$. Since $A$ has at least three sides, it must have at least one blue vertex. Let us take one such vertex and associate it to $\\ell$.\nSince each blue point belongs to four regions (some of which may be unbounded), it is associated to at most four red lines. Thus the total number of red lines is at most $4\\binom{k}{2}$. On the other hand, this number is $n-k$, so\n$$\nn-k \\leqslant 2 k(k-1), \\quad \\text { thus } \\quad n \\leqslant 2 k^{2}-k \\leqslant 2 k^{2}\n$$\nand finally $k \\geqslant\\lceil\\sqrt{n / 2}\\rceil$, which gives the desired result.\nComment 1. The constant factor in the estimate can be improved in different ways; we sketch two of them below. On the other hand, the Problem Selection Committee is not aware of any results showing that it is sometimes impossible to colour $k$ lines satisfying the desired condition for $k \\gg \\sqrt{n}$. In this situation we find it more suitable to keep the original formulation of the problem.\n\\begin{enumerate}\n\\item Firstly, we show that in the proof above one has in fact $k=|B| \\geqslant\\lceil\\sqrt{2 n / 3}\\rceil$.\n\\end{enumerate}\nLet us make weighted associations as follows. Let a region $A$ whose only red side lies on $\\ell$ have $k$ vertices, so that $k-2$ of them are blue. We associate each of these blue vertices to $\\ell$, and put the weight $\\frac{1}{k-2}$ on each such association. So the sum of the weights of all the associations is exactly $n-k$.\nNow, one may check that among the four regions adjacent to a blue vertex $v$, at most two are triangles. This means that the sum of the weights of all associations involving $v$ is at most $1+1+\\frac{1}{2}+\\frac{1}{2}=3$. This leads to the estimate\n$$\nn-k \\leqslant 3\\binom{k}{2}\n$$\nor\n$$\n2 n \\leqslant 3 k^{2}-k<3 k^{2}\n$$\nwhich yields $k \\geqslant\\lceil\\sqrt{2 n / 3}\\rceil$.\\\\\n2. Next, we even show that $k=|B| \\geqslant\\lceil\\sqrt{n}\\rceil$. For this, we specify the process of associating points to red lines in one more different way.\nCall a point red if it lies on a red line as well as on a blue line. Consider any red line $\\ell$, and take an arbitrary region $A \\in \\mathcal{F}$ whose only red side lies on $\\ell$. Let $r^{\\prime}, r, b_{1}, \\ldots, b_{k}$ be its vertices in clockwise order with $r^{\\prime}, r \\in \\ell$; then the points $r^{\\prime}, r$ are red, while all the points $b_{1}, \\ldots, b_{k}$ are blue. Let us associate to $\\ell$ the red point $r$ and the blue point $b_{1}$. One may notice that to each pair of a red point $r$ and a blue point $b$, at most one red line can be associated, since there is at most one region $A$ having $r$ and $b$ as two clockwise consecutive vertices.\nWe claim now that at most two red lines are associated to each blue point $b$; this leads to the desired bound\n$$\nn-k \\leqslant 2\\binom{k}{2} \\quad \\Longleftrightarrow \\quad n \\leqslant k^{2}\n$$\nAssume, to the contrary, that three red lines $\\ell_{1}, \\ell_{2}$, and $\\ell_{3}$ are associated to the same blue point $b$. Let $r_{1}, r_{2}$, and $r_{3}$ respectively be the red points associated to these lines; all these points are distinct. The point $b$ defines four blue rays, and each point $r_{i}$ is the red point closest to $b$ on one of these rays. So we may assume that the points $r_{2}$ and $r_{3}$ lie on one blue line passing through $b$, while $r_{1}$ lies on the other one.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]{2024_08_22_f8585be468a68da3ddc2g-36}}\n\\end{center}\nNow consider the region $A$ used to associate $r_{1}$ and $b$ with $\\ell_{1}$. Three of its clockwise consecutive vertices are $r_{1}, b$, and either $r_{2}$ or $r_{3}$ (say, $r_{2}$ ). Since $A$ has only one red side, it can only be the triangle $r_{1} b r_{2}$; but then both $\\ell_{1}$ and $\\ell_{2}$ pass through $r_{2}$, as well as some blue line. This is impossible by the problem assumptions.\nComment 2. The condition that the lines be non-parallel is essentially not used in the solution, nor in the previous comment; thus it may be omitted."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Coloring Argument"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2014-P2", "year": 2014, "problem_number": 2, "nickname": "Largest Empty Square in Peaceful Rooks", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.971, "stdev": 3.01, "histogram": [240, 32, 25, 17, 14, 39, 71, 122], "total_participants": 560}, "problem": {"natural_language": {"format": "latex", "text": "Let $n\\ge2$ be an integer. Consider an $n\\times n$ chessboard consisting of $n^2$ unit squares. A configuration of $n$ rooks on this board is $\\textit{peaceful}$ if every row and every column contains exactly one rook. Find the greatest positive integer $k$ such that, for each peaceful configuration of $n$ rooks, there is a $k\\times k$ square which does not contain a rook on any of its $k^2$ squares.", "prefix": "Let $n\\ge2$ be an integer. Consider an $n\\times n$ chessboard consisting of $n^2$ unit squares. A configuration of $n$ rooks on this board is $\\textit{peaceful}$ if every row and every column contains exactly one rook.", "suffix": "Find the greatest positive integer $k$ such that, for each peaceful configuration of $n$ rooks, there is a $k\\times k$ square which does not contain a rook on any of its $k^2$ squares."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nstructure peaceful_rooks (n : \u2115) : Type where\n  carrier :  Matrix (Fin n) (Fin n) Bool\n  is_peaceful_row : \u2200 i, List.count true (List.ofFn (fun j => carrier i j)) = 1\n  is_peaceful_col : \u2200 j, List.count true (List.ofFn (fun i => carrier i j)) = 1\nderiving Fintype\n\nnoncomputable abbrev imo_2014_p2_solution : \u2115 \u2192 \u2115 := sorry\n\n\ntheorem imo_2014_p2 (n : \u2115) (hn : n \u2265 2) :\n    IsGreatest {(k : \u2115) | (k > 0) \u2227 \u2200 r : peaceful_rooks n, \u2203 i j : Fin n,\n    i.val + k - 1 < n \u2227 i.val + k - 1 < n \u2227\n    \u2200 m n, m.val < k \u2227 n.val < k \u2192 r.carrier (i + m) (j + n) = false}\n    (imo_2014_p2_solution n) := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "Let $n \\geqslant 2$ be an integer. Consider an $n \\times n$ chessboard divided into $n^{2}$ unit squares. We call a configuration of $n$ rooks on this board happy if every row and every column contains exactly one rook. Find the greatest positive integer $k$ such that for every happy configuration of rooks, we can find a $k \\times k$ square without a rook on any of its $k^{2}$ unit squares.\\\\\nAnswer. $\\lfloor\\sqrt{n-1}\\rfloor$.\\\\\nSolution. Let $\\ell$ be a positive integer. We will show that (i) if $n>\\ell^{2}$ then each happy configuration contains an empty $\\ell \\times \\ell$ square, but (ii) if $n \\leqslant \\ell^{2}$ then there exists a happy configuration not containing such a square. These two statements together yield the answer.\\\\\n(i). Assume that $n>\\ell^{2}$. Consider any happy configuration. There exists a row $R$ containing a rook in its leftmost square. Take $\\ell$ consecutive rows with $R$ being one of them. Their union $U$ contains exactly $\\ell$ rooks. Now remove the $n-\\ell^{2} \\geqslant 1$ leftmost columns from $U$ (thus at least one rook is also removed). The remaining part is an $\\ell^{2} \\times \\ell$ rectangle, so it can be split into $\\ell$ squares of size $\\ell \\times \\ell$, and this part contains at most $\\ell-1$ rooks. Thus one of these squares is empty.\\\\\n(ii). Now we assume that $n \\leqslant \\ell^{2}$. Firstly, we will construct a happy configuration with no empty $\\ell \\times \\ell$ square for the case $n=\\ell^{2}$. After that we will modify it to work for smaller values of $n$.\nLet us enumerate the rows from bottom to top as well as the columns from left to right by the numbers $0,1, \\ldots, \\ell^{2}-1$. Every square will be denoted, as usual, by the pair $(r, c)$ of its row and column numbers. Now we put the rooks on all squares of the form $(i \\ell+j, j \\ell+i)$ with $i, j=0,1, \\ldots, \\ell-1$ (the picture below represents this arrangement for $\\ell=3$ ). Since each number from 0 to $\\ell^{2}-1$ has a unique representation of the form $i \\ell+j(0 \\leqslant i, j \\leqslant \\ell-1)$, each row and each column contains exactly one rook.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.45\\textwidth]{2024_08_22_f8585be468a68da3ddc2g-31}}\n\\end{center}\nNext, we show that each $\\ell \\times \\ell$ square $A$ on the board contains a rook. Consider such a square $A$, and consider $\\ell$ consecutive rows the union of which contains $A$. Let the lowest of these rows have number $p \\ell+q$ with $0 \\leqslant p, q \\leqslant \\ell-1$ (notice that $p \\ell+q \\leqslant \\ell^{2}-\\ell$ ). Then the rooks in this union are placed in the columns with numbers $q \\ell+p,(q+1) \\ell+p, \\ldots,(\\ell-1) \\ell+p$, $p+1, \\ell+(p+1), \\ldots,(q-1) \\ell+p+1$, or, putting these numbers in increasing order,\n$$\np+1, \\ell+(p+1), \\ldots,(q-1) \\ell+(p+1), q \\ell+p,(q+1) \\ell+p, \\ldots,(\\ell-1) \\ell+p\n$$\nOne readily checks that the first number in this list is at most $\\ell-1$ (if $p=\\ell-1$, then $q=0$, and the first listed number is $q \\ell+p=\\ell-1)$, the last one is at least $(\\ell-1) \\ell$, and the difference between any two consecutive numbers is at most $\\ell$. Thus, one of the $\\ell$ consecutive columns intersecting $A$ contains a number listed above, and the rook in this column is inside $A$, as required. The construction for $n=\\ell^{2}$ is established.\nIt remains to construct a happy configuration of rooks not containing an empty $\\ell \\times \\ell$ square for $n<\\ell^{2}$. In order to achieve this, take the construction for an $\\ell^{2} \\times \\ell^{2}$ square described above and remove the $\\ell^{2}-n$ bottom rows together with the $\\ell^{2}-n$ rightmost columns. We will have a rook arrangement with no empty $\\ell \\times \\ell$ square, but several rows and columns may happen to be empty. Clearly, the number of empty rows is equal to the number of empty columns, so one can find a bijection between them, and put a rook on any crossing of an empty row and an empty column corresponding to each other.\nComment. Part (i) allows several different proofs. E.g., in the last paragraph of the solution, it suffices to deal only with the case $n=\\ell^{2}+1$. Notice now that among the four corner squares, at least one is empty. So the rooks in its row and in its column are distinct. Now, deleting this row and column we obtain an $\\ell^{2} \\times \\ell^{2}$ square with $\\ell^{2}-1$ rooks in it. This square can be partitioned into $\\ell^{2}$ squares of size $\\ell \\times \\ell$, so one of them is empty."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Invariant", "Pigeonhole Principle"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2013-P6", "year": 2013, "problem_number": 6, "nickname": "Rooted Tree", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.296, "stdev": 1.165, "histogram": [481, 15, 6, 6, 2, 6, 4, 7], "total_participants": 527}, "problem": {"natural_language": {"format": "latex", "text": "Let $n \\geq 3$ be an integer, and consider a circle with $n+1$ equally spaced points marked on it. Consider all labellings of these points with the numbers $0,1, \\ldots, n$ such that each label is used exactly once; two such labellings are considered to be the same if one can be obtained from the other by a rotation of the circle. A labelling is called beautiful if, for any four labels $a<b<c<d$ with $a+d=b+c$, the chord joining the points labelled $a$ and $d$ does not intersect the chord joining the points labelled $b$ and $c$. Let $M$ be the number of beautiful labellings, and let $N$ be the number of ordered pairs ( $x, y$ ) of positive integers such that $x+y \\leq n$ and $\\operatorname{gcd}(x, y)=1$. Prove that $M=N+1$", "prefix": "Let $n \\geq 3$ be an integer, and consider a circle with $n+1$ equally spaced points marked on it. Consider all labellings of these points with the numbers $0,1, \\ldots, n$ such that each label is used exactly once; two such labellings are considered to be the same if one can be obtained from the other by a rotation of the circle. A labelling is called beautiful if, for any four labels $a<b<c<d$ with $a+d=b+c$, the chord joining the points labelled $a$ and $d$ does not intersect the chord joining the points labelled $b$ and $c$. Let $M$ be the number of beautiful labellings, and let $N$ be the number of ordered pairs ( $x, y$ ) of positive integers such that $x+y \\leq n$ and $\\operatorname{gcd}(x, y)=1$.", "suffix": "Prove that $M=N+1$"}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen Equiv Fintype Finset\n\ndef IsBeautiful {n} (e : Perm (Fin (n + 1))) : Prop :=\n  \u2200 \u2983a b\u2984, a < b \u2192 \u2200 \u2983c\u2984, b < c \u2192 \u2200 \u2983d\u2984, c < d \u2192 a.val + d.val = b.val + c.val \u2192\n    -- a bc d\n    e a < e b \u2227 e b < e d \u2227 e a < e c \u2227 e c < e d \u2228\n    -- d bc a\n    e d < e b \u2227 e b < e a \u2227 e d < e c \u2227 e c < e a \u2228\n    -- b ad c\n    e b < e a \u2227 e a < e c \u2227 e b < e d \u2227 e d < e c \u2228\n    -- c ad b\n    e c < e a \u2227 e a < e b \u2227 e c < e d \u2227 e d < e b \u2228\n    -- ad bc\n    e a < e b \u2227 e a < e c \u2227 e d < e b \u2227 e d < e c \u2228\n    -- bc ad\n    e b < e a \u2227 e c < e a \u2227 e b < e d \u2227 e c < e d\n\ninstance {n} : DecidablePred (IsBeautiful (n := n)) := by unfold IsBeautiful; infer_instance\n\ndef M (n : \u2115) : \u2115 := #{e : Perm (Fin (n + 1)) | IsBeautiful e} / (n + 1)\n\ndef N (n : \u2115) : \u2115 := #{xy \u2208 .Icc 1 n \u00d7\u02e2 .Icc 1 n | xy.1 + xy.2 \u2264 n \u2227 xy.1.gcd xy.2 = 1}\n\ntheorem imo_2013_p6 (n : \u2115) (hn : n \u2265 3) : M n = N n + 1 := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution C7 SL\nLet $n \\geqslant 2$ be an integer. Consider all circular arrangements of the numbers $0,1, \\ldots, n$; the $n+1$ rotations of an arrangement are considered to be equal. A circular arrangement is called beautiful if, for any four distinct numbers $0 \\leqslant a, b, c, d \\leqslant n$ with $a+c=b+d$, the chord joining numbers $a$ and $c$ does not intersect the chord joining numbers $b$ and $d$.\nLet $M$ be the number of beautiful arrangements of $0,1, \\ldots, n$. Let $N$ be the number of pairs $(x, y)$ of positive integers such that $x+y \\leqslant n$ and $\\operatorname{gcd}(x, y)=1$. Prove that\n$$\nM=N+1\n$$\nSolution 1. Given a circular arrangement of $[0, n]=\\{0,1, \\ldots, n\\}$, we define a $k$-chord to be a (possibly degenerate) chord whose (possibly equal) endpoints add up to $k$. We say that three chords of a circle are aligned if one of them separates the other two. Say that $m \\geqslant 3$ chords are aligned if any three of them are aligned. For instance, in Figure 1, $A, B$, and $C$ are aligned, while $B, C$, and $D$ are not.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.5\\textwidth]{imo2013p6a.png}}\n\\end{center}\nClaim. In a beautiful arrangement, the $k$-chords are aligned for any integer $k$.\\\\\nProof. We proceed by induction. For $n \\leqslant 3$ the statement is trivial. Now let $n \\geqslant 4$, and proceed by contradiction. Consider a beautiful arrangement $S$ where the three $k$-chords $A, B, C$ are not aligned. If $n$ is not among the endpoints of $A, B$, and $C$, then by deleting $n$ from $S$ we obtain a beautiful arrangement $S \\backslash\\{n\\}$ of $[0, n-1]$, where $A, B$, and $C$ are aligned by the induction hypothesis. Similarly, if 0 is not among these endpoints, then deleting 0 and decreasing all the numbers by 1 gives a beautiful arrangement $S \\backslash\\{0\\}$ where $A, B$, and $C$ are aligned. Therefore both 0 and $n$ are among the endpoints of these segments. If $x$ and $y$ are their respective partners, we have $n \\geqslant 0+x=k=n+y \\geqslant n$. Thus 0 and $n$ are the endpoints of one of the chords; say it is $C$.\nLet $D$ be the chord formed by the numbers $u$ and $v$ which are adjacent to 0 and $n$ and on the same side of $C$ as $A$ and $B$, as shown in Figure 2. Set $t=u+v$. If we had $t=n$, the $n$-chords $A$, $B$, and $D$ would not be aligned in the beautiful arrangement $S \\backslash\\{0, n\\}$, contradicting the induction hypothesis. If $t<n$, then the $t$-chord from 0 to $t$ cannot intersect $D$, so the chord $C$ separates $t$ and $D$. The chord $E$ from $t$ to $n-t$ does not intersect $C$, so $t$ and $n-t$ are on the same side of $C$. But then the chords $A, B$, and $E$ are not aligned in $S \\backslash\\{0, n\\}$, a contradiction. Finally, the case $t>n$ is equivalent to the case $t<n$ via the beauty-preserving relabelling $x \\mapsto n-x$ for $0 \\leqslant x \\leqslant n$, which sends $t$-chords to $(2 n-t)$-chords. This proves the Claim.\nHaving established the Claim, we prove the desired result by induction. The case $n=2$ is trivial. Now assume that $n \\geqslant 3$. Let $S$ be a beautiful arrangement of $[0, n]$ and delete $n$ to obtain\\\\\nthe beautiful arrangement $T$ of $[0, n-1]$. The $n$-chords of $T$ are aligned, and they contain every point except 0 . Say $T$ is of Type 1 if 0 lies between two of these $n$-chords, and it is of Type 2 otherwise; i.e., if 0 is aligned with these $n$-chords. We will show that each Type 1 arrangement of $[0, n-1]$ arises from a unique arrangement of $[0, n]$, and each Type 2 arrangement of $[0, n-1]$ arises from exactly two beautiful arrangements of $[0, n]$.\nIf $T$ is of Type 1 , let 0 lie between chords $A$ and $B$. Since the chord from 0 to $n$ must be aligned with $A$ and $B$ in $S, n$ must be on the other arc between $A$ and $B$. Therefore $S$ can be recovered uniquely from $T$. In the other direction, if $T$ is of Type 1 and we insert $n$ as above, then we claim the resulting arrangement $S$ is beautiful. For $0<k<n$, the $k$-chords of $S$ are also $k$-chords of $T$, so they are aligned. Finally, for $n<k<2 n$, notice that the $n$-chords of $S$ are parallel by construction, so there is an antisymmetry axis $\\ell$ such that $x$ is symmetric to $n-x$ with respect to $\\ell$ for all $x$. If we had two $k$-chords which intersect, then their reflections across $\\ell$ would be two ( $2 n-k$ )-chords which intersect, where $0<2 n-k<n$, a contradiction.\nIf $T$ is of Type 2, there are two possible positions for $n$ in $S$, on either side of 0 . As above, we check that both positions lead to beautiful arrangements of $[0, n]$.\nHence if we let $M_{n}$ be the number of beautiful arrangements of $[0, n]$, and let $L_{n}$ be the number of beautiful arrangements of $[0, n-1]$ of Type 2, we have\n$$\nM_{n}=\\left(M_{n-1}-L_{n-1}\\right)+2 L_{n-1}=M_{n-1}+L_{n-1}\n$$\nIt then remains to show that $L_{n-1}$ is the number of pairs $(x, y)$ of positive integers with $x+y=n$ and $\\operatorname{gcd}(x, y)=1$. Since $n \\geqslant 3$, this number equals $\\varphi(n)=\\#\\{x: 1 \\leqslant x \\leqslant n \\operatorname{gcd}(x, n)=1\\}$.\nTo prove this, consider a Type 2 beautiful arrangement of $[0, n-1]$. Label the positions $0, \\ldots, n-1(\\bmod n)$ clockwise around the circle, so that number 0 is in position 0 . Let $f(i)$ be the number in position $i$; note that $f$ is a permutation of $[0, n-1]$. Let $a$ be the position such that $f(a)=n-1$.\nSince the $n$-chords are aligned with 0 , and every point is in an $n$-chord, these chords are all parallel and\n$$\nf(i)+f(-i)=n \\quad \\text { for all } i\n$$\nSimilarly, since the $(n-1)$-chords are aligned and every point is in an $(n-1)$-chord, these chords are also parallel and\n$$\nf(i)+f(a-i)=n-1 \\quad \\text { for all } i\n$$\nTherefore $f(a-i)=f(-i)-1$ for all $i$; and since $f(0)=0$, we get\n\\begin{equation*}\nf(-a k)=k \\quad \\text { for all } k \\tag{1}\n\\end{equation*}\nRecall that this is an equality modulo $n$. Since $f$ is a permutation, we must have $(a, n)=1$. Hence $L_{n-1} \\leqslant \\varphi(n)$.\nTo prove equality, it remains to observe that the labeling (1) is beautiful. To see this, consider four numbers $w, x, y, z$ on the circle with $w+y=x+z$. Their positions around the circle satisfy $(-a w)+(-a y)=(-a x)+(-a z)$, which means that the chord from $w$ to $y$ and the chord from $x$ to $z$ are parallel. Thus (1) is beautiful, and by construction it has Type 2. The desired result follows.\nSolution 2. Notice that there are exactly $N$ irreducible fractions $f_{1}<\\cdots<f_{N}$ in $(0,1)$ whose denominator is at most $n$, since the pair $(x, y)$ with $x+y \\leqslant n$ and $(x, y)=1$ corresponds to the fraction $x /(x+y)$. Write $f_{i}=\\frac{a_{i}}{b_{i}}$ for $1 \\leqslant i \\leqslant N$.\nWe begin by constructing $N+1$ beautiful arrangements. Take any $\\alpha \\in(0,1)$ which is not one of the above $N$ fractions. Consider a circle of perimeter 1 . Successively mark points $0,1,2, \\ldots, n$ where 0 is arbitrary, and the clockwise distance from $i$ to $i+1$ is $\\alpha$. The point $k$ will be at clockwise distance $\\{k \\alpha\\}$ from 0 , where $\\{r\\}$ denotes the fractional part of $r$. Call such a circular arrangement cyclic and denote it by $A(\\alpha)$. If the clockwise order of the points is the same in $A\\left(\\alpha_{1}\\right)$ and $A\\left(\\alpha_{2}\\right)$, we regard them as the same circular arrangement. Figure 3 shows the cyclic arrangement $A(3 / 5+\\epsilon)$ of $[0,13]$ where $\\epsilon>0$ is very small.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]{2024_08_22_b2be671bc89b7ca62d33g-35}}\n\\end{center}\n\\begin{center}Figure 3 \\end{center}\nIf $0 \\leqslant a, b, c, d \\leqslant n$ satisfy $a+c=b+d$, then $a \\alpha+c \\alpha=b \\alpha+d \\alpha$, so the chord from $a$ to $c$ is parallel to the chord from $b$ to $d$ in $A(\\alpha)$. Hence in a cyclic arrangement all $k$-chords are parallel. In particular every cyclic arrangement is beautiful.\nNext we show that there are exactly $N+1$ distinct cyclic arrangements. To see this, let us see how $A(\\alpha)$ changes as we increase $\\alpha$ from 0 to 1 . The order of points $p$ and $q$ changes precisely when we cross a value $\\alpha=f$ such that $\\{p f\\}=\\{q f\\}$; this can only happen if $f$ is one of the $N$ fractions $f_{1}, \\ldots, f_{N}$. Therefore there are at most $N+1$ different cyclic arrangements.\nTo show they are all distinct, recall that $f_{i}=a_{i} / b_{i}$ and let $\\epsilon>0$ be a very small number. In the arrangement $A\\left(f_{i}+\\epsilon\\right)$, point $k$ lands at $\\frac{k a_{i}\\left(\\bmod b_{i}\\right)}{b_{i}}+k \\epsilon$. Therefore the points are grouped\\\\\ninto $b_{i}$ clusters next to the points $0, \\frac{1}{b_{i}}, \\ldots, \\frac{b_{i}-1}{b_{i}}$ of the circle. The cluster following $\\frac{k}{b_{i}}$ contains the numbers congruent to $k a_{i}^{-1}$ modulo $b_{i}$, listed clockwise in increasing order. It follows that the first number after 0 in $A\\left(f_{i}+\\epsilon\\right)$ is $b_{i}$, and the first number after 0 which is less than $b_{i}$ is $a_{i}^{-1}\\left(\\bmod b_{i}\\right)$, which uniquely determines $a_{i}$. In this way we can recover $f_{i}$ from the cyclic arrangement. Note also that $A\\left(f_{i}+\\epsilon\\right)$ is not the trivial arrangement where we list $0,1, \\ldots, n$ in order clockwise. It follows that the $N+1$ cyclic arrangements $A(\\epsilon), A\\left(f_{1}+\\epsilon\\right), \\ldots, A\\left(f_{N}+\\epsilon\\right)$ are distinct.\nLet us record an observation which will be useful later:\n\\begin{equation*}\n\\text { if } f_{i}<\\alpha<f_{i+1} \\text { then } 0 \\text { is immediately after } b_{i+1} \\text { and before } b_{i} \\text { in } A(\\alpha) \\text {. } \\tag{2}\n\\end{equation*}\nIndeed, we already observed that $b_{i}$ is the first number after 0 in $A\\left(f_{i}+\\epsilon\\right)=A(\\alpha)$. Similarly we see that $b_{i+1}$ is the last number before 0 in $A\\left(f_{i+1}-\\epsilon\\right)=A(\\alpha)$.\nFinally, we show that any beautiful arrangement of $[0, n]$ is cyclic by induction on $n$. For $n \\leqslant 2$ the result is clear. Now assume that all beautiful arrangements of $[0, n-1]$ are cyclic, and consider a beautiful arrangement $A$ of $[0, n]$. The subarrangement $A_{n-1}=A \\backslash\\{n\\}$ of $[0, n-1]$ obtained by deleting $n$ is cyclic; say $A_{n-1}=A_{n-1}(\\alpha)$.\nLet $\\alpha$ be between the consecutive fractions $\\frac{p_{1}}{q_{1}}<\\frac{p_{2}}{q_{2}}$ among the irreducible fractions of denominator at most $n-1$. There is at most one fraction $\\frac{i}{n}$ in $\\left(\\frac{p_{1}}{q_{1}}, \\frac{p_{2}}{q_{2}}\\right)$, since $\\frac{i}{n}<\\frac{i}{n-1} \\leqslant \\frac{i+1}{n}$ for $0<i \\leqslant n-1$.\nCase 1. There is no fraction with denominator $n$ between $\\frac{p_{1}}{q_{1}}$ and $\\frac{p_{2}}{q_{2}}$.\\\\\nIn this case the only cyclic arrangement extending $A_{n-1}(\\alpha)$ is $A_{n}(\\alpha)$. We know that $A$ and $A_{n}(\\alpha)$ can only differ in the position of $n$. Assume $n$ is immediately after $x$ and before $y$ in $A_{n}(\\alpha)$. Since the neighbors of 0 are $q_{1}$ and $q_{2}$ by (2), we have $x, y \\geqslant 1$.\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]{2024_08_22_b2be671bc89b7ca62d33g-36}}\n\\end{center}\n\\begin{center}Figure 4 \\end{center}\nIn $A_{n}(\\alpha)$ the chord from $n-1$ to $x$ is parallel and adjacent to the chord from $n$ to $x-1$, so $n-1$ is between $x-1$ and $x$ in clockwise order, as shown in Figure 4. Similarly, $n-1$ is between $y$ and $y-1$. Therefore $x, y, x-1, n-1$, and $y-1$ occur in this order in $A_{n}(\\alpha)$ and hence in $A$ (possibly with $y=x-1$ or $x=y-1$ ).\nNow, $A$ may only differ from $A_{n}(\\alpha)$ in the location of $n$. In $A$, since the chord from $n-1$ to $x$ and the chord from $n$ to $x-1$ do not intersect, $n$ is between $x$ and $n-1$. Similarly, $n$ is between $n-1$ and $y$. Then $n$ must be between $x$ and $y$ and $A=A_{n}(\\alpha)$. Therefore $A$ is cyclic as desired.\nCase 2. There is exactly one $i$ with $\\frac{p_{1}}{q_{1}}<\\frac{i}{n}<\\frac{p_{2}}{q_{2}}$.\\\\\nIn this case there exist two cyclic arrangements $A_{n}\\left(\\alpha_{1}\\right)$ and $A_{n}\\left(\\alpha_{2}\\right)$ of the numbers $0, \\ldots, n$ extending $A_{n-1}(\\alpha)$, where $\\frac{p_{1}}{q_{1}}<\\alpha_{1}<\\frac{i}{n}$ and $\\frac{i}{n}<\\alpha_{2}<\\frac{p_{2}}{q_{2}}$. In $A_{n-1}(\\alpha), 0$ is the only number between $q_{2}$ and $q_{1}$ by (2). For the same reason, $n$ is between $q_{2}$ and 0 in $A_{n}\\left(\\alpha_{1}\\right)$, and between 0 and $q_{1}$ in $A_{n}\\left(\\alpha_{2}\\right)$.\nLetting $x=q_{2}$ and $y=q_{1}$, the argument of Case 1 tells us that $n$ must be between $x$ and $y$ in $A$. Therefore $A$ must equal $A_{n}\\left(\\alpha_{1}\\right)$ or $A_{n}\\left(\\alpha_{2}\\right)$, and therefore it is cyclic.\nThis concludes the proof that every beautiful arrangement is cyclic. It follows that there are exactly $N+1$ beautiful arrangements of $[0, n]$ as we wished to show."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Induction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2013-P2", "year": 2013, "problem_number": 2, "nickname": "Colombian Configuration", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.526, "stdev": 2.836, "histogram": [229, 32, 65, 33, 22, 12, 16, 118], "total_participants": 527}, "problem": {"natural_language": {"format": "latex", "text": "A configuration of $4027$ points in the plane is called Colombian if it consists of $2013$ red points and $2014$ blue points, and no three of the points of the configuration are collinear. By drawing some lines, the plane is divided into several regions. An arrangement of lines is good for a Colombian configuration if the following two conditions are satisfied:\nno line passes through any point of the configuration;\nno region contains points of both colours.\nFind the least value of $k$ such that for any Colombian configuration of $4027$ points, there is a good arrangement of $k$ lines.", "prefix": "A configuration of $4027$ points in the plane is called Colombian if it consists of $2013$ red points and $2014$ blue points, and no three of the points of the configuration are collinear. By drawing some lines, the plane is divided into several regions. An arrangement of lines is good for a Colombian configuration if the following two conditions are satisfied:\nno line passes through any point of the configuration;\nno region contains points of both colours.", "suffix": "Find the least value of $k$ such that for any Colombian configuration of $4027$ points, there is a good arrangement of $k$ lines."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nstructure Colombian_config : Type where\n  (R B : Finset (\u211d \u00d7 \u211d))\n  (hR : R.card = 2013)\n  (hB : B.card = 2014)\n  (hC : R \u2229 B = \u2205)\n  (h_no_collinear : \u2200 p \u2208 R \u222a B, \u2200 q \u2208 R \u222a B, \u2200 r \u2208 R \u222a B, p \u2260 q \u2192 p \u2260 r \u2192 q \u2260 r \u2192\n    \u00ac \u2203 t : \u211d, t \u2260 0 \u2227 t * (q.1 - p.1) = (r.1 - p.1) \u2227 t * (q.2 - p.2) = (r.2 - p.2))\n\ndef Good_arrange (C : Colombian_config) (L : Finset (\u211d \u00d7 \u211d \u00d7 \u211d)) : Prop :=\n  (\u2200 l \u2208 L, l.1 \u2260 0 \u2228 l.2.1 \u2260 0) \u2227\n  (\u2200 p \u2208 C.R \u222a C.B, \u2200 l \u2208 L, l.1 * p.1 + l.2.1 * p.2 + l.2.2 \u2260 0) \u2227\n    \u00ac (\u2203 q \u2208 C.R, \u2203 p \u2208 C.B, \u2200 l \u2208 L,\n      Real.sign (l.1 * p.1 + l.2.1 * p.2 + l.2.2) = Real.sign (l.1 * q.1 + l.2.1 * q.2 + l.2.2))\n\nabbrev imo_2013_p2_solution : \u2115 := sorry\n\n\ntheorem imo_2013_p2 : IsLeast\n    {k | \u2200 C : Colombian_config, \u2203 L : Finset (\u211d \u00d7 \u211d \u00d7 \u211d), L.card = k \u2227 Good_arrange C L}\n    imo_2013_p2_solution := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution SL C2\nIn the plane, 2013 red points and 2014 blue points are marked so that no three of the marked points are collinear. One needs to draw $k$ lines not passing through the marked points and dividing the plane into several regions. The goal is to do it in such a way that no region contains points of both colors.\nFind the minimal value of $k$ such that the goal is attainable for every possible configuration of 4027 points.\\\\\nSolution 1. Firstly, let us present an example showing that $k \\geqslant 2013$. Mark 2013 red and 2013 blue points on some circle alternately, and mark one more blue point somewhere in the plane. The circle is thus split into 4026 arcs, each arc having endpoints of different colors. Thus, if the goal is reached, then each arc should intersect some of the drawn lines. Since any line contains at most two points of the circle, one needs at least $4026 / 2=2013$ lines.\nIt remains to prove that one can reach the goal using 2013 lines. First of all, let us mention that for every two points $A$ and $B$ having the same color, one can draw two lines separating these points from all other ones. Namely, it suffices to take two lines parallel to $A B$ and lying on different sides of $A B$ sufficiently close to it: the only two points between these lines will be $A$ and $B$.\nNow, let $P$ be the convex hull of all marked points. Two cases are possible.\\\\\nCase 1. Assume that $P$ has a red vertex $A$. Then one may draw a line separating $A$ from all the other points, pair up the other 2012 red points into 1006 pairs, and separate each pair from the other points by two lines. Thus, 2013 lines will be used.\\\\\nCase 2. Assume now that all the vertices of $P$ are blue. Consider any two consecutive vertices of $P$, say $A$ and $B$. One may separate these two points from the others by a line parallel to $A B$. Then, as in the previous case, one pairs up all the other 2012 blue points into 1006 pairs, and separates each pair from the other points by two lines. Again, 2013 lines will be used.\nComment 1. Instead of considering the convex hull, one may simply take a line containing two marked points $A$ and $B$ such that all the other marked points are on one side of this line. If one of $A$ and $B$ is red, then one may act as in Case 1; otherwise both are blue, and one may act as in Case 2 .\\\\\nSolution 2. Let us present a different proof of the fact that $k=2013$ suffices. In fact, we will prove a more general statement:\nIf n points in the plane, no three of which are collinear, are colored in red and blue arbitrarily, then it suffices to draw $n / 2\\rfloor$ lines to reach the goal.\nWe proceed by induction on $n$. If $n \\leqslant 2$ then the statement is obvious. Now assume that $n \\geqslant 3$, and consider a line $\\ell$ containing two marked points $A$ and $B$ such that all the other marked points are on one side of $\\ell$; for instance, any line containing a side of the convex hull works.\nRemove for a moment the points $A$ and $B$. By the induction hypothesis, for the remaining configuration it suffices to draw $\\lfloor n / 2\\rfloor-1$ lines to reach the goal. Now return the points $A$ and $B$ back. Three cases are possible.\\\\\nCase 1. If $A$ and $B$ have the same color, then one may draw a line parallel to $\\ell$ and separating $A$ and $B$ from the other points. Obviously, the obtained configuration of $\\lfloor n / 2\\rfloor$ lines works.\\\\\nCase 2. If $A$ and $B$ have different colors, but they are separated by some drawn line, then again the same line parallel to $\\ell$ works.\nCase 3. Finally, assume that $A$ and $B$ have different colors and lie in one of the regions defined by the drawn lines. By the induction assumption, this region contains no other points of one of the colors - without loss of generality, the only blue point it contains is $A$. Then it suffices to draw a line separating $A$ from all other points.\nThus the step of the induction is proved.\nComment 2. One may ask a more general question, replacing the numbers 2013 and 2014 by any positive integers $m$ and $n$, say with $m \\leqslant n$. Denote the answer for this problem by $f(m, n)$.\nOne may show along the lines of Solution 1 that $m \\leqslant f(m, n) \\leqslant m+1$; moreover, if $m$ is even then $f(m, n)=m$. On the other hand, for every odd $m$ there exists an $N$ such that $f(m, n)=m$ for all $m \\leqslant n \\leqslant N$, and $f(m, n)=m+1$ for all $n>N$."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Coloring Argument"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2012-P3", "year": 2012, "problem_number": 3, "nickname": "Liar's Guessing Game", "category": "combinatorics", "subcategories": ["Combinatorial Game Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.413, "stdev": 1.259, "histogram": [480, 11, 4, 31, 7, 6, 0, 8], "total_participants": 547}, "problem": {"natural_language": {"format": "latex", "text": "The liar's guessing game is a game played between two players $A$ and $B$. The rules of the game depend on two fixed positive integers $k$ and $n$ which are known to both players.\nAt the start of the game $A$ chooses integers $x$ and $N$ with $1 \\leq x \\leq N$. Player $A$ keeps $x$ secret, and truthfully tells $N$ to player $B$. Player $B$ now tries to obtain information about $x$ by asking player $A$ questions as follows: each question consists of $B$ specifying an arbitrary set $S$ of positive integers (possibly one specified in some previous question), and asking $A$ whether $x$ belongs to $S$. Player $B$ may ask as many questions as he wishes. After each question, player $A$ must immediately answer it with yes or no, but is allowed to lie as many times as she wants; the only restriction is that, among any $k+1$ consecutive answers, at least one answer must be truthful.\nAfter $B$ has asked as many questions as he wants, he must specify a set $X$ of at most $n$ positive integers. If $x$ belongs to $X$, then $B$ wins; otherwise, he loses. Prove that:\\\\\n(a) If $n \\geq 2^{k}$, then $B$ can guarantee a win.\\\\\n(b) For all sufficiently large $k$, there exists an integer $n \\geq(1.99)^{k}$ such that $B$ cannot guarantee a win.", "prefix": "The liar's guessing game is a game played between two players $A$ and $B$. The rules of the game depend on two fixed positive integers $k$ and $n$ which are known to both players.\nAt the start of the game $A$ chooses integers $x$ and $N$ with $1 \\leq x \\leq N$. Player $A$ keeps $x$ secret, and truthfully tells $N$ to player $B$. Player $B$ now tries to obtain information about $x$ by asking player $A$ questions as follows: each question consists of $B$ specifying an arbitrary set $S$ of positive integers (possibly one specified in some previous question), and asking $A$ whether $x$ belongs to $S$. Player $B$ may ask as many questions as he wishes. After each question, player $A$ must immediately answer it with yes or no, but is allowed to lie as many times as she wants; the only restriction is that, among any $k+1$ consecutive answers, at least one answer must be truthful.\nAfter $B$ has asked as many questions as he wants, he must specify a set $X$ of at most $n$ positive integers. If $x$ belongs to $X$, then $B$ wins; otherwise, he loses.", "suffix": "Prove that:\\\\\n(a) If $n \\geq 2^{k}$, then $B$ can guarantee a win.\\\\\n(b) For all sufficiently large $k$, there exists an integer $n \\geq(1.99)^{k}$ such that $B$ cannot guarantee a win."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen scoped Finset\n\nset_option autoImplicit false\n\n-- A strategy for Alice in the liar guessing game consists of:\nstructure AliceStrategy where\n  -- A natural number `N`.\n  N : \u2115\n  -- A natural number less than `N`.\n  x : Fin N\n  -- For each history, a question, in the form of a set of natural numbers.\n  nextAnswer : List (Set (Fin N) \u00d7 Bool) \u2192 Set (Fin N) \u2192 Bool\n\n-- A strategy for Bob in the liar guessing game consists of:\nstructure BobStrategy where\n  -- For each history, a question, in the form of a set of natural numbers.\n  nextQuestion N : List (Set (Fin N) \u00d7 Bool) \u2192 Set (Fin N)\n  -- For each history, a guess as to what `x` is, in the form of a small set of natural numbers.\n  guess N : List (Set (Fin N) \u00d7 Bool) \u2192 Finset (Fin N)\n\nvariable {k n : \u2115}\n\n-- The history of the game is the list of question-answer pairs asked by Bob and answered by Alice.\ndef history (A : AliceStrategy) (B : BobStrategy) : \u2115 \u2192 List (Set (Fin A.N) \u00d7 Bool)\n  | 0 => []\n  | t + 1 =>\n    (B.nextQuestion A.N (history A B t),\n      A.nextAnswer (history A B t) (B.nextQuestion A.N (history A B t)))\n        :: history A B t\n\n-- A strategy for Alice is valid if every interval of `k` consecutive answers \n-- contains some true answer.\ndef AliceStrategy.IsValid (A : AliceStrategy) (B : BobStrategy) (k : \u2115) : Prop :=\n  \u2200 t\u2080 : \u2115, \u2203 t \u2208 Finset.Ico t\u2080 (t\u2080 + k),\n    A.nextAnswer (history A B t) (B.nextQuestion A.N (history A B t))\n      = (A.x \u2208 B.nextQuestion A.N (history A B t))\n\n-- A strategy for Bob is valid at time `t` if the guessing set is of size at most `n`.\ndef BobStrategy.IsValid (A : AliceStrategy) (B : BobStrategy) (n t : \u2115) : Prop :=\n  #(B.guess A.N (history A B t)) \u2264 n\n\n-- A strategy for Bob is winning if, for all valid strategies for Alice, there is some time `t` \n-- at which the strategy for Bob is valid and `x` belongs in the guessing set.\ndef BobStrategy.IsWinning (B : BobStrategy) (k n : \u2115) : Prop :=\n  \u2200 (A : AliceStrategy), A.IsValid B k \u2192 \u2203 t, B.IsValid A n t \u2227 A.x \u2208 B.guess A.N (history A B t)\n\n\ntheorem imo_2012_p3 :\n    -- If `2 ^ k \u2264 n`, then there exists a winning strategy for Bob.\n    (\u2200 k n, 2 ^ k \u2264 n \u2192 \u2203 B : BobStrategy, B.IsWinning k n) \u2227\n    -- There exists a positive integer `k\u2080` such that for every `k \u2265 k\u2080` there exists an integer\n    -- `n \u2265 1.99 ^ k` such that no strategy for Bob is winning.\n      \u2203 k\u2080,\n        \u2200 k \u2265 k\u2080,\n          \u2203 n : \u2115, n \u2265 (1.99 : \u211d) ^ k \u2227\n            \u2200 B : BobStrategy, \u00ac B.IsWinning k n := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution  C6 SL\nLet $k$ and $n$ be fixed positive integers. In the liar's guessing game, Amy chooses integers $x$ and $N$ with $1 \\leq x \\leq N$. She tells Ben what $N$ is, but not what $x$ is. Ben may then repeatedly ask Amy whether $x \\in S$ for arbitrary sets $S$ of integers. Amy will always answer with yes or no, but she might lie. The only restriction is that she can lie at most $k$ times in a row. After he has asked as many questions as he wants, Ben must specify a set of at most $n$ positive integers. If $x$ is in this set he wins; otherwise, he loses. Prove that:\\\\\na) If $n \\geq 2^{k}$ then Ben can always win.\\\\\nb) For sufficiently large $k$ there exist $n \\geq 1.99^{k}$ such that Ben cannot guarantee a win.\nSolution. Consider an answer $A \\in\\{$ yes, no $\\}$ to a question of the kind \"Is $x$ in the set $S$ ?\" We say that $A$ is inconsistent with a number $i$ if $A=$ yes and $i \\notin S$, or if $A=n o$ and $i \\in S$. Observe that an answer inconsistent with the target number $x$ is a lie.\\\\\na) Suppose that Ben has determined a set $T$ of size $m$ that contains $x$. This is true initially with $m=N$ and $T=\\{1,2, \\ldots, N\\}$. For $m>2^{k}$ we show how Ben can find a number $y \\in T$ that is different from $x$. By performing this step repeatedly he can reduce $T$ to be of size $2^{k} \\leq n$ and thus win.\nSince only the size $m>2^{k}$ of $T$ is relevant, assume that $T=\\left\\{0,1, \\ldots, 2^{k}, \\ldots, m-1\\right\\}$. Ben begins by asking repeatedly whether $x$ is $2^{k}$. If Amy answers no $k+1$ times in a row, one of these answers is truthful, and so $x \\neq 2^{k}$. Otherwise Ben stops asking about $2^{k}$ at the first answer yes. He then asks, for each $i=1, \\ldots, k$, if the binary representation of $x$ has a 0 in the $i$ th digit. Regardless of what the $k$ answers are, they are all inconsistent with a certain number $y \\in\\left\\{0,1, \\ldots, 2^{k}-1\\right\\}$. The preceding answer yes about $2^{k}$ is also inconsistent with $y$. Hence $y \\neq x$. Otherwise the last $k+1$ answers are not truthful, which is impossible.\nEither way, Ben finds a number in $T$ that is different from $x$, and the claim is proven.\\\\\nb) We prove that if $1<\\lambda<2$ and $n=\\left\\lfloor(2-\\lambda) \\lambda^{k+1}\\right\\rfloor-1$ then Ben cannot guarantee a win. To complete the proof, then it suffices to take $\\lambda$ such that $1.99<\\lambda<2$ and $k$ large enough so that\n$$\nn=\\left\\lfloor(2-\\lambda) \\lambda^{k+1}\\right\\rfloor-1 \\geq 1.99^{k}\n$$\nConsider the following strategy for Amy. First she chooses $N=n+1$ and $x \\in\\{1,2, \\ldots, n+1\\}$ arbitrarily. After every answer of hers Amy determines, for each $i=1,2, \\ldots, n+1$, the number $m_{i}$ of consecutive answers she has given by that point that are inconsistent with $i$. To decide on her next answer, she then uses the quantity\n$$\n\\phi=\\sum_{i=1}^{n+1} \\lambda^{m_{i}}\n$$\nNo matter what Ben's next question is, Amy chooses the answer which minimizes $\\phi$.\\\\\nWe claim that with this strategy $\\phi$ will always stay less than $\\lambda^{k+1}$. Consequently no exponent $m_{i}$ in $\\phi$ will ever exceed $k$, hence Amy will never give more than $k$ consecutive answers inconsistent with some $i$. In particular this applies to the target number $x$, so she will never lie more than $k$ times in a row. Thus, given the claim, Amy's strategy is legal. Since the strategy does not depend on $x$ in any way, Ben can make no deductions about $x$, and therefore he cannot guarantee a win.\nIt remains to show that $\\phi<\\lambda^{k+1}$ at all times. Initially each $m_{i}$ is 0 , so this condition holds in the beginning due to $1<\\lambda<2$ and $n=\\left\\lfloor(2-\\lambda) \\lambda^{k+1}\\right\\rfloor-1$. Suppose that $\\phi<\\lambda^{k+1}$ at some point, and Ben has just asked if $x \\in S$ for some set $S$. According as Amy answers yes or no, the new value of $\\phi$ becomes\n$$\n\\phi_{1}=\\sum_{i \\in S} 1+\\sum_{i \\notin S} \\lambda^{m_{i}+1} \\quad \\text { or } \\quad \\phi_{2}=\\sum_{i \\in S} \\lambda^{m_{i}+1}+\\sum_{i \\notin S} 1 .\n$$\nSince Amy chooses the option minimizing $\\phi$, the new $\\phi$ will equal $\\min \\left(\\phi_{1}, \\phi_{2}\\right)$. Now we have\n$$\n\\min \\left(\\phi_{1}, \\phi_{2}\\right) \\leq \\frac{1}{2}\\left(\\phi_{1}+\\phi_{2}\\right)=\\frac{1}{2}\\left(\\sum_{i \\in S}\\left(1+\\lambda^{m_{i}+1}\\right)+\\sum_{i \\notin S}\\left(\\lambda^{m_{i}+1}+1\\right)\\right)=\\frac{1}{2}(\\lambda \\phi+n+1)\n$$\nBecause $\\phi<\\lambda^{k+1}$, the assumptions $\\lambda<2$ and $n=\\left\\lfloor(2-\\lambda) \\lambda^{k+1}\\right\\rfloor-1$ lead to\n$$\n\\min \\left(\\phi_{1}, \\phi_{2}\\right)<\\frac{1}{2}\\left(\\lambda^{k+2}+(2-\\lambda) \\lambda^{k+1}\\right)=\\lambda^{k+1}\n$$\nThe claim follows, which completes the solution.\\\\\nComment. Given a fixed $k$, let $f(k)$ denote the minimum value of $n$ for which Ben can guarantee a victory. The problem asks for a proof that for large $k$\n$$\n1.99^{k} \\leq f(k) \\leq 2^{k}\n$$\nA computer search shows that $f(k)=2,3,4,7,11,17$ for $k=1,2,3,4,5,6$."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Invariant", "Strategy Construction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2011-P4", "year": 2011, "problem_number": 4, "nickname": "N Weights on the Balance", "category": "combinatorics", "subcategories": ["Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 4.069, "stdev": 3.038, "histogram": [93, 120, 31, 16, 8, 8, 20, 267], "total_participants": 563}, "problem": {"natural_language": {"format": "latex", "text": "Let $n > 0$ be an integer. We are given a balance and $n$ weights of weight $2^0,2^1, \\cdots ,2^{n-1}$. We are to place each of the $n$ weights on the balance, one after another, in such a way that the right pan is never heavier than the left pan. At each step we choose one of the weights that has not yet been placed on the balance, and place it on either the left pan or the right pan, until all of the weights have been placed. Determine the number of ways in which this can be done.", "prefix": "Let $n > 0$ be an integer. We are given a balance and $n$ weights of weight $2^0,2^1, \\cdots ,2^{n-1}$. We are to place each of the $n$ weights on the balance, one after another, in such a way that the right pan is never heavier than the left pan. At each step we choose one of the weights that has not yet been placed on the balance, and place it on either the left pan or the right pan, until all of the weights have been placed.", "suffix": "Determine the number of ways in which this can be done."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ndef weight_of_left_pan {n : \u2115} (\u03c3 : Equiv.Perm (Fin n)) (place_left : Fin n \u2192 Bool) (step : \u2115) : \u2115 :=\n  \u2211 j with place_left j = true \u2227 \u03c3 j \u2264 step, 2 ^ j.1\n\ndef weight_of_right_pan {n : \u2115} (\u03c3 : Equiv.Perm (Fin n)) (place_left : Fin n \u2192 Bool) (step : \u2115) : \u2115 :=\n  \u2211 j with place_left j = false \u2227 \u03c3 j \u2264 step, 2 ^ j.1\n\ndef is_valid_placement {n : \u2115} (\u03c3 : Equiv.Perm (Fin n)) (place_left : Fin n \u2192 Bool) : Prop :=\n  \u2200 step : Fin n, weight_of_right_pan \u03c3 place_left step \u2264 weight_of_left_pan \u03c3 place_left step\n\ninstance {n : \u2115} (\u03c3 : Equiv.Perm (Fin n)) (place_left : Fin n \u2192 Bool) :\n  Decidable (is_valid_placement \u03c3 place_left) := by\n  simp [is_valid_placement]; infer_instance\n\nabbrev all_placements (n : \u2115) :=\n  Finset.product (@Finset.univ (Equiv.Perm (Fin n)) _) (@Finset.univ (Fin n \u2192 Bool) _)\n\nabbrev valid_placements (n : \u2115) :=\n  all_placements n |>.filter (fun (\u03c3, f) => is_valid_placement \u03c3 f)\n\nabbrev imo_2011_p4_solution : \u2115 \u2192 \u2115 := sorry\n\n\ntheorem imo_2011_p4 (n : \u2115) (hn : n > 0) :\n    (valid_placements n).card = imo_2011_p4_solution n := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution  C1 SL\nLet $n>0$ be an integer. We are given a balance and $n$ weights of weight $2^{0}, 2^{1}, \\ldots, 2^{n-1}$. In a sequence of $n$ moves we place all weights on the balance. In the first move we choose a weight and put it on the left pan. In each of the following moves we choose one of the remaining weights and we add it either to the left or to the right pan. Compute the number of ways in which we can perform these $n$ moves in such a way that the right pan is never heavier than the left pan.\nAnswer. The number $f(n)$ of ways of placing the $n$ weights is equal to the product of all odd positive integers less than or equal to $2 n-1$, i.e. $f(n)=(2 n-1)!!=1 \\cdot 3 \\cdot 5 \\cdot \\ldots \\cdot(2 n-1)$.\nSolution 1. Assume $n \\geq 2$. We claim\n\\begin{equation*}\nf(n)=(2 n-1) f(n-1) \\tag{1}\n\\end{equation*}\nFirstly, note that after the first move the left pan is always at least 1 heavier than the right one. Hence, any valid way of placing the $n$ weights on the scale gives rise, by not considering weight 1 , to a valid way of placing the weights $2,2^{2}, \\ldots, 2^{n-1}$.\nIf we divide the weight of each weight by 2 , the answer does not change. So these $n-1$ weights can be placed on the scale in $f(n-1)$ valid ways. Now we look at weight 1 . If it is put on the scale in the first move, then it has to be placed on the left side, otherwise it can be placed either on the left or on the right side, because after the first move the difference between the weights on the left pan and the weights on the right pan is at least 2 . Hence, there are exactly $2 n-1$ different ways of inserting weight 1 in each of the $f(n-1)$ valid sequences for the $n-1$ weights in order to get a valid sequence for the $n$ weights. This proves the claim.\\\\\nSince $f(1)=1$, by induction we obtain for all positive integers $n$\n$$\nf(n)=(2 n-1)!!=1 \\cdot 3 \\cdot 5 \\cdot \\ldots \\cdot(2 n-1)\n$$\nComment 1. The word \"compute\" in the statement of the problem is probably too vague. An alternative but more artificial question might ask for the smallest $n$ for which the number of valid ways is divisible by 2011. In this case the answer would be 1006.\nComment 2. It is useful to remark that the answer is the same for any set of weights where each weight is heavier than the sum of the lighter ones. Indeed, in such cases the given condition is equivalent to asking that during the process the heaviest weight on the balance is always on the left pan.\nComment 3. Instead of considering the lightest weight, one may also consider the last weight put on the balance. If this weight is $2^{n-1}$ then it should be put on the left pan. Otherwise it may be put on\\\\\nany pan; the inequality would not be violated since at this moment the heaviest weight is already put onto the left pan. In view of the previous comment, in each of these $2 n-1$ cases the number of ways to place the previous weights is exactly $f(n-1)$, which yields (1).\nSolution 2. We present a different way of obtaining (11). Set $f(0)=1$. Firstly, we find a recurrent formula for $f(n)$.\nAssume $n \\geq 1$. Suppose that weight $2^{n-1}$ is placed on the balance in the $i$-th move with $1 \\leq i \\leq n$. This weight has to be put on the left pan. For the previous moves we have $\\binom{n-1}{i-1}$ choices of the weights and from Comment 2 there are $f(i-1)$ valid ways of placing them on the balance. For later moves there is no restriction on the way in which the weights are to be put on the pans. Therefore, all $(n-i)!2^{n-i}$ ways are possible. This gives\n\\begin{equation*}\nf(n)=\\sum_{i=1}^{n}\\binom{n-1}{i-1} f(i-1)(n-i)!2^{n-i}=\\sum_{i=1}^{n} \\frac{(n-1)!f(i-1) 2^{n-i}}{(i-1)!} \\tag{2}\n\\end{equation*}\nNow we are ready to prove (1). Using $n-1$ instead of $n$ in (2) we get\n$$\nf(n-1)=\\sum_{i=1}^{n-1} \\frac{(n-2)!f(i-1) 2^{n-1-i}}{(i-1)!}\n$$\nHence, again from (2) we get\n$$\n\\begin{aligned}\nf(n)=2(n-1) \\sum_{i=1}^{n-1} & \\frac{(n-2)!f(i-1) 2^{n-1-i}}{(i-1)!}+f(n-1) \\\\\n& =(2 n-2) f(n-1)+f(n-1)=(2 n-1) f(n-1)\n\\end{aligned}\n$$\nQED.\nComment. There exist different ways of obtaining the formula (2). Here we show one of them.\\\\\nSuppose that in the first move we use weight $2^{n-i+1}$. Then the lighter $n-i$ weights may be put on the balance at any moment and on either pan. This gives $2^{n-i} \\cdot(n-1)!/(i-1)!$ choices for the moves (moments and choices of pan) with the lighter weights. The remaining $i-1$ moves give a valid sequence for the $i-1$ heavier weights and this is the only requirement for these moves, so there are $f(i-1)$ such sequences. Summing over all $i=1,2, \\ldots, n$ we again come to (2)."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Invariant"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2011-P2", "year": 2011, "problem_number": 2, "nickname": "Windmill", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.654, "stdev": 1.537, "histogram": [390, 124, 14, 2, 4, 2, 5, 22], "total_participants": 563}, "problem": {"natural_language": {"format": "latex", "text": "Let $\\mathcal{S}$ be a finite set of at least two points in the plane. Assume that no three points of $\\mathcal{S}$ are collinear. A windmill is a process that starts with a line $\\ell$ going through a single point $P \\in \\mathcal{S}$. The line rotates clockwise about the pivot $P$ until the first time that the line meets some other point belonging to $\\mathcal{S}$. This point, $Q$, takes over as the new pivot, and the line now rotates clockwise about $Q$, until it next meets a point of $\\mathcal{S}$. This process continues indefinitely.\nShow that we can choose a point $P$ in $\\mathcal{S}$ and a line $\\ell$ going through $P$ such that the resulting windmill uses each point of $\\mathcal{S}$ as a pivot infinitely many times.", "prefix": "Let $\\mathcal{S}$ be a finite set of at least two points in the plane. Assume that no three points of $\\mathcal{S}$ are collinear. A windmill is a process that starts with a line $\\ell$ going through a single point $P \\in \\mathcal{S}$. The line rotates clockwise about the pivot $P$ until the first time that the line meets some other point belonging to $\\mathcal{S}$. This point, $Q$, takes over as the new pivot, and the line now rotates clockwise about $Q$, until it next meets a point of $\\mathcal{S}$. This process continues indefinitely.", "suffix": "Show that we can choose a point $P$ in $\\mathcal{S}$ and a line $\\ell$ going through $P$ such that the resulting windmill uses each point of $\\mathcal{S}$ as a pivot infinitely many times."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen EuclideanGeometry Real Filter\n\nnamespace List\n\nvariable {\u03b1 \u03b2 : Type*}\n\n-- This is already in a later version of mathlib than the one we are depending on\n-- Whether a predicate holds for all ordered triples of elements of a list.\n@[mk_iff]\ninductive Triplewise (p : \u03b1 \u2192 \u03b1 \u2192 \u03b1 \u2192 Prop) : List \u03b1 \u2192 Prop\n  | nil : [].Triplewise p\n  | cons {a : \u03b1} {l : List \u03b1} : l.Pairwise (p a) \u2192 l.Triplewise p \u2192 (a :: l).Triplewise p\n\nend List\n\ninstance : Fact (Module.finrank \u211d (EuclideanSpace \u211d (Fin 2)) = 2) := \u27e8by simp\u27e9\n\nvariable {n} [Fintype n] [DecidableEq n]\n\n-- The value of the following doesn't matter. All that matters is that it exists\nnoncomputable instance : Module.Oriented \u211d (EuclideanSpace \u211d n) n where\n  positiveOrientation := Basis.orientation (Pi.basisFun \u211d n)\n\nstructure IsWindmillProcess (S : Set (EuclideanSpace \u211d (Fin 2)))\n    (f : \u2115 \u2192 EuclideanSpace \u211d (Fin 2)) where\n  forall_mem n : f n \u2208 S\n  oangle_le_oangle n x : x \u2208 S \u2192\n    toIocMod two_pi_pos 0 (oangle (f n) (f (n + 1)) (f (n + 2))).toReal\n      \u2264 toIocMod two_pi_pos 0 (oangle (f n) (f (n + 1)) x).toReal\n\n\ntheorem imo_2011_p2 (l : List (EuclideanSpace \u211d (Fin 2)))\n    (hl : l.Triplewise (\u00ac Collinear \u211d {\u00b7, \u00b7, \u00b7})) :\n    \u2203 f : \u2115 \u2192 EuclideanSpace \u211d (Fin 2),\n      IsWindmillProcess {x | x \u2208 l} f \u2227 \u2200 x \u2208 l, \u2203\u1da0 n in atTop, f n = x := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution  C3 SL\nLet $\\mathcal{S}$ be a finite set of at least two points in the plane. Assume that no three points of $\\mathcal{S}$ are collinear. By a windmill we mean a process as follows. Start with a line $\\ell$ going through a point $P \\in \\mathcal{S}$. Rotate $\\ell$ clockwise around the pivot $P$ until the line contains another point $Q$ of $\\mathcal{S}$. The point $Q$ now takes over as the new pivot. This process continues indefinitely, with the pivot always being a point from $\\mathcal{S}$.\nShow that for a suitable $P \\in \\mathcal{S}$ and a suitable starting line $\\ell$ containing $P$, the resulting windmill will visit each point of $\\mathcal{S}$ as a pivot infinitely often.\nSolution. Give the rotating line an orientation and distinguish its sides as the oranje side and the blue side. Notice that whenever the pivot changes from some point $T$ to another point $U$, after the change, $T$ is on the same side as $U$ was before. Therefore, the number of elements of $\\mathcal{S}$ on the oranje side and the number of those on the blue side remain the same throughout the whole process (except for those moments when the line contains two points).\\\\\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.4\\textwidth]{2024_08_22_c498132066a0c7b9aa31g-32}}\n\\end{center}\nFirst consider the case that $|\\mathcal{S}|=2 n+1$ is odd. We claim that through any point $T \\in \\mathcal{S}$, there is a line that has $n$ points on each side. To see this, choose an oriented line through $T$ containing no other point of $\\mathcal{S}$ and suppose that it has $n+r$ points on its oranje side. If $r=0$ then we have established the claim, so we may assume that $r \\neq 0$. As the line rotates through $180^{\\circ}$ around $T$, the number of points of $\\mathcal{S}$ on its oranje side changes by 1 whenever the line passes through a point; after $180^{\\circ}$, the number of points on the oranje side is $n-r$. Therefore there is an intermediate stage at which the oranje side, and thus also the blue side, contains $n$ points.\nNow select the point $P$ arbitrarily, and choose a line through $P$ that has $n$ points of $\\mathcal{S}$ on each side to be the initial state of the windmill. We will show that during a rotation over $180^{\\circ}$, the line of the windmill visits each point of $\\mathcal{S}$ as a pivot. To see this, select any point $T$ of $\\mathcal{S}$ and select a line $\\ell$ through $T$ that separates $\\mathcal{S}$ into equal halves. The point $T$ is the unique point of $\\mathcal{S}$ through which a line in this direction can separate the points of $\\mathcal{S}$ into equal halves (parallel translation would disturb the balance). Therefore, when the windmill line is parallel to $\\ell$, it must be $\\ell$ itself, and so pass through $T$.\nNext suppose that $|\\mathcal{S}|=2 n$. Similarly to the odd case, for every $T \\in \\mathcal{S}$ there is an oriented\\\\\nline through $T$ with $n-1$ points on its oranje side and $n$ points on its blue side. Select such an oriented line through an arbitrary $P$ to be the initial state of the windmill.\\\\\nWe will now show that during a rotation over $360^{\\circ}$, the line of the windmill visits each point of $\\mathcal{S}$ as a pivot. To see this, select any point $T$ of $\\mathcal{S}$ and an oriented line $\\ell$ through $T$ that separates $\\mathcal{S}$ into two subsets with $n-1$ points on its oranje and $n$ points on its blue side. Again, parallel translation would change the numbers of points on the two sides, so when the windmill line is parallel to $\\ell$ with the same orientation, the windmill line must pass through $T$.\nComment. One may shorten this solution in the following way.\\\\\nSuppose that $|\\mathcal{S}|=2 n+1$. Consider any line $\\ell$ that separates $\\mathcal{S}$ into equal halves; this line is unique given its direction and contains some point $T \\in \\mathcal{S}$. Consider the windmill starting from this line. When the line has made a rotation of $180^{\\circ}$, it returns to the same location but the oranje side becomes blue and vice versa. So, for each point there should have been a moment when it appeared as pivot, as this is the only way for a point to pass from on side to the other.\nNow suppose that $|\\mathcal{S}|=2 n$. Consider a line having $n-1$ and $n$ points on the two sides; it contains some point $T$. Consider the windmill starting from this line. After having made a rotation of $180^{\\circ}$, the windmill line contains some different point $R$, and each point different from $T$ and $R$ has changed the color of its side. So, the windmill should have passed through all the points."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Greedy Algorithm"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2010-P5", "year": 2010, "problem_number": 5, "nickname": "Six Boxes and Coins", "category": "combinatorics", "subcategories": ["Combinatorial Game Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.932, "stdev": 1.982, "histogram": [352, 85, 26, 3, 0, 2, 11, 37], "total_participants": 516}, "problem": {"natural_language": {"format": "latex", "text": "Six stacks $S_1, . . . , S_6$ of coins are standing in a row. In the beginning every stack contains\na single coin. There are two types of allowed moves:\\\\\nMove 1 : If stack Sk with $1 \\le k \\le 5$ contains at least one coin, you may remove one coin\nfrom $S_k$ and add two coins to $S_{k+1}$.\\\\\nMove 2 : If stack Sk with $1 \\le k \\le 4$ contains at least one coin, then you may remove\none coin from $S_k$ and exchange stacks $S_{k+1}$ and $S_{k+2}$.\nDecide whether it is possible to achieve by a sequence of such moves that the first five stacks\nare empty, whereas the sixth stack $S_6$ contains exactly $2010^{2010^{2010}}$ coins.", "prefix": "Six stacks $S_1, . . . , S_6$ of coins are standing in a row. In the beginning every stack contains\na single coin. There are two types of allowed moves:\\\\\nMove 1 : If stack Sk with $1 \\le k \\le 5$ contains at least one coin, you may remove one coin\nfrom $S_k$ and add two coins to $S_{k+1}$.\\\\\nMove 2 : If stack Sk with $1 \\le k \\le 4$ contains at least one coin, then you may remove\none coin from $S_k$ and exchange stacks $S_{k+1}$ and $S_{k+2}$.", "suffix": "Decide whether it is possible to achieve by a sequence of such moves that the first five stacks\nare empty, whereas the sixth stack $S_6$ contains exactly $2010^{2010^{2010}}$ coins."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nstructure Boxes where\n  (B1 B2 B3 B4 B5 B6 : \u2115)\n\ndef op11 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1 - 1, b2 + 2, b3, b4, b5, b6\u27e9\n\ndef op12 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2 - 1, b3 + 2, b4, b5, b6\u27e9\n\ndef op13 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2, b3 - 1, b4 + 2, b5, b6\u27e9\n\ndef op14 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2, b3, b4 - 1, b5 + 2, b6\u27e9\n\ndef op15 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2, b3, b4, b5 - 1, b6 + 2\u27e9\n\ndef op21 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1 - 1, b3, b2, b4, b5, b6\u27e9\n\ndef op22 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2 - 1, b4, b3, b5, b6\u27e9\n\ndef op23 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2, b3 - 1, b5, b4, b6\u27e9\n\ndef op24 : Boxes \u2192 Boxes\n  | \u27e8b1, b2, b3, b4, b5, b6\u27e9 => \u27e8b1, b2, b3, b4 - 1, b6, b5\u27e9\n\ninductive OP\n  | op11 | op12 | op13 | op14 | op15 | op21 | op22 | op23 | op24\n\ndef apply_op : OP \u2192 (Boxes \u2192 Boxes)\n  | OP.op11 => op11\n  | OP.op12 => op12\n  | OP.op13 => op13\n  | OP.op14 => op14\n  | OP.op15 => op15\n  | OP.op21 => op21\n  | OP.op22 => op22\n  | OP.op23 => op23\n  | OP.op24 => op24\n\ndef init : Boxes := \u27e81, 1, 1, 1, 1, 1\u27e9\n\nabbrev imo_2010_p5_solution : Bool := sorry\n\ntheorem imo_2010_p5 : imo_2010_p5_solution = (\u2203 seq : List OP,\n    (seq.map apply_op).foldl (\u00b7 \u2218 \u00b7) id init = \u27e80, 0, 0, 0, 0, 2010 ^ (2010 ^ 2010)\u27e9) := by sorry\n\n\ntheorem mba_challenge_6f99807f (x y : BitVec 32) :  7#32 * x - 5#32 * y - 2#32 * (x ^^^ y) - 6#32 * ~~~(x &&& ~~~x) - 5#32 * (x ||| y) - 2#32 * ~~~(x &&& y) - 1#32 * (x ||| ~~~y) + 4#32 * ~~~y - 7#32 * ~~~(x ^^^ y) + 13#32 * ~~~(x ||| y) + 21#32 * ~~~(x ||| ~~~y) + 17#32 * (x &&& y) = -5#32 * (x &&& ~~~y) + 1#32 * ~~~x := by\n  simp\n  sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution C4 SL\nSix stacks $S_{1}, \\ldots, S_{6}$ of coins are standing in a row. In the beginning every stack contains a single coin. There are two types of allowed moves:\\\\\nMove 1: If stack $S_{k}$ with $1 \\leq k \\leq 5$ contains at least one coin, you may remove one coin from $S_{k}$ and add two coins to $S_{k+1}$.\\\\\nMove 2: If stack $S_{k}$ with $1 \\leq k \\leq 4$ contains at least one coin, then you may remove one coin from $S_{k}$ and exchange stacks $S_{k+1}$ and $S_{k+2}$.\\\\\nDecide whether it is possible to achieve by a sequence of such moves that the first five stacks are empty, whereas the sixth stack $S_{6}$ contains exactly $2010^{2010^{2010}}$ coins.\nAlternative problem, but the constant $2010^{2010^{2010}}$ is replaced by $2010^{2010}$.\\\\\nSolution. Denote by $\\left(a_{1}, a_{2}, \\ldots, a_{n}\\right) \\rightarrow\\left(a_{1}^{\\prime}, a_{2}^{\\prime}, \\ldots, a_{n}^{\\prime}\\right)$ the following: if some consecutive stacks contain $a_{1}, \\ldots, a_{n}$ coins, then it is possible to perform several allowed moves such that the stacks contain $a_{1}^{\\prime}, \\ldots, a_{n}^{\\prime}$ coins respectively, whereas the contents of the other stacks remain unchanged.\nLet $A=2010^{2010}$ or $A=2010^{2010^{2010}}$, respectively. Our goal is to show that\n$$\n(1,1,1,1,1,1) \\rightarrow(0,0,0,0,0, A)\n$$\nFirst we prove two auxiliary observations.\\\\\nLemma 1. $(a, 0,0) \\rightarrow\\left(0,2^{a}, 0\\right)$ for every $a \\geq 1$.\\\\\nProof. We prove by induction that $(a, 0,0) \\rightarrow\\left(a-k, 2^{k}, 0\\right)$ for every $1 \\leq k \\leq a$. For $k=1$, apply Move 1 to the first stack:\n$$\n(a, 0,0) \\rightarrow(a-1,2,0)=\\left(a-1,2^{1}, 0\\right)\n$$\nNow assume that $k<a$ and the statement holds for some $k<a$. Starting from $\\left(a-k, 2^{k}, 0\\right)$, apply Move 1 to the middle stack $2^{k}$ times, until it becomes empty. Then apply Move 2 to the first stack:\n$$\n\\left(a-k, 2^{k}, 0\\right) \\rightarrow\\left(a-k, 2^{k}-1,2\\right) \\rightarrow \\cdots \\rightarrow\\left(a-k, 0,2^{k+1}\\right) \\rightarrow\\left(a-k-1,2^{k+1}, 0\\right)\n$$\nHence,\n$$\n(a, 0,0) \\rightarrow\\left(a-k, 2^{k}, 0\\right) \\rightarrow\\left(a-k-1,2^{k+1}, 0\\right)\n$$\nLemma 2. For every positive integer $n$, let $P_{n}=\\underbrace{2^{2 \\cdot}}_{n}$ (e.g. $P_{3}=2^{2^{2}}=16$ ). Then $(a, 0,0,0) \\rightarrow\\left(0, P_{a}, 0,0\\right)$ for every $a \\geq 1$.\\\\\nProof. Similarly to Lemma 1 , we prove that $(a, 0,0,0) \\rightarrow\\left(a-k, P_{k}, 0,0\\right)$ for every $1 \\leq k \\leq a$.\\\\\nFor $k=1$, apply Move 1 to the first stack:\n$$\n(a, 0,0,0) \\rightarrow(a-1,2,0,0)=\\left(a-1, P_{1}, 0,0\\right)\n$$\nNow assume that the lemma holds for some $k<a$. Starting from ( $a-k, P_{k}, 0,0$ ), apply Lemma 1 , then apply Move 1 to the first stack:\n$$\n\\left(a-k, P_{k}, 0,0\\right) \\rightarrow\\left(a-k, 0,2^{P_{k}}, 0\\right)=\\left(a-k, 0, P_{k+1}, 0\\right) \\rightarrow\\left(a-k-1, P_{k+1}, 0,0\\right)\n$$\nTherefore,\n$$\n(a, 0,0,0) \\rightarrow\\left(a-k, P_{k}, 0,0\\right) \\rightarrow\\left(a-k-1, P_{k+1}, 0,0\\right)\n$$\nNow we prove the statement of the problem.\\\\\nFirst apply Move 1 to stack 5 , then apply Move 2 to stacks $S_{4}, S_{3}, S_{2}$ and $S_{1}$ in this order. Then apply Lemma 2 twice:\n$$\n\\begin{gathered}\n(1,1,1,1,1,1) \\rightarrow(1,1,1,1,0,3) \\rightarrow(1,1,1,0,3,0) \\rightarrow(1,1,0,3,0,0) \\rightarrow(1,0,3,0,0,0) \\rightarrow \\\\\n\\quad \\rightarrow(0,3,0,0,0,0) \\rightarrow\\left(0,0, P_{3}, 0,0,0\\right)=(0,0,16,0,0,0) \\rightarrow\\left(0,0,0, P_{16}, 0,0\\right)\n\\end{gathered}\n$$\nWe already have more than $A$ coins in stack $S_{4}$, since\n$$\nA \\leq 2010^{2010^{2010}}<\\left(2^{11}\\right)^{2010^{2010}}=2^{11 \\cdot 2010^{2010}}<2^{2010^{2011}}<2^{\\left(2^{11}\\right)^{2011}}=2^{2^{11 \\cdot 2011}}<2^{2^{2^{15}}}<P_{16}\n$$\nTo decrease the number of coins in stack $S_{4}$, apply Move 2 to this stack repeatedly until its size decreases to $A / 4$. (In every step, we remove a coin from $S_{4}$ and exchange the empty stacks $S_{5}$ and $S_{6}$.)\n$$\n\\begin{aligned}\n\\left(0,0,0, P_{16}, 0,0\\right) \\rightarrow & \\left(0,0,0, P_{16}-1,0,0\\right) \\rightarrow\\left(0,0,0, P_{16}-2,0,0\\right) \\rightarrow \\\\\n& \\rightarrow \\cdots \\rightarrow(0,0,0, A / 4,0,0)\n\\end{aligned}\n$$\nFinally, apply Move 1 repeatedly to empty stacks $S_{4}$ and $S_{5}$ :\n$$\n(0,0,0, A / 4,0,0) \\rightarrow \\cdots \\rightarrow(0,0,0,0, A / 2,0) \\rightarrow \\cdots \\rightarrow(0,0,0,0,0, A)\n$$\nComment 1. Starting with only 4 stack, it is not hard to check manually that we can achieve at most 28 coins in the last position. However, around 5 and 6 stacks the maximal number of coins explodes. With 5 stacks it is possible to achieve more than $2^{2^{14}}$ coins. With 6 stacks the maximum is greater than $P_{P_{2^{14}}}$.\nIt is not hard to show that the numbers $2010^{2010}$ and $2010^{2010^{2010}}$ in the problem can be replaced by any nonnegative integer up to $P_{P_{2^{14}}}$.\\\\\nComment 2. The simpler variant $\\mathrm{C}^{\\prime}$ of the problem can be solved without Lemma 2:\n$$\n\\begin{aligned}\n(1,1,1,1,1,1) & \\rightarrow(0,3,1,1,1,1) \\rightarrow(0,1,5,1,1,1) \\rightarrow(0,1,1,9,1,1) \\rightarrow \\\\\n& \\rightarrow(0,1,1,1,17,1) \\rightarrow(0,1,1,1,0,35) \\rightarrow(0,1,1,0,35,0) \\rightarrow(0,1,0,35,0,0) \\rightarrow \\\\\n& \\rightarrow(0,0,35,0,0,0) \\rightarrow\\left(0,0,1,2^{34}, 0,0\\right) \\rightarrow\\left(0,0,1,0,2^{2^{34}}, 0\\right) \\rightarrow\\left(0,0,0,2^{2^{34}}, 0,0\\right) \\\\\n& \\rightarrow\\left(0,0,0,2^{2^{34}}-1,0,0\\right) \\rightarrow \\ldots \\rightarrow(0,0,0, A / 4,0,0) \\rightarrow(0,0,0,0, A / 2,0) \\rightarrow(0,0,0,0,0, A)\n\\end{aligned}\n$$"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Parity", "Monovariant"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2009-P6", "year": 2009, "problem_number": 6, "nickname": "Grasshopper", "category": "combinatorics", "subcategories": ["Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.168, "stdev": 0.851, "histogram": [540, 2, 1, 10, 6, 2, 1, 3], "total_participants": 565}, "problem": {"natural_language": {"format": "latex", "text": "Let $a_1,a_2,\\dots,a_n$ be distinct positive integers and let $M$ be a set of $n-1$ positive integers not containing $s=a_1+a_2+\\dots+a_n$.\nA grasshopper is to jump along the real axis, starting at the point $0$ and making $n$ jumps to the right with lengths $a_1,a_2,\\dots,a_n$ in some order.\nProve that the order can be chosen in such a way that the grasshopper never lands on any point in $M$.", "prefix": "Let $a_1,a_2,\\dots,a_n$ be distinct positive integers and let $M$ be a set of $n-1$ positive integers not containing $s=a_1+a_2+\\dots+a_n$.\nA grasshopper is to jump along the real axis, starting at the point $0$ and making $n$ jumps to the right with lengths $a_1,a_2,\\dots,a_n$ in some order.", "suffix": "Prove that the order can be chosen in such a way that the grasshopper never lands on any point in $M$."}, "code": [{"language": "lean4", "text": "import Mathlib.Tactic\nimport Mathlib.Data.Fin.Tuple.Sort\n\nnamespace Imo2009P6\n\ntheorem imo2009_p6 (n : \u2115) (hn : 0 < n)\n    (a : Fin n \u2192 \u2124)\n    (ainj : a.Injective)\n    (apos : \u2200 i, 0 < a i)\n    (M : Finset \u2124)\n    (Mpos : \u2200 m \u2208 M, 0 < m)\n    (Mcard : M.card = n - 1)\n    (hM : \u2211 i, a i \u2209 M)\n    : \u2203 p : Equiv.Perm (Fin n),\n        \u2200 i : Fin n,\n          \u2211 j \u2208 Finset.univ.filter (\u00b7 \u2264 i), a (p j) \u2209 M := sorry\n\n\nend Imo2009P6"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution C7 SL\nVariant 1. A grasshopper jumps along the real axis. He starts at point 0 and makes 2009 jumps to the right with lengths $1,2, \\ldots, 2009$ in an arbitrary order. Let $M$ be a set of 2008 positive integers less than $1005 \\cdot 2009$. Prove that the grasshopper can arrange his jumps in such a way that he never lands on a point from $M$.\nVariant 2. Let $n$ be a nonnegative integer. A grasshopper jumps along the real axis. He starts at point 0 and makes $n+1$ jumps to the right with pairwise different positive integral lengths $a_{1}, a_{2}, \\ldots, a_{n+1}$ in an arbitrary order. Let $M$ be a set of $n$ positive integers in the interval $(0, s)$, where $s=a_{1}+a_{2}+\\cdots+a_{n+1}$. Prove that the grasshopper can arrange his jumps in such a way that he never lands on a point from $M$.\nSolution of Variant 1. We construct the set of landing points of the grasshopper.\\\\\nCase 1. $M$ does not contain numbers divisible by 2009.\\\\\nWe fix the numbers $2009 k$ as landing points, $k=1,2, \\ldots, 1005$. Consider the open intervals $I_{k}=(2009(k-1), 2009 k), k=1,2, \\ldots, 1005$. We show that we can choose exactly one point outside of $M$ as a landing point in 1004 of these intervals such that all lengths from 1 to 2009 are realized. Since there remains one interval without a chosen point, the length 2009 indeed will appear. Each interval has length 2009, hence a new landing point in an interval yields with a length $d$ also the length $2009-d$. Thus it is enough to implement only the lengths from $D=\\{1,2, \\ldots, 1004\\}$. We will do this in a greedy way. Let $n_{k}, k=1,2, \\ldots, 1005$, be the number of elements of $M$ that belong to the interval $I_{k}$. We order these numbers in a decreasing way, so let $p_{1}, p_{2}, \\ldots, p_{1005}$ be a permutation of $\\{1,2, \\ldots, 1005\\}$ such that $n_{p_{1}} \\geq n_{p_{2}} \\geq \\cdots \\geq n_{p_{1005}}$. In $I_{p_{1}}$ we do not choose a landing point. Assume that landing points have already been chosen in the intervals $I_{p_{2}}, \\ldots, I_{p_{m}}$ and the lengths $d_{2}, \\ldots, d_{m}$ from $D$ are realized, $m=1, \\ldots, 1004$. We show that there is some $d \\in D \\backslash\\left\\{d_{2}, \\ldots, d_{m}\\right\\}$ that can be implemented with a new landing point in $I_{p_{m+1}}$. Assume the contrary. Then the $1004-(m-1)$ other lengths are obstructed by the $n_{p_{m+1}}$ points of $M$ in $I_{p_{m+1}}$. Each length $d$ can be realized by two landing points, namely $2009\\left(p_{m+1}-1\\right)+d$ and $2009 p_{m+1}-d$, hence\n\\begin{equation*}\nn_{p_{m+1}} \\geq 2(1005-m) \\tag{1}\n\\end{equation*}\nMoreover, since $|M|=2008=n_{1}+\\cdots+n_{1005}$,\n\\begin{equation*}\n2008 \\geq n_{p_{1}}+n_{p_{2}}+\\cdots+n_{p_{m+1}} \\geq(m+1) n_{p_{m+1}} \\tag{2}\n\\end{equation*}\nConsequently, by (1) and (2),\n$$\n2008 \\geq 2(m+1)(1005-m)\n$$\nThe right hand side of the last inequality obviously attains its minimum for $m=1004$ and this minimum value is greater than 2008, a contradiction.\\\\\nCase 2. $M$ does contain a number $\\mu$ divisible by 2009 .\\\\\nBy the pigeonhole principle there exists some $r \\in\\{1, \\ldots, 2008\\}$ such that $M$ does not contain numbers with remainder $r$ modulo 2009. We fix the numbers $2009(k-1)+r$ as landing points, $k=1,2, \\ldots, 1005$. Moreover, $1005 \\cdot 2009$ is a landing point. Consider the open intervals\\\\\n$I_{k}=(2009(k-1)+r, 2009 k+r), k=1,2, \\ldots, 1004$. Analogously to Case 1 , it is enough to show that we can choose in 1003 of these intervals exactly one landing point outside of $M \\backslash\\{\\mu\\}$ such that each of the lengths of $D=\\{1,2, \\ldots, 1004\\} \\backslash\\{r\\}$ are implemented. Note that $r$ and $2009-r$ are realized by the first and last jump and that choosing $\\mu$ would realize these two differences again. Let $n_{k}, k=1,2, \\ldots, 1004$, be the number of elements of $M \\backslash\\{\\mu\\}$ that belong to the interval $I_{k}$ and $p_{1}, p_{2}, \\ldots, p_{1004}$ be a permutation of $\\{1,2, \\ldots, 1004\\}$ such that $n_{p_{1}} \\geq n_{p_{2}} \\geq \\cdots \\geq n_{p_{1004}}$. With the same reasoning as in Case 1 we can verify that a greedy choice of the landing points in $I_{p_{2}}, I_{p_{3}}, \\ldots, I_{p_{1004}}$ is possible. We only have to replace (1) by\n$$\nn_{p_{m+1}} \\geq 2(1004-m)\n$$\n( $D$ has one element less) and (2) by\n$$\n2007 \\geq n_{p_{1}}+n_{p_{2}}+\\cdots+n_{p_{m+1}} \\geq(m+1) n_{p_{m+1}}\n$$\nComment. The cardinality 2008 of $M$ in the problem is the maximum possible value. For $M=\\{1,2, \\ldots, 2009\\}$, the grasshopper necessarily lands on a point from $M$.\nSolution of Variant 2. First of all we remark that the statement in the problem implies a strengthening of itself: Instead of $|M|=n$ it is sufficient to suppose that $|M \\cap(0, s-\\bar{a}]| \\leq n$, where $\\bar{a}=\\min \\left\\{a_{1}, a_{2}, \\ldots, a_{n+1}\\right\\}$. This fact will be used in the proof.\\\\\nWe prove the statement by induction on $n$. The case $n=0$ is obvious. Let $n>0$ and let the assertion be true for all nonnegative integers less than $n$. Moreover let $a_{1}, a_{2}, \\ldots, a_{n+1}, s$ and $M$ be given as in the problem. Without loss of generality we may assume that $a_{n+1}<a_{n}<$ $\\cdots<a_{2}<a_{1}$. Set\n$$\nT_{k}=\\sum_{i=1}^{k} a_{i} \\quad \\text { for } k=0,1, \\ldots, n+1\n$$\nNote that $0=T_{0}<T_{1}<\\cdots<T_{n+1}=s$. We will make use of the induction hypothesis as follows:\nClaim 1. It suffices to show that for some $m \\in\\{1,2, \\ldots, n+1\\}$ the grasshopper is able to do at least $m$ jumps without landing on a point of $M$ and, in addition, after these $m$ jumps he has jumped over at least $m$ points of $M$.\\\\\nProof. Note that $m=n+1$ is impossible by $|M|=n$. Now set $n^{\\prime}=n-m$. Then $0 \\leq n^{\\prime}<n$. The remaining $n^{\\prime}+1$ jumps can be carried out without landing on one of the remaining at most $n^{\\prime}$ forbidden points by the induction hypothesis together with a shift of the origin. This proves the claim.\nAn integer $k \\in\\{1,2, \\ldots, n+1\\}$ is called smooth, if the grasshopper is able to do $k$ jumps with the lengths $a_{1}, a_{2}, \\ldots, a_{k}$ in such a way that he never lands on a point of $M$ except for the very last jump, when he may land on a point of $M$.\\\\\nObviously, 1 is smooth. Thus there is a largest number $k^{*}$, such that all the numbers $1,2, \\ldots, k^{*}$ are smooth. If $k^{*}=n+1$, the proof is complete. In the following let $k^{*} \\leq n$.\\\\\nClaim 2. We have\n\\begin{equation*}\nT_{k^{*}} \\in M \\quad \\text { and } \\quad\\left|M \\cap\\left(0, T_{k^{*}}\\right)\\right| \\geq k^{*} \\tag{3}\n\\end{equation*}\nProof. In the case $T_{k^{*}} \\notin M$ any sequence of jumps that verifies the smoothness of $k^{*}$ can be extended by appending $a_{k^{*}+1}$, which is a contradiction to the maximality of $k^{*}$. Therefore we have $T_{k^{*}} \\in M$. If $\\left|M \\cap\\left(0, T_{k^{*}}\\right)\\right|<k^{*}$, there exists an $l \\in\\left\\{1,2, \\ldots, k^{*}\\right\\}$ with $T_{k^{*}+1}-a_{l} \\notin M$. By the induction hypothesis with $k^{*}-1$ instead of $n$, the grasshopper is able to reach $T_{k^{*}+1}-a_{l}$\\\\\nwith $k^{*}$ jumps of lengths from $\\left\\{a_{1}, a_{2}, \\ldots, a_{k^{*}+1}\\right\\} \\backslash\\left\\{a_{l}\\right\\}$ without landing on any point of $M$. Therefore $k^{*}+1$ is also smooth, which is a contradiction to the maximality of $k^{*}$. Thus Claim 2 is proved.\\\\\nNow, by Claim 2, there exists a smallest integer $\\bar{k} \\in\\left\\{1,2, \\ldots, k^{*}\\right\\}$ with\n$$\nT_{\\bar{k}} \\in M \\quad \\text { and } \\quad\\left|M \\cap\\left(0, T_{\\bar{k}}\\right)\\right| \\geq \\bar{k}\n$$\nClaim 3. It is sufficient to consider the case\n\\begin{equation*}\n\\left|M \\cap\\left(0, T_{\\bar{k}-1}\\right]\\right| \\leq \\bar{k}-1 \\tag{4}\n\\end{equation*}\nProof. If $\\bar{k}=1$, then (4) is clearly satisfied. In the following let $\\bar{k}>1$. If $T_{\\bar{k}-1} \\in M$, then (4) follows immediately by the minimality of $\\bar{k}$. If $T_{\\bar{k}-1} \\notin M$, by the smoothness of $\\bar{k}-1$, we obtain a situation as in Claim 1 with $m=\\bar{k}-1$ provided that $\\mid M \\cap\\left(0, T_{\\bar{k}-1}|| \\geq \\bar{k}-1\\right.$. Hence, we may even restrict ourselves to $\\mid M \\cap\\left(0, T_{\\bar{k}-1} \\mid \\leq \\bar{k}-2\\right.$ in this case and Claim 3 is proved.\\\\\nChoose an integer $v \\geq 0$ with $\\left|M \\cap\\left(0, T_{\\bar{k}}\\right)\\right|=\\bar{k}+v$. Let $r_{1}>r_{2}>\\cdots>r_{l}$ be exactly those indices $r$ from $\\{\\bar{k}+1, \\bar{k}+2, \\ldots, n+1\\}$ for which $T_{\\bar{k}}+a_{r} \\notin M$. Then\n$$\nn=|M|=\\left|M \\cap\\left(0, T_{\\bar{k}}\\right)\\right|+1+\\left|M \\cap\\left(T_{\\bar{k}}, s\\right)\\right| \\geq \\bar{k}+v+1+(n+1-\\bar{k}-l)\n$$\nand consequently $l \\geq v+2$. Note that\\\\\n$T_{\\bar{k}}+a_{r_{1}}-a_{1}<T_{\\bar{k}}+a_{r_{1}}-a_{2}<\\cdots<T_{\\bar{k}}+a_{r_{1}}-a_{\\bar{k}}<T_{\\bar{k}}+a_{r_{2}}-a_{\\bar{k}}<\\cdots<T_{\\bar{k}}+a_{r_{v+2}}-a_{\\bar{k}}<T_{\\bar{k}}$\\\\\nand that this are $\\bar{k}+v+1$ numbers from $\\left(0, T_{\\bar{k}}\\right)$. Therefore we find some $r \\in\\{\\bar{k}+1, \\bar{k}+$ $2, \\ldots, n+1\\}$ and some $s \\in\\{1,2, \\ldots, \\bar{k}\\}$ with $T_{\\bar{k}}+a_{r} \\notin M$ and $T_{\\bar{k}}+a_{r}-a_{s} \\notin M$. Consider the set of jump lengths $B=\\left\\{a_{1}, a_{2}, \\ldots, a_{\\bar{k}}, a_{r}\\right\\} \\backslash\\left\\{a_{s}\\right\\}$. We have\n$$\n\\sum_{x \\in B} x=T_{\\bar{k}}+a_{r}-a_{s}\n$$\nand\n$$\nT_{\\bar{k}}+a_{r}-a_{s}-\\min (B)=T_{\\bar{k}}-a_{s} \\leq T_{\\bar{k}-1}\n$$\nBy (4) and the strengthening, mentioned at the very beginning with $\\bar{k}-1$ instead of $n$, the grasshopper is able to reach $T_{\\bar{k}}+a_{r}-a_{s}$ by $\\bar{k}$ jumps with lengths from $B$ without landing on any point of $M$. From there he is able to jump to $T_{\\bar{k}}+a_{r}$ and therefore we reach a situation as in Claim 1 with $m=\\bar{k}+1$, which completes the proof."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Induction"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2008-P5", "year": 2008, "problem_number": 5, "nickname": "2N Lamps and Sequences of Steps", "category": "combinatorics", "subcategories": ["Combinatorics on Words/Sequences"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 2.077, "stdev": 2.933, "histogram": [295, 58, 33, 11, 1, 4, 1, 132], "total_participants": 535}, "problem": {"natural_language": {"format": "latex", "text": "Let $n$ and $k$ be positive integers with $k \\geq n$ and $k-n$ an even number. There are $2 n$ lamps labelled $1,2, \\ldots, 2 n$ each of which can be either on or off. Initially all the lamps are off. We consider sequences of steps: at each step one of the lamps is switched (from on to off or from off to on). Let $N$ be the number of such sequences consisting of $k$ steps and resulting in the state where lamps 1 through $n$ are all on, and lamps $n+1$ through $2 n$ are all off. Let $M$ be number of such sequences consisting of $k$ steps, resulting in the state where lamps 1 through $n$ are all on, and lamps $n+1$ through $2 n$ are all off, but where none of the lamps $n+1$ through $2 n$ is ever switched on. Determine $\\frac{N}{M}$.", "prefix": "Let $n$ and $k$ be positive integers with $k \\geq n$ and $k-n$ an even number. There are $2 n$ lamps labelled $1,2, \\ldots, 2 n$ each of which can be either on or off. Initially all the lamps are off. We consider sequences of steps: at each step one of the lamps is switched (from on to off or from off to on). Let $N$ be the number of such sequences consisting of $k$ steps and resulting in the state where lamps 1 through $n$ are all on, and lamps $n+1$ through $2 n$ are all off. Let $M$ be number of such sequences consisting of $k$ steps, resulting in the state where lamps 1 through $n$ are all on, and lamps $n+1$ through $2 n$ are all off, but where none of the lamps $n+1$ through $2 n$ is ever switched on.", "suffix": "Determine $\\frac{N}{M}$."}, "code": [{"language": "lean4", "text": "import Mathlib.Tactic\nimport Mathlib.Data.Set.Card\n\n\nnamespace Imo2008P5\n\nabbrev Sequence (n k : \u2115) := Fin k \u2192 Fin (2 * n)\n\nabbrev NSequence (n k : \u2115) (f : Sequence n k) : Prop :=\n  (\u2200 i < n, Odd (Nat.card { j | f j = i })) \u2227\n  (\u2200 i, n \u2264 i \u2192 i < 2 * n \u2192 Even (Nat.card { j | f j = i }))\n\nabbrev MSequence (n k : \u2115) (f : Sequence n k) : Prop :=\n  NSequence n k f \u2227\n  (\u2200 i : Fin (2 * n), n \u2264 i \u2192 \u2200 j : Fin k, f j \u2260 i)\n\n/- determine -/ abbrev solution (n k : \u2115) : \u211a := sorry\n\ntheorem imo2008_p5 (n k : \u2115) (hn : 0 < n)\n    (hnk : n \u2264 k) (he : Even (k - n))\n    : Set.ncard (MSequence n k) * solution n k = Set.ncard (NSequence n k) := sorry\n\n\nend Imo2008P5"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% Solution C4 SL\nA sequence of $k$ switches ending in the state as described in the problem statement (lamps $1, \\ldots, n$ on, lamps $n+1, \\ldots, 2 n$ off) will be called an admissible process. If, moreover, the process does not touch the lamps $n+1, \\ldots, 2 n$, it will be called restricted. So there are $N$ admissible processes, among which $M$ are restricted.\nIn every admissible process, restricted or not, each one of the lamps $1, \\ldots, n$ goes from off to on, so it is switched an odd number of times; and each one of the lamps $n+1, \\ldots, 2 n$ goes from off to off, so it is switched an even number of times.\nNotice that $M>0$; i.e., restricted admissible processes do exist (it suffices to switch each one of the lamps $1, \\ldots, n$ just once and then choose one of them and switch it $k-n$ times, which by hypothesis is an even number).\nConsider any restricted admissible process $\\mathbf{p}$. Take any lamp $\\ell, 1 \\leq \\ell \\leq n$, and suppose that it was switched $k_{\\ell}$ times. As noticed, $k_{\\ell}$ must be odd. Select arbitrarily an even number of these $k_{\\ell}$ switches and replace each of them by the switch of lamp $n+\\ell$. This can be done in $2^{k_{\\ell}-1}$ ways (because a $k_{\\ell}$-element set has $2^{k_{\\ell}-1}$ subsets of even cardinality). Notice that $k_{1}+\\cdots+k_{n}=k$.\nThese actions are independent, in the sense that the action involving lamp $\\ell$ does not affect the action involving any other lamp. So there are $2^{k_{1}-1} \\cdot 2^{k_{2}-1} \\cdots 2^{k_{n}-1}=2^{k-n}$ ways of combining these actions. In any of these combinations, each one of the lamps $n+1, \\ldots, 2 n$ gets switched an even number of times and each one of the lamps $1, \\ldots, n$ remains switched an odd number of times, so the final state is the same as that resulting from the original process $\\mathbf{p}$.\nThis shows that every restricted admissible process $\\mathbf{p}$ can be modified in $2^{k-n}$ ways, giving rise to $2^{k-n}$ distinct admissible processes (with all lamps allowed).\nNow we show that every admissible process $\\mathbf{q}$ can be achieved in that way. Indeed, it is enough to replace every switch of a lamp with a label $\\ell>n$ that occurs in $\\mathbf{q}$ by the switch of the corresponding lamp $\\ell-n$; in the resulting process $\\mathbf{p}$ the lamps $n+1, \\ldots, 2 n$ are not involved.\nSwitches of each lamp with a label $\\ell>n$ had occurred in $\\mathbf{q}$ an even number of times. So the performed replacements have affected each lamp with a label $\\ell \\leq n$ also an even number of times; hence in the overall effect the final state of each lamp has remained the same. This means that the resulting process $\\mathbf{p}$ is admissible - and clearly restricted, as the lamps $n+1, \\ldots, 2 n$ are not involved in it any more.\nIf we now take process $\\mathbf{p}$ and reverse all these replacements, then we obtain process $\\mathbf{q}$. These reversed replacements are nothing else than the modifications described in the foregoing paragraphs.\nThus there is a one-to- $\\left(2^{k-n}\\right)$ correspondence between the $M$ restricted admissible processes and the total of $N$ admissible processes. Therefore $N / M=2^{k-n}$."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2007-P3", "year": 2007, "problem_number": 3, "nickname": "Clique Rooms", "category": "combinatorics", "subcategories": ["Graph Theory", "Extremal Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.304, "stdev": 0.868, "histogram": [437, 42, 23, 11, 3, 1, 1, 2], "total_participants": 520}, "problem": {"natural_language": {"format": "latex", "text": "In a mathematical competition some competitors are friends; friendship is always mutual. Call a group of competitors a clique if each two of them are friends. The number of members in a clique is called its size.\nIt is known that the largest size of cliques is even. Prove that the competitors can be arranged in two rooms such that the largest size of cliques in one room is the same as the largest size of cliques in the other room.", "prefix": "In a mathematical competition some competitors are friends; friendship is always mutual. Call a group of competitors a clique if each two of them are friends. The number of members in a clique is called its size.\nIt is known that the largest size of cliques is even.", "suffix": "Prove that the competitors can be arranged in two rooms such that the largest size of cliques in one room is the same as the largest size of cliques in the other room."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ntheorem imo_2007_p3 {player : Type} [Fintype player] (math_competiton : SimpleGraph player)\n    (h : Even math_competiton.cliqueNum) :\n    \u2203 a : SimpleGraph.Subgraph math_competiton, a.coe.cliqueNum = a\u1d9c.coe.cliqueNum := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "\\textbf{Solution.}\nWe present an algorithm to arrange the competitors. Let the two rooms be Room~A and Room~B. We start with an initial arrangement, and then we modify it several times by sending one person to the other room. At any state of the algorithm, $A$ and $B$ denote the sets of the competitors in the rooms, and $c(A)$ and $c(B)$ denote the largest sizes of cliques in the rooms, respectively.\n\\textit{Step 1.} Let $M$ be one of the cliques of largest size, $|M|=2m$. Send all members of $M$ to Room~A and all other competitors to Room~B.\nSince $M$ is a clique of the largest size, we have $c(A)=|M|\\ge c(B)$.\n\\textit{Step 2.} While $c(A)>c(B)$, send one person from Room~A to Room~B.\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{07step2_.png}\n\\end{center}\nNote that $c(A)>c(B)$ implies that Room A is not empty.\nIn each step, $c(A)$ decreases by~$1$ and $c(B)$ increases by at most~$1$. So at the end we have $c(A)\\le c(B)\\le c(A)+1$.\nWe also have $c(A)=|A|\\ge m$ at the end. Otherwise we would have at least $m+1$ members of $M$ in Room B and at most $m-1$ in Room A, implying $c(B)-c(A)\\ge (m+1)-(m-1)=2$.\n\\textit{Step 3.} Let $k=c(A)$. If $c(B)=k$ then \\textsc{stop}.\nIf we reached $c(A)=c(B)=k$ then we have found the desired arrangement.\nIn all other cases we have $c(B)=k+1$.\nFrom the estimate above we also know that $k=|A|=|A\\cap M|\\ge m$ and $|B\\cap M|\\le m$.\n\\textit{Step 4.} If there exists a competitor $x\\in B\\cap M$ and a clique $C\\subset B$ such that $|C|=k+1$ and $x\\notin C$, then move $x$ to Room~A and \\textsc{stop}.\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{07step4_.png}\n\\end{center}\nAfter moving $x$ back to Room~A, we will have $k+1$ members of $M$ in Room A, thus $c(A)=k+1$. Due to $x\\notin C$, $c(B)=|C|$ is not decreased, and after this step we have $c(A)=c(B)=k+1$.\nIf there is no such competitor $x$, then in Room B, all cliques of size $k+1$ contain $B\\cap M$ as a subset.\n\\textit{Step 5.} While $c(B)=k+1$, choose a clique $C\\subset B$ such that $|C|=k+1$ and move one member of $C\\setminus M$ to Room~A.\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{07step5_1_.png}\n\\end{center}\nNote that $|C|=k+1>m\\ge |B\\cap M|$, so $C\\setminus M$ cannot be empty.\nEvery time we move a single person from Room B to Room A, so $c(B)$ decreases by at most~$1$. Hence, at the end of this loop we have $c(B)=k$.\nIn Room A we have the clique $A\\cap M$ with size $|A\\cap M|=k$ thus $c(A)\\ge k$. We prove that there is no clique of larger size there. Let $Q\\subset A$ be an arbitrary clique. We show that $|Q|\\le k$.\n\\begin{center}\n\\includegraphics[width=0.5\\textwidth]{07step5_2_.png}\n\\end{center}\nIn Room A, and specially in set $Q$, there can be two types of competitors:\n\u2013 Some members of $M$. Since $M$ is a clique, they are friends with all members of $B\\cap M$.\n\u2013 Competitors which were moved to Room A in Step 5. Each of them has been in a clique with $B\\cap M$ so they are also friends with all members of $B\\cap M$.\nHence, all members of $Q$ are friends with all members of $B\\cap M$. Sets $Q$ and $B\\cap M$ are cliques themselves, so $Q\\cup(B\\cap M)$ is also a clique. Since $M$ is a clique of the largest size,\n\\[\n|M|\\ge |Q\\cup(B\\cap M)|=|Q|+|B\\cap M|=|Q|+|M|-|A\\cap M| ,\n\\]\ntherefore\n\\[\n|Q|\\le |A\\cap M|=k .\n\\]\nFinally, after Step 5 we have $c(A)=c(B)=k$.\n\\textit{Comment.} Obviously, the statement is false without the assumption that the largest clique size is even."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Extremal Principle", "Pigeonhole Principle", "Double Counting"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2006-P2", "year": 2006, "problem_number": 2, "nickname": "Maximum Isosceles Triangles with 2 Good Sides", "category": "combinatorics", "subcategories": ["Combinatorial Geometry", "Graph Theory", "Enumerative Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 1.833, "stdev": 2.5, "histogram": [176, 210, 0, 3, 15, 8, 8, 78], "total_participants": 498}, "problem": {"natural_language": {"format": "latex", "text": "Let $P$ be a regular $2006$-gon. A diagonal of $P$ is called \\emph{good} if its endpoints divide the boundary of $P$ into two parts, each composed of an odd number of sides of $P$. The sides of $P$ are also called \\emph{good}.\n\\\\\n\\\\\nSuppose $P$ has been dissected into triangles by $2003$ diagonals, no two of which have a common point in the interior of $P$.\n\\\\\n\\\\\nFind the maximum number of isosceles triangles having two good sides that could appear in such a configuration.", "prefix": "Let $P$ be a regular $2006$-gon. A diagonal of $P$ is called \\emph{good} if its endpoints divide the boundary of $P$ into two parts, each composed of an odd number of sides of $P$. The sides of $P$ are also called \\emph{good}.\n\\\\\n\\\\\nSuppose $P$ has been dissected into triangles by $2003$ diagonals, no two of which have a common point in the interior of $P$.", "suffix": "Find the maximum number of isosceles triangles having two good sides that could appear in such a configuration."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen scoped Classical Finset\n\ninstance {N : \u2115} : CircularOrder (Fin N) := LinearOrder.toCircularOrder _\n\nvariable {\u03b1 : Type*} [CircularOrder \u03b1] {a b c d : \u03b1}\n\n-- In a circular order, the property that `a, b, c, d` are in that order.\ndef SBtw\u2084 (a b c d : \u03b1) : Prop := sbtw a b c \u2227 sbtw c d a\n\nlemma sbtw\u2084_swap : SBtw\u2084 a b c d \u2194 SBtw\u2084 c d a b := and_comm\n\nvariable {N : \u2115}\n\n-- The diagonals of the `N`-gon.\nabbrev Diagonal (N : \u2115) := {e : Sym2 (Fin N) // \u00ac e.IsDiag}\n\nnamespace Diagonal\n\ndef Intersect (d\u2081 d\u2082 : Diagonal N) : Prop :=\n  Sym2.lift\u2082 {\n    val a b c d := SBtw\u2084 a c b d \u2228 SBtw\u2084 a d b c\n    property a b c d := by\n      simp only [eq_iff_iff]; constructor <;> rw [sbtw\u2084_swap, or_comm, sbtw\u2084_swap]\n  } d\u2081.1 d\u2082.1\n\ndef Good (d : Diagonal N) : Prop :=\n  Sym2.lift {\n    val a b := Odd (a.val + b.val : \u2115)\n    property a b := by simp [add_comm]\n  } d.1\n\nend Diagonal\n\n-- if a collection of `2N - 3` distinct diagonal are pairwise non-intersecting, they dissect the\n-- N-gon\nstructure TriangleDissection (N : \u2115) where\n  diagonals : Fin (2 * N - 3) \u21aa Diagonal N\n  pairwise_not_intersect_diagonals : Pairwise fun i j \u21a6 \u00ac (diagonals i).Intersect (diagonals j)\n\nnoncomputable def TriangleDissection.numOfIsoscelesTriangle (C : TriangleDissection N) : \u2115 := by\n  classical exact\n  #{(a, b, c) : Fin N \u00d7 Fin N \u00d7 Fin N |\n    \u2203 (hab : a < b) (hbc : b < c),\n      -- The edges of the triangle belong to the diagonals\n      (\u2203 i, C.diagonals i = s(a, b)) \u2227\n      (\u2203 i, C.diagonals i = s(b, c)) \u2227\n      (\u2203 i, C.diagonals i = s(c, a)) \u2227\n      -- The triangle has two good diagonals\n      ( Diagonal.Good \u27e8s(a, b), by simpa using hab.ne\u27e9 \u2227\n        Diagonal.Good \u27e8s(b, c), by simpa using hbc.ne\u27e9 \u2228\n        Diagonal.Good \u27e8s(b, c), by simpa using hbc.ne\u27e9 \u2227\n        Diagonal.Good \u27e8s(c, a), by simpa using (hab.trans hbc).ne'\u27e9 \u2228\n        Diagonal.Good \u27e8s(c, a), by simpa using (hab.trans hbc).ne'\u27e9 \u2227\n        Diagonal.Good \u27e8s(a, b), by simpa using hab.ne\u27e9) \u2227\n      -- The triangle has two sides of equal length\n      ((b.val - a.val : \u2124) = c.val - b.val \u2228\n       (c.val - b.val : \u2124) = N + a.val - c.val \u2228\n       (N + a.val - c.val : \u2124) = b.val - a.val)}\n\nabbrev imo_2006_p2_solution : \u2115 := sorry\n\n\ntheorem imo_2006_p2 :\n    IsGreatest {k | \u2203 c : TriangleDissection 2006, c.numOfIsoscelesTriangle = k}\n      imo_2006_p2_solution :=  by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% \\begin{center}\n% \\includegraphics[width=0.5\\textwidth]{06p2s1_.png}\n% \\end{center}\nSolution 1. Call an isosceles triangle \\emph{odd} if it has two odd sides. Suppose we are given a dissection as in the problem statement. A triangle in the dissection which is odd and isosceles will be called \\emph{iso-odd} for brevity.\\\\\\\\Lemma. Let $AB$ be one of the dissecting diagonals and let $L$ be the shorter part of the boundary of the $2006$-gon with endpoints $A,B$. Suppose that $L$ consists of $n$ segments. Then the number of iso-odd triangles with vertices on $L$ does not exceed $n/2$.\\\\\\\\Proof. This is obvious for $n=2$. Take $n$ with $2<n\\le1003$ and assume the claim to be true for every $L$ of length less than $n$. Let now $L$ (endpoints $A,B$) consist of $n$ segments. Let $PQ$ be the longest diagonal which is a side of an iso-odd triangle $PQS$ with all vertices on $L$ (if there is no such triangle, there is nothing to prove). Every triangle whose vertices lie on $L$ is obtuse or right-angled; thus $S$ is the summit of $PQS$. We may assume that the five points $A,P,S,Q,B$ lie on $L$ in this order and partition $L$ into four pieces $L_{AP},L_{PS},L_{SQ},L_{QB}$ (the outer ones possibly reducing to a point).\\\\\\\\By the definition of $PQ$, an iso-odd triangle cannot have vertices on both $L_{AP}$ and $L_{QB}$. Therefore every iso-odd triangle within $L$ has all its vertices on just one of the four pieces. Applying to each of these pieces the induction hypothesis and adding the four inequalities we get that the number of iso-odd triangles within $L$ other than $PQS$ does not exceed $n/2$. And since each of $L_{PS},L_{SQ}$ consists of an odd number of sides, the inequalities for these two pieces are actually strict, leaving a $1/2+1/2$ in excess. Hence the triangle $PSQ$ is also covered by the estimate $n/2$. This concludes the induction step and proves the lemma.\\\\\\\\The remaining part of the solution in fact repeats the argument from the above proof. Consider the longest dissecting diagonal $XY$. Let $L_{XY}$ be the shorter of the two parts of the boundary with endpoints $X,Y$ and let $XYZ$ be the triangle in the dissection with vertex $Z$ not on $L_{XY}$. Notice that $XYZ$ is acute or right-angled, otherwise one of the segments $XZ,YZ$ would be longer than $XY$. Denoting by $L_{XZ},L_{YZ}$ the two pieces defined by $Z$ and applying the lemma to each of $L_{XY},L_{XZ},L_{YZ}$ we infer that there are no more than $2006/2$ iso-odd triangles in all, unless $XYZ$ is one of them. But in that case $XZ$ and $YZ$ are odd diagonals and the corresponding inequalities are strict. This shows that also in this case the total number of iso-odd triangles in the dissection, including $XYZ$, is not greater than $1003$.\\\\\\\\This bound can be achieved. For this to happen, it just suffices to select a vertex of the $2006$-gon and draw a broken line joining every second vertex, starting from the selected one. Since $2006$ is even, the line closes. This already gives us the required $1003$ iso-odd triangles. Then we can complete the triangulation in an arbitrary fashion.\\\\\n\\\\\n% \\begin{center}\n% \\includegraphics[width=0.5\\textwidth]{06p2s2_.png}\n% \\end{center}\nSolution 2. Let the terms odd triangle and iso-odd triangle have the same meaning as in the first solution.\\\\\\\\Let $ABC$ be an iso-odd triangle, with $AB$ and $BC$ odd sides. This means that there are an odd number of sides of the $2006$-gon between $A$ and $B$ and also between $B$ and $C$. We say that these sides belong to the iso-odd triangle $ABC$.\\\\\\\\At least one side in each of these groups does not belong to any other iso-odd triangle. This is so because any odd triangle whose vertices are among the points between $A$ and $B$ has two sides of equal length and therefore has an even number of sides belonging to it in total. Eliminating all sides belonging to any other iso-odd triangle in this area must therefore leave one side that belongs to no other iso-odd triangle. Let us assign these two sides (one in each group) to the triangle $ABC$.\\\\\nTo each iso-odd triangle we have thus assigned a pair of sides, with no two triangles sharing an assigned side. It follows that at most $1003$ iso-odd triangles can appear in the dissection. This value can be attained, as shows the example from the first solution.\\\\"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Graph-Theoretic Reformulation", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2005-P6", "year": 2005, "problem_number": 6, "nickname": "Pairwise Success for Dual-Near Perfect Solver", "category": "combinatorics", "subcategories": ["Extremal Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 1.345, "stdev": 2.297, "histogram": [325, 39, 57, 13, 15, 2, 6, 56], "total_participants": 513}, "problem": {"natural_language": {"format": "latex", "text": "In a mathematical competition, in which 6 problems were posed to the participants, every two of these problems were solved by more than 2/5 of the contestants. Moreover, no contestant solved all the 6 problems. Show that there are at least 2 contestants who solved exactly 5 problems each.", "prefix": "In a mathematical competition, in which 6 problems were posed to the participants, every two of these problems were solved by more than 2/5 of the contestants. Moreover, no contestant solved all the 6 problems.", "suffix": "Show that there are at least 2 contestants who solved exactly 5 problems each."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ntheorem imo_2005_p6 {participants : Type} [Fintype participants] [DecidableEq participants]\n    (solved : Fin 6 \u2192 Finset participants)\n    (h : \u2200 i j, i \u2260 j \u2192 (solved i \u2229 solved j).card > (2 * Fintype.card participants : \u211d) / 5)\n    (h' : \u2200 i : participants, \u2203 p : Fin 6, i \u2209 solved p) :\n    \u2203 s : Finset participants, s.card \u2265 2 \u2227\n    (\u2200 i \u2208 s, \u2203 p : Finset (Fin 6), p.card = 5 \u2227 \u2200 j, j \u2208 p \u2194 i \u2208 solved j) := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "In a mathematical competition 6 problems were posed to the contestants. Each pair of problems was solved by more than $2 / 5$ of the contestants. Nobody solved all 6 problems. Show that there were at least 2 contestants who each solved exactly 5 problems.\n% C6\nAssume there were $n$ contestants, $a_{i}$ of whom solved exactly $i$ problems, where $a_{0}+\\cdots+a_{5}=n$. Let us count the number $N$ of pairs ( $C, P$ ), where contestant $C$ solved the pair of problems $P$. Each of the 15 pairs of problems was solved by at least $\\frac{2 n+1}{5}$ contestants, implying $N \\geq 15 \\cdot \\frac{2 n+1}{5}=6 n+3$. On the other hand, $a_{i}$ students solved $\\frac{i(i-1)}{2}$ pairs; hence\n$$\n6 n+3 \\leq N \\leq a_{2}+3 a_{3}+6 a_{4}+10 a_{5}=6 n+4 a_{5}-\\left(3 a_{3}+5 a_{2}+6 a_{1}+6 a_{0}\\right) .\n$$\nConsequently $a_{5} \\geq 1$. Assume that $a_{5}=1$. Then we must have $N=6 n+4$, which is only possible if 14 of the pairs of problems were solved by exactly $\\frac{2 n+1}{5}$ students and the remaining one by $\\frac{2 n+1}{5}+1$ students, and all students but the winner solved 4 problems.\\\\\nThe problem $t$ not solved by the winner will be called tough and the pair of problems solved by $\\frac{2 n+1}{5}+1$ students special.\\\\\nLet us count the number $M_{p}$ of pairs ( $C, P$ ) for which $P$ contains a fixed problem $p$. Let $b_{p}$ be the number of contestants who solved $p$. Then $M_{t}=3 b_{t}$ (each of the $b_{t}$ students solved three pairs of problems containing $t$ ), and $M_{p}=3 b_{p}+1$ for $p \\neq t$ (the winner solved four such pairs). On the other hand, each of the five pairs containing $p$ was solved by $\\frac{2 n+1}{5}$ or $\\frac{2 n+1}{5}+1$ students, so $M_{p}=2 n+2$ if the special pair contains $p$, and $M_{p}=2 n+1$ otherwise.\\\\\nNow since $M_{t}=3 b_{t}=2 n+1$ or $2 n+2$, we have $2 n+1 \\equiv 0$ or $2(\\bmod 3)$. But if $p \\neq t$ is a problem not contained in the special pair, we have $M_{p}=3 b_{p}+1= 2 n+1$; hence $2 n+1 \\equiv 1(\\bmod 3)$, which is a contradiction."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2004-P3", "year": 2004, "problem_number": 3, "nickname": "Hook Tiling Rectangle Classification", "category": "combinatorics", "subcategories": ["Combinatorial Geometry"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 1.012, "stdev": 1.432, "histogram": [249, 100, 80, 30, 15, 1, 0, 11], "total_participants": 486}, "problem": {"natural_language": {"format": "latex", "text": "Define a hook to be a figure made up of six unit squares as shown in the problem statement,\nor any of the figures obtained by applying rotations and reflections to this figure.\nDetermine all m \u00d7 n rectangles that can be covered without gaps and without overlaps with hooks,\nsuch that no part of a hook covers area outside the rectangle.", "prefix": "Define a hook to be a figure made up of six unit squares as shown in the problem statement,\nor any of the figures obtained by applying rotations and reflections to this figure.", "suffix": "Determine all m \u00d7 n rectangles that can be covered without gaps and without overlaps with hooks,\nsuch that no part of a hook covers area outside the rectangle."}, "code": [{"language": "lean4", "text": "import Mathlib.Data.Finset.Basic\nimport Mathlib.Data.Finset.Prod\nimport Mathlib.Data.Int.Basic\nimport Mathlib.Tactic.Linarith\n\nnamespace Imo2004P3\n\n/-!\n# IMO 2004 Problem 3 (Shortlist C7)\n\nDefine a \"hook\" to be a figure made up of six unit squares as shown in the problem statement,\nor any of the figures obtained by applying rotations and reflections to this figure.\nDetermine all m \u00d7 n rectangles that can be covered without gaps and without overlaps with hooks,\nsuch that no part of a hook covers area outside the rectangle.\n-/\n\n-- We use (Int \u00d7 Int) to represent the coordinates of the squares on the grid.\nabbrev Cell := Int \u00d7 Int\n\n/--\nDefinition of the canonical hook shape (a specific hexomino).\nCoordinates based on the visualization:\n(0,2) X\n(0,1) (1,1) X X\n(0,0) (1,0) (2,0) X X X\nWe use `.toFinset` instead of the deprecated `Finset.fromList`.\n-/\ndef CanonicalHook : Finset Cell :=\n  [(0,0), (1,0), (2,0), (0,1), (1,1), (0,2)].toFinset\n\n-- Helper functions for transformations.\n-- Rotation by 90 degrees clockwise. (x, y) -> (y, -x)\ndef rotate_cell (c : Cell) : Cell := (c.2, -c.1)\n\n-- Reflection across the y-axis. (x, y) -> (-x, y)\ndef reflect_cell (c : Cell) : Cell := (-c.1, c.2)\n\n-- Function to apply a transformation to a shape (Finset Cell).\ndef transform_shape (S : Finset Cell) (f : Cell \u2192 Cell) (inj : Function.Injective f) : Finset Cell :=\n  S.map \u27e8f, inj\u27e9\n\n-- Define rotation and reflection operations for shapes.\ndef rotate (S : Finset Cell) : Finset Cell :=\n  transform_shape S rotate_cell (by\n    intros a b h\n    -- Simplify the hypothesis: rotate_cell(a) = rotate_cell(b)\n    simp only [rotate_cell, Prod.mk.injEq] at h\n    -- h is now (a.2 = b.2 \u2227 -a.1 = -b.1)\n    ext -- Use extensionality to prove a = b by proving components are equal.\n    \u00b7 exact (neg_inj).mp h.2 -- Proves a.1 = b.1 because negation is injective.\n    \u00b7 exact h.1             -- Proves a.2 = b.2.\n  )\n\ndef reflect (S : Finset Cell) : Finset Cell :=\n  transform_shape S reflect_cell (by\n    intros a b h\n    simp only [reflect_cell, Prod.mk.injEq] at h\n    -- h is now (-a.1 = -b.1 \u2227 a.2 = b.2)\n    ext\n    \u00b7 exact (neg_inj).mp h.1\n    \u00b7 exact h.2\n  )\n\n/--\nThe set of all 8 orientations of the hook, derived from the canonical hook\nby rotations and reflections.\n-/\ndef HookOrientations : Finset (Finset Cell) :=\n  let H0 := CanonicalHook\n  -- 4 rotations\n  let H1 := rotate H0\n  let H2 := rotate H1\n  let H3 := rotate H2\n  -- Reflection and its 3 rotations\n  let H4 := reflect H0\n  let H5 := rotate H4\n  let H6 := rotate H5\n  let H7 := rotate H6\n  [H0, H1, H2, H3, H4, H5, H6, H7].toFinset\n\n-- Define translation of a shape by a vector v.\ndef translate (S : Finset Cell) (v : Cell) : Finset Cell :=\n  transform_shape S (\u03bb p => (p.1 + v.1, p.2 + v.2)) (by\n    intros a b h\n    simp only [Prod.mk.injEq] at h\n    -- h is (a.1 + v.1 = b.1 + v.1 \u2227 a.2 + v.2 = b.2 + v.2)\n    ext\n    \u00b7 exact add_right_cancel h.1 -- Proves a.1 = b.1 because addition is cancellative.\n    \u00b7 exact add_right_cancel h.2\n  )\n\n/--\nA placement of a hook on the board.\n`deriving DecidableEq` is necessary so we can form a `Finset Placement`.\n-/\n@[ext]\nstructure Placement where\n  orientation : Finset Cell\n  translation : Cell\n  h_orientation : orientation \u2208 HookOrientations\nderiving DecidableEq\n\n-- The actual set of cells covered by a placed hook.\ndef placed_shape (P : Placement) : Finset Cell :=\n  translate P.orientation P.translation\n\n/--\nDefinition of an m x n rectangle, defined as the set of cells (x, y)\nsuch that 0 <= x < m and 0 <= y < n.\n-/\ndef Rectangle (m n : Nat) : Finset Cell :=\n  -- We construct the rectangle in (Nat x Nat) first and then cast to (Int x Int).\n  let R_nat := (Finset.range m).product (Finset.range n)\n  R_nat.map {\n    toFun := fun p => (\u2191p.1, \u2191p.2),\n    inj' := by\n      intros a b h\n      simp only [Prod.mk.injEq] at h\n      -- h is now ((a.1:Int) = (b.1:Int) \u2227 (a.2:Int) = (b.2:Int))\n      ext\n      -- Use the fact that coercion from Nat to Int is injective.\n      \u00b7 exact Int.ofNat_inj.mp h.left\n      \u00b7 exact Int.ofNat_inj.mp h.right\n  }\n\n/--\nA tiling of an m x n rectangle by a set of placements T.\n-/\ndef IsTiling (m n : Nat) (T : Finset Placement) : Prop :=\n  let R := Rectangle m n\n  -- 1. The union of the placed shapes is exactly the rectangle R.\n  -- This ensures the rectangle is covered without gaps and no part of a hook covers area outside.\n  (R = Finset.biUnion T placed_shape) \u2227\n  -- 2. The placed shapes are pairwise disjoint (no overlaps).\n  (\u2200 P1 \u2208 T, \u2200 P2 \u2208 T, P1 \u2260 P2 \u2192 Disjoint (placed_shape P1) (placed_shape P2))\n\n-- The property that an m x n rectangle can be tiled by hooks.\ndef CanBeTiledByHooks (m n : Nat) : Prop :=\n  \u2203 T : Finset Placement, IsTiling m n T\n\n/--\nThe statement of IMO 2004 P3.\nAn m x n rectangle can be covered by hooks if and only if:\n1. It is empty (m=0 or n=0), which is trivially tileable.\nOR\n2. Both dimensions are at least 3, with one being at least 4.\n3. The area is divisible by 12.\n-/\ntheorem imo2004_p3 (m n : Nat) : CanBeTiledByHooks m n \u2194\n  (m = 0 \u2228 n = 0) \u2228 (12 \u2223 m * n \u2227 ((m \u2265 3 \u2227 n \u2265 4) \u2228 (m \u2265 4 \u2227 n \u2265 3))) :=\nby sorry\n\nend Imo2004P3"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "%C7\nDetermine all $m \\times n$ rectangles that can be covered with hooks made up of 6 unit squares, as in the figure:\\\\\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.1\\textwidth]{2025_08_26_bf7c78e3ccf54d1853eag-03}}\n\\end{center}\nRotations and reflections of hooks are allowed. The rectangle must be covered without gaps and overlaps. No part of a hook may cover area outside the rectangle.\nSuppose that an $m \\times n$ rectangle can be covered by \"hooks\". For any hook $H$ there is a unique hook $K$ that covers its \" inside\" square. Then also $H$ covers the inside square of $K$, so the set of hooks can be partitioned into pairs of type $\\{H, K\\}$, each of which forms one of the following two figures consisting of 12 squares:\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.4\\textwidth]{2025_08_26_bf7c78e3ccf54d1853eag-04}}\n\\end{center}\nThus the $m \\times n$ rectangle is covered by these tiles. It immediately follows that $12 \\mid m n$.\\\\\nSuppose one of $m, n$ is divisible by 4. Let w.l.o.g. $4 \\mid m$. If $3 \\mid n$, one can easily cover the rectangle by $3 \\times 4$ rectangles and therefore by hooks. Also,\\\\\nif $12 \\mid m$ and $n \\notin\\{1,2,5\\}$, then there exist $k, l \\in \\mathbb{N}_{0}$ such that $n=3 k+4 l$, and thus the rectangle $m \\times n$ can be partitioned into $3 \\times 12$ and $4 \\times 12$ rectangles all of which can be covered by hooks. If $12 \\mid m$ and $n=1,2$, or 5 , then it is easy to see that covering by hooks is not possible.\\\\\nNow suppose that $4 \\nmid m$ and $4 \\nmid n$. Then $m, n$ are even and the number of tiles is odd. Assume that the total number of tiles of types $A_{1}$ and $B_{1}$ is odd (otherwise the total number of tiles of types $A_{2}$ and $B_{2}$ is odd, which is analogous). If we color in black all columns whose indices are divisible by 4 , we see that each tile of type $A_{1}$ or $B_{1}$ covers three black squares, which yields an odd number in total. Hence the total number of black squares covered by the tiles of types $A_{2}$ and $B_{2}$ must be odd. This is impossible, since each such tile covers two or four black squares."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Invariant", "Coloring Argument", "Graph-Theoretic Reformulation"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2003-P1", "year": 2003, "problem_number": 1, "nickname": "Large Integer Set Disjoint Shifts", "category": "combinatorics", "subcategories": ["Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.558, "stdev": 3.007, "histogram": [123, 18, 111, 0, 0, 24, 1, 180], "total_participants": 457}, "problem": {"natural_language": {"format": "latex", "text": "$S$ is the set $\\{1, 2, 3, \\dots ,1000000\\}$. Show that for any subset $A$ of $S$ with $101$ elements we can find $100$ distinct elements $x_i$ of $S$, such that the sets $\\{a + x_i \\mid a \\in A\\}$ are all pairwise disjoint.", "prefix": "$S$ is the set $\\{1, 2, 3, \\dots ,1000000\\}$.", "suffix": "Show that for any subset $A$ of $S$ with $101$ elements we can find $100$ distinct elements $x_i$ of $S$, such that the sets $\\{a + x_i \\mid a \\in A\\}$ are all pairwise disjoint."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ndef S := Finset.Icc 1 1000000\n\n\ntheorem imo_2003_p1 (A : Finset S) (hA: A.card = 101):\n    \u2203 x : Function.Embedding (Fin 100) S,\n    \u2200 i j, i \u2260 j \u2192 Disjoint { a.1 + (x i).1 | a \u2208 A } { a.1 + (x j).1 | a \u2208 A } := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% C1\nLet $A$ be a 101 -element subset of the set $S=\\{1,2, \\ldots, 1000000\\}$. Prove that there exist numbers $t_{1}, t_{2}, \\ldots, t_{100}$ in $S$ such that the sets\n$$\nA_{j}=\\left\\{x+t_{j} \\mid x \\in A\\right\\}, \\quad j=1,2, \\ldots, 100\n$$\nare pairwise disjoint.\nSolution 1. Consider the set $D=\\{x-y \\mid x, y \\in A\\}$. There are at most $101 \\times 100+1=$ 10101 elements in $D$. Two sets $A+t_{i}$ and $A+t_{j}$ have nonempty intersection if and only if $t_{i}-t_{j}$ is in $D$. So we need to choose the 100 elements in such a way that we do not use a difference from $D$.\nNow select these elements by induction. Choose one element arbitrarily. Assume that $k$ elements, $k \\leq 99$, are already chosen. An element $x$ that is already chosen prevents us from selecting any element from the set $x+D$. Thus after $k$ elements are chosen, at most $10101 k \\leq 999999$ elements are forbidden. Hence we can select one more element.\nComment. The size $|S|=10^{6}$ is unnecessarily large. The following statement is true:\\\\\nIf $A$ is a $k$-element subset of $S=\\{1, \\ldots, n\\}$ and $m$ is a positive integer such that $n>(m-1)\\left(\\binom{k}{2}+1\\right)$, then there exist $t_{1}, \\ldots, t_{m} \\in S$ such that the sets $A_{j}=\\left\\{x+t_{j} \\mid x \\in A\\right\\}, j=1, \\ldots, m$ are pairwise disjoint.\nSolution 2. We give a solution to the generalised version.\\\\\nConsider the set $B=\\{|x-y| \\mid x, y \\in A\\}$. Clearly, $|B| \\leq\\binom{ k}{2}+1$.\\\\\nIt suffices to prove that there exist $t_{1}, \\ldots, t_{m} \\in S$ such that $\\left|t_{i}-t_{j}\\right| \\notin B$ for every distinct $i$ and $j$. We will select $t_{1}, \\ldots, t_{m}$ inductively.\nChoose 1 as $t_{1}$, and consider the set $C_{1}=S \\backslash\\left(B+t_{1}\\right)$. Then we have $\\left|C_{1}\\right| \\geq n-\\left(\\binom{k}{2}+1\\right)> (m-2)\\left(\\binom{k}{2}+1\\right)$.\nFor $1 \\leq i<m$, suppose that $t_{1}, \\ldots, t_{i}$ and $C_{i}$ are already defined and that $\\left|C_{i}\\right|> (m-i-1)\\left(\\binom{k}{2}+1\\right) \\geq 0$. Choose the least element in $C_{i}$ as $t_{i+1}$ and consider the set $C_{i+1}=C_{i} \\backslash\\left(B+t_{i+1}\\right)$. Then\n$$\n\\left|C_{i+1}\\right| \\geq\\left|C_{i}\\right|-\\left(\\binom{k}{2}+1\\right)>(m-i-2)\\left(\\binom{k}{2}+1\\right) \\geq 0 .\n$$\nClearly, $t_{1}, \\ldots, t_{m}$ satisfy the desired condition."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Pigeonhole Principle", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2002-P1", "year": 2002, "problem_number": 1, "nickname": "Blue Points in Triangular Lattice", "category": "combinatorics", "subcategories": ["Enumerative Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.449, "stdev": 3.158, "histogram": [179, 39, 11, 11, 8, 15, 61, 155], "total_participants": 479}, "problem": {"natural_language": {"format": "latex", "text": "$S$ is the set of all $(h,k)$ with $h,k$ non-negative integers such that $h + k < n$. Each element of $S$ is colored red or blue, so that if $(h,k)$ is red and $h' \\le h,k' \\le k$, then $(h',k')$ is also red. A type $1$ subset of $S$ has $n$ blue elements with different first member and a type $2$ subset of $S$ has $n$ blue elements with different second member. Show that there are the same number of type $1$ and type $2$ subsets.", "prefix": "$S$ is the set of all $(h,k)$ with $h,k$ non-negative integers such that $h + k < n$. Each element of $S$ is colored red or blue, so that if $(h,k)$ is red and $h' \\le h,k' \\le k$, then $(h',k')$ is also red. A type $1$ subset of $S$ has $n$ blue elements with different first member and a type $2$ subset of $S$ has $n$ blue elements with different second member.", "suffix": "Show that there are the same number of type $1$ and type $2$ subsets."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen Finset\n\ndef S (n : \u2115) : Finset (Fin n \u00d7 Fin n) :=\n  { (h, k) | h + k < n }\n\nstructure Coloring (n : \u2115) where\n  is_red: S n \u2192 Bool\n  coloring_condition: \u2200 hk hk' : S n,\n    match hk.val, hk'.val with\n    | (h, k), (h', k') => is_red hk \u2227 h' \u2264 h \u2227 k' \u2264 k \u2192 is_red hk'\n\ndef is_type_1 {n : \u2115} (c : Coloring n) (subset: Finset (S n)) : Bool :=\n  let blueElements := subset.filter (\u03bb x => \u00ac c.is_red x)\n  let firstMembersOfBlueElements : Finset (Fin n) := blueElements.image (\u03bb x : S n => x.val.1)\n  firstMembersOfBlueElements.card = n\n\ndef is_type_2 {n : \u2115} (c : Coloring n) (subset: Finset (S n)) : Bool :=\n  let blueElements := subset.filter (\u03bb x => \u00ac c.is_red x)\n  let secondMembersOfBlueElements : Finset (Fin n) := blueElements.image (\u03bb x : S n => x.val.2)\n  secondMembersOfBlueElements.card = n\n\n\ntheorem imo_2002_p1 (n : \u2115) (c : Coloring n):\n    #{ s | is_type_1 c s }.toFinset = #{ s | is_type_2 c s }.toFinset := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% C1\nLet $n$ be a positive integer. Each point $(x, y)$ in the plane, where $x$ and $y$ are non-negative integers with $x+y<n$, is coloured red or blue, subject to the following condition: if a point $(x, y)$ is red, then so are all points ( $x^{\\prime}, y^{\\prime}$ ) with $x^{\\prime} \\leqslant x$ and $y^{\\prime} \\leqslant y$. Let $A$ be the number of ways to choose $n$ blue points with distinct $x$-coordinates, and let $B$ be the number of ways to choose $n$ blue points with distinct $y$-coordinates. Prove that $A=B$.\n\\section*{Comment}\n\\begin{enumerate}\n\\item This is an easy question, with an interesting variety of approaches. We give three different solutions: one is by induction on $n$, one is by induction on the number of red points, and one is a direct bijection.\n\\end{enumerate}\nSolution 1. Let the number of blue points with $x$-coordinate $i$ be $a_{i}$, and let the number of blue points with $y$-coordinate $i$ be $b_{i}$. Our task is to show that $a_{0} a_{1} \\ldots a_{n-1}=b_{0} b_{1} \\ldots b_{n-1}$, and to accomplish this we will show that $a_{0}, a_{1}, \\ldots, a_{n-1}$ is a permutation of $b_{0}, b_{1}, \\ldots, b_{n-1}$.\\\\\nWe prove this result by induction on $n$. The case $n=1$ is trivial, so we pass to the induction step: we may assume the result for all smaller values of $n$.\\\\\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]{2025_08_26_2e38f0baba81ad87be8fg-34}}\n\\end{center}\n% \\includegraphics[max width=\\textwidth, center]{2025_08_26_2e38f0baba81ad87be8fg-34}\nConsider first the case when every point ( $x, y$ ) with $x+y=n+1$ is blue. Ignoring these points, we have a configuration for $n-1$, with blue columns of sizes $a_{0}-1, a_{1}-1, \\ldots, a_{n-2}-1$ and blue rows of sizes $b_{0}-1, b_{1}-1, \\ldots, b_{n-2}-1$. It follows by the induction hypothesis that $a_{0}-1, a_{1}-1, \\ldots, a_{n-2}-1$ is a permutation of $b_{0}-1, b_{1}-1, \\ldots, b_{n-2}-1$, and since $a_{n-1}=b_{n-1}=1$ we are done.\\\\\nNow suppose instead that some point ( $k, n-1-k$ ) is red. Then the entire rectangle of all points ( $x, y$ ) with $x \\leqslant k$ and $y \\leqslant n-1-k$ is red. Thus, considering just the points ( $x, y$ ) with $x<k$, the induction hypothesis tells us that $a_{0}, a_{1}, \\ldots, a_{k-1}$ is a permutation of $b_{n-k}, b_{n-k+1}, \\ldots, b_{n-1}$, and similarly we have that $a_{k+1}, a_{k+2}, \\ldots, a_{n-1}$ is a permutation of $b_{0}, b_{1}, \\ldots, b_{n-2-k}$. Since $a_{k}=b_{n-1-k}=0$, we are done.\nSolution 2. As above, we wish to show that $a_{0}, a_{1}, \\ldots, a_{n-1}$ is a permutation of $b_{0}, b_{1}, \\ldots, b_{n-1}$. We prove this by induction on the number of red points: the result is trivial when there are no red points. Choose a red point $(x, y)$ with $x+y$ maximal. Then $a_{x}=b_{y}=n-1-x-y$. If we change this red point to blue, then we have a configuration with fewer red points, with all blue rows and columns unchanged except that the values of $a_{x}$ and $b_{y}$ decrease by 1 . So from the induction hypothesis we have that $a_{0}, a_{1}, \\ldots, a_{n-1}$, with $a_{x}$ replaced by $a_{x}-1$, is a permutation of $b_{0}, b_{1}, \\ldots, b_{n-1}$, with $b_{y}$ replaced by $b_{y}-1$. Since $a_{x}=b_{y}$, it follows that $a_{0}, a_{1}, \\ldots, a_{n-1}$ is a permutation of $b_{0}, b_{1}, \\ldots, b_{n-1}$, as required.\nSolution 3. We give an explicit bijection between $a_{0}, a_{1}, \\ldots, a_{n-1}$ and $b_{0}, b_{1}, \\ldots, b_{n-1}$. If $a_{x}=0$ then also $b_{x}=0$, and we let $a_{x}$ correspond with $b_{x}$. If $a_{x}>0$, let $(x, y)$ be the bottom blue point in column $x$. Now, among the points $(x, y),(x-1, y+1),(x-2, y+2), \\ldots$, there must be at least one that is the leftmost blue point of a row: let the first one be ( $x^{\\prime}, y^{\\prime}$ ). Then we let $a_{x}$ correspond with $b_{y^{\\prime}}$.\\\\\nThis is clearly reversible: if $b_{y}>0$ then we let $(x, y)$ be the leftmost blue point in row $y$, choose the first point among $(x, y),(x+1, y-1),(x+2, y-2), \\ldots$ that is the bottom blue point of a row, say ( $x^{\\prime}, y^{\\prime}$ ), and let $b_{y}$ correspond to $a_{x^{\\prime}}$.\\\\\n\\begin{center}\n\\fcolorbox{black}{white}{\\includegraphics[width=0.3\\textwidth]{2025_08_26_2e38f0baba81ad87be8fg-35}}\n\\end{center}\n% \\includegraphics[max width=\\textwidth, center]{2025_08_26_2e38f0baba81ad87be8fg-35}"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2001-P4", "year": 2001, "problem_number": 4, "nickname": "Permutation Sum Congruence on Odd Lengths", "category": "combinatorics", "subcategories": ["Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.233, "stdev": 3.093, "histogram": [147, 79, 34, 11, 15, 6, 8, 173], "total_participants": 473}, "problem": {"natural_language": {"format": "latex", "text": "Let $n_1, n_2, \\dots , n_m$ be integers where $m>1$ is odd. Let $x = (x_1, \\dots , x_m)$ denote a permutation of the integers $1, 2, \\cdots , m$. Let $f(x) = x_1n_1 + x_2n_2 + ... + x_mn_m$. Show that for some distinct permutations $a$, $b$ the difference $f(a) - f(b)$ is a multiple of $m!$.", "prefix": "Let $n_1, n_2, \\dots , n_m$ be integers where $m>1$ is odd. Let $x = (x_1, \\dots , x_m)$ denote a permutation of the integers $1, 2, \\cdots , m$. Let $f(x) = x_1n_1 + x_2n_2 + ... + x_mn_m$.", "suffix": "Show that for some distinct permutations $a$, $b$ the difference $f(a) - f(b)$ is a multiple of $m!$."}, "code": [{"language": "lean4", "text": "import Mathlib\n\nopen Nat\n\ndef f {m : \u2115} (n : Finset.Icc 1 m \u2192 \u2124) (x : Equiv.Perm (Finset.Icc 1 m)) : \u2124 := \u2211 i, x i * n i\n\n\ntheorem imo_2001_p4 (m : \u2115) (h_m_pos: m > 1) (h_m_odd: Odd m) (n : Finset.Icc 1 m \u2192 \u2124):\n    \u2203 a b : Equiv.Perm (Finset.Icc 1 m), a \u2260 b \u2227 \u2191(m !) \u2223 (f n a - f n b) := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% C2\nLet $n$ be an odd integer greater than 1 and let $c_{1}, c_{2}, \\ldots, c_{n}$ be integers. For each permutation $a=\\left(a_{1}, a_{2}, \\ldots, a_{n}\\right)$ of $\\{1,2, \\ldots, n\\}$, define $S(a)=\\sum_{i=1}^{n} c_{i} a_{i}$. Prove that there exist permutations $a \\neq b$ of $\\{1,2, \\ldots, n\\}$ such that $n!$ is a divisor of $S(a)-S(b)$.\nSolution. Let $\\sum S(a)$ be the sum of $S(a)$ over all $n!$ permutations $a=\\left(a_{1}, a_{2}, \\ldots, a_{n}\\right)$. We compute $\\sum S(a) \\bmod n!$ two ways, one of which depends on the desired conclusion being false, and reach a contradiction when $n$ is odd.\nFirst way. In $\\sum S(a), c_{1}$ is multiplied by each $k \\in\\{1, \\ldots, n\\}$ a total of $(n-1)$ ! times, once for each permutation of $\\{1, \\ldots, n\\}$ in which $a_{1}=k$. Thus the coefficient of $c_{1}$ in $\\sum S(a)$ is\n$$\n(n-1)!(1+2+\\cdots+n)=(n+1)!/ 2\n$$\nThe same is true for all $c_{i}$, so\n\\begin{equation*}\n\\sum S(a)=\\frac{(n+1)!}{2} \\sum_{i=1}^{n} c_{i} \\tag{1}\n\\end{equation*}\nSecond way. If $n!$ is not a divisor of $S(a)-S(b)$ for any $a \\neq b$, then each $S(a)$ must have a different remainder $\\bmod n!$. Since there are $n!$ permutations, these remainders must be precisely the numbers $0,1,2, \\ldots, n!-1$. Thus\n\\begin{equation*}\n\\sum S(a) \\equiv \\frac{(n!-1) n!}{2} \\bmod n! \\tag{2}\n\\end{equation*}\nCombining (1) and (2), we get\n\\begin{equation*}\n\\frac{(n+1)!}{2} \\sum_{i=1}^{n} c_{i} \\equiv \\frac{(n!-1) n!}{2} \\bmod n! \\tag{3}\n\\end{equation*}\nNow, for $n$ odd, the left side of (3) is congruent to 0 modulo $n!$, while for $n>1$ the right side is not congruent to 0 ( $n!-1$ is odd). For $n>1$ and odd, we have a contradiction."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Invariant", "Parity"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2001-P3", "year": 2001, "problem_number": 3, "nickname": "Overlapping Solutions", "category": "combinatorics", "subcategories": ["Extremal Combinatorics"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 0.877, "stdev": 1.614, "histogram": [272, 127, 36, 8, 1, 6, 3, 20], "total_participants": 473}, "problem": {"natural_language": {"format": "latex", "text": "Twenty-one girls and twenty-one boys took part in a mathematical competition. It turned out that each contestant solved at most six problems, and for each pair of a girl and a boy, there was at least one problem that was solved by both the girl and the boy. Show that there is a problem that was solved by at least three girls and at least three boys.", "prefix": "Twenty-one girls and twenty-one boys took part in a mathematical competition. It turned out that each contestant solved at most six problems, and for each pair of a girl and a boy, there was at least one problem that was solved by both the girl and the boy.", "suffix": "Show that there is a problem that was solved by at least three girls and at least three boys."}, "code": [{"language": "lean4", "text": "import Mathlib\n\ndef solved_by_at_least_three {n : \u2115} (problem : \u2115) (solved_problems: Fin n \u2192 Finset \u2115) : Prop :=\n  \u2203 a b c, a \u2260 b \u2227 b \u2260 c \u2227 a \u2260 c \u2227 problem \u2208 solved_problems a \u2229 solved_problems b \u2229 solved_problems c\n\n\ntheorem imo_2001_p3 (solved_problems_girls: Fin 21 \u2192 Finset \u2115)\n    (solved_problems_boys: Fin 21 \u2192 Finset \u2115)\n    (h_max_6_girls: \u2200 girl: Fin 21, (solved_problems_girls girl).card \u2264 6)\n    (h_max_6_boys: \u2200 boy: Fin 21, (solved_problems_boys boy).card \u2264 6)\n    (h_pairs: \u2200 boy girl: Fin 21, solved_problems_boys boy \u2229 solved_problems_girls girl \u2260 \u2205):\n    \u2203 problem: \u2115, solved_by_at_least_three problem solved_problems_girls \u2227\n    solved_by_at_least_three problem solved_problems_boys := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "% C8\nTwenty-one girls and twenty-one boys took part in a mathematical competition. It turned out that\\\\\n(a) each contestant solved at most six problems, and\\\\\n(b) for each pair of a girl and a boy, there was at least one problem that was solved by both the girl and the boy.\nShow that there is a problem that was solved by at least three girls and at least three boys.\nSolution 1. We introduce the following symbols: $G$ is the set of girls at the competition and $B$ is the set of boys, $P$ is the set of problems, $P(g)$ is the set of problems solved by $g \\in G$, and $P(b)$ is the set of problems solved by $b \\in B$. Finally, $G(p)$ is the set of girls that solve $p \\in P$ and $B(p)$ is the set of boys that solve $p$. In terms of this notation, we have that for all $g \\in G$ and $b \\in B$,\n$$\n\\text { (a) }|P(g)| \\leq 6,|P(b)| \\leq 6, \\quad \\text { (b) } P(g) \\cap P(b) \\neq \\varnothing \\text {. }\n$$\nWe wish to prove that some $p \\in P$ satisfies $|G(p)| \\geq 3$ and $|B(p)| \\geq 3$. To do this, we shall assume the contrary and reach a contradiction by counting (two ways) all ordered triples ( $p, q, r$ ) such that $p \\in P(g) \\cap P(b)$. With $T=\\{(p, g, b): p \\in P(g) \\cap P(b)\\}$, condition (b) yields\n\\begin{equation*}\n|T|=\\sum_{g \\in G} \\sum_{b \\in B}|P(g) \\cap P(b)| \\geq|G| \\cdot|B|=21^{2} \\tag{1}\n\\end{equation*}\nAssume that no $p \\in P$ satisfies $|G(p)| \\geq 3$ and $|B(p)| \\geq 3$. We begin by noting that\n\\begin{equation*}\n\\sum_{p \\in P}|G(p)|=\\sum_{g \\in G}|P(g)| \\leq 6|G| \\quad \\text { and } \\quad \\sum_{p \\in P}|B(p)| \\leq 6|B| . \\tag{2}\n\\end{equation*}\n(Note. The equality in (2) is obtained by a standard double-counting technique: Let $\\chi(g, p)=1$ if $g$ solves $p$ and $\\chi(g, p)=0$ otherwise, and interchange the orders of\\\\\nsummation in $\\sum_{p \\in P} \\sum_{g \\in G} \\chi(g, p)$.) Let\n$$\n\\begin{aligned}\n& P_{+}=\\{p \\in P:|G(p)| \\geq 3\\}, \\\\\n& P_{-}=\\{p \\in P:|G(p)| \\leq 2\\} .\n\\end{aligned}\n$$\nClaim. $\\sum_{p \\in P_{-}}|G(p)| \\geq|G| ;$ thus $\\sum_{p \\in P_{+}}|G(p)| \\leq 5|G|$. Also $\\sum_{p \\in P_{+}}|B(p)| \\geq|B| ;$ thus $\\sum_{p \\in P_{-}}|B(b)| \\leq 5|B|$.\nProof. Let $g \\in G$ be arbitrary. By the Pigeonhole Principle, conditions (a) and (b) imply that $g$ solves some problem $p$ that is solved by at least $\\lceil 21 / 6\\rceil=4$ boys. By assumption, $|B(p)| \\geq 4$ implies that $p \\in P_{-}$, so every girl solves at least one problem in $P_{-}$. Thus\n\\begin{equation*}\n\\sum_{p \\in P_{-}}|G(p)| \\geq|G| . \\tag{3}\n\\end{equation*}\nIn view of (2) and (3) we have\n$$\n\\sum_{p \\in P_{+}}|G(p)|=\\sum_{p \\in P}|G(p)|-\\sum_{p \\in P_{-}}|G(p)| \\leq 5|G| .\n$$\nAlso, each boy solves a problem that is solved by at least four girls, so each boy solves a problem $p \\in P_{+}$. Thus $\\sum_{p \\in P_{+}}|B(p)| \\geq|B|$, and the calculation proceeds as before using (2).\nUsing the claim just established, we find\n$$\n\\begin{aligned}\n|T| & =\\sum_{p \\in P}|G(p)| \\cdot|B(p)| \\\\\n& =\\sum_{p \\in P_{+}}|G(p)| \\cdot|B(p)|+\\sum_{p \\in P_{-}}|G(p)| \\cdot|B(p)| \\\\\n& \\leq 2 \\sum_{p \\in P_{+}}|G(p)|+2 \\sum_{p \\in P_{-}}|B(p)| \\\\\n& \\leq 10|G|+10|B|=20 \\cdot 21 .\n\\end{aligned}\n$$\nThis contradicts (1), so the proof is complete.\nSolution 2. Let us use some of the notation given in the first solution. Suppose that for every $p \\in P$ either $|G(p)| \\leq 2$ or $|B(p)| \\leq 2$. For each $p \\in P$, color $p$ red if $|G(p)| \\leq 2$ and otherwise color it black. In this way, if $p$ is red then $|G(p)| \\leq 2$ and if $p$ is black then $|B(p)| \\leq 2$. Consider a chessboard with 21 rows, each representing one of the girls, and 21 columns, each representing one of the boys. For each $g \\in G$ and $b \\in B$, color the square corresponding to ( $g, b$ ) as follows: pick $p \\in P(g) \\cap P(b)$ and assign $p$ 's color to that square. (By condition (b), there is always an available choice.) By the Pigeonhole Principle, one of the two colors is assigned to at least $\\lceil 441 / 2\\rceil=221$ squares, and thus some row has at least $\\lceil 221 / 21\\rceil=11$ black squares or some column has at least 11 red squares.\nSuppose the row corresponding to $g \\in G$ has at least 11 black squares. Then for each of 11 squares, the black problem that was chosen in assigning the color was solved by at most 2 boys. Thus we account for at least $\\lceil 11 / 2\\rceil=6$ distinct problems solved by $g$. In view of condition (a), $g$ solves only these problems. But then at most 12 boys solve a problem also solved by $g$, in violation of condition (b).\nIn exactly the same way, a contradiction is reached if we suppose that some column has at least 11 red squares. Hence some $p \\in P$ satisfies $|G(p)| \\geq 3$ and $|B(p)| \\geq 3$."}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Induction", "Recursion", "Graph-Theoretic Reformulation"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}, {"id": "IMO-2000-P4", "year": 2000, "problem_number": 4, "nickname": "Three-Box Magician Cardsum", "category": "combinatorics", "subcategories": ["Enumerative Combinatorics", "Combinatorial Number Theory"], "human_score": {"scale": "0-7", "definition": "integer score per participant.", "mean": 3.182, "stdev": 2.553, "histogram": [85, 78, 62, 49, 28, 29, 49, 81], "total_participants": 461}, "problem": {"natural_language": {"format": "latex", "text": "A magician has one hundred cards numbered $1$ to $100$. He puts them into three boxes, a red one, a white one and a blue one, so that each box contains at least one card. A member of the audience selects two of the three boxes, chooses one card from each and announces the sum of the numbers on the chosen cards. Given this sum, the magician identifies the box from which no card has been chosen. How many ways are there to put all the cards into the boxes so that this trick always works? (Two ways are considered different if at least one card is put into a different box.)", "prefix": "A magician has one hundred cards numbered $1$ to $100$. He puts them into three boxes, a red one, a white one and a blue one, so that each box contains at least one card. A member of the audience selects two of the three boxes, chooses one card from each and announces the sum of the numbers on the chosen cards. Given this sum, the magician identifies the box from which no card has been chosen.", "suffix": "How many ways are there to put all the cards into the boxes so that this trick always works? (Two ways are considered different if at least one card is put into a different box.)"}, "code": [{"language": "lean4", "text": "import Mathlib\n\nabbrev Cards := Finset.Icc 1 100\n\nabbrev Boxes := Fin 3\n\n-- The trick is that given the sum of any two cards, the magician can tell a box number\nabbrev Trick := \u2115 \u2192 Boxes\n\n-- The trick works when:\ndef trick_works (f : Cards \u2192 Boxes) (t : Trick) : Prop :=\n  \u2200 c\u2081 c\u2082 : Cards,\n  -- given the sum of two cards from box 0 and box 1 then the trick gives the result of box 2 **and**\n  (f c\u2081 = 0 \u2192 f c\u2082 = 1 \u2192 t (c\u2081.1 + c\u2082.1) = 2) \u2227\n  -- given the sum of two cards from box 0 and box 2 then the trick gives the result of box 1 **and**\n  (f c\u2081 = 0 \u2192 f c\u2082 = 2 \u2192 t (c\u2081.1 + c\u2082.1) = 1) \u2227\n  -- given the sum of two cards from box 1 and box 2 then the trick gives the result of box 0\n  (f c\u2081 = 1 \u2192 f c\u2082 = 2 \u2192 t (c\u2081.1 + c\u2082.1) = 0)\n\nabbrev imo_2000_p4_solution : \u2115 := sorry\n\n\ntheorem imo_2000_p4 (good_allocations : Finset (Cards \u2192 Boxes))\n    (h : \u2200 f, f \u2208 good_allocations \u2194 Function.Surjective f \u2227 \u2203 (t : Trick), trick_works f t) :\n    good_allocations.card = imo_2000_p4_solution := by sorry"}]}, "solutions": [{"id": "sol-1", "natural_language": {"format": "latex", "text": "A magician has one hundred cards numbered 1 to 100 . He puts them into three boxes, a red one, a white one and a blue one, so that each box contains at least one card. A member of the audience draws two cards from two different boxes and announces the sum of numbers on those cards. Given this information, the magician locates the box from which no card has been drawn.\nHow many ways are there to put the cards in the three boxes so that the trick works?\nThere are $2 \\cdot 3!=12$ ways, which amount to:\n\\begin{itemize}\n\\item Partitioning the cards modulo 3, or\n\\item Placing 1 alone in a box, 100 alone in a second box, and all remaining cards in the third box.\n\\end{itemize}\nThese are easily checked to work so we prove they are the only ones.\nIf First solution. We proceed by induction on $n \\geq 3$ with the base case being immediate.\\\\\nFor the inductive step, consider a working partition of $\\{1,2, \\ldots, n\\}$. Then either $n$ is in its own box; or deleting $n$ gives a working partition of $\\{1,2, \\ldots, n-1\\}$. Similarly, either 1 is in its own box; or deleting 1 gives a working partition of $\\{2,3, \\ldots, n\\}$, and we can reduce all numbers by 1 to get a working partition of $\\{1,2, \\ldots, n-1\\}$.\nTherefore, we only need to consider there cases.\n\\begin{itemize}\n\\item If 1 and $n$ are both in their own box, this yields one type of solution we already found.\n\\item If $n$ is not in a box by itself, then by induction hypothesis the cards 1 through $n-1$ are either arranged $\\bmod 3$, or as $\\{1\\} \\cup\\{2,3, \\ldots, n-2\\} \\cup\\{n-1\\}$.\n\\item In the former mod 3 situation, since $n+(n-3)=(n-1)+(n-2)$, so $n$ must be in the same box as $n-3$.\n\\item In the latter case and for $n>4$, since $n+1=2+(n-1), n$ must be in the same box as 1 . But now $n+2=(n-1)+3$ for $n>4$, contradiction.\n\\item The case where 1 is in a box by itself is analogous.\n\\end{itemize}\nThis exhausts all cases, completing the proof.\nIf Second solution. Let $A, B, C$ be the sets of cards in the three boxes. Then $A+B$, $B+C, C+A$ should be disjoint, and contained in $\\{3,4, \\ldots, 199\\}$. On the other hand, we have the following famous fact.\n\\section*{Lemma}\nLet $X$ and $Y$ be finite nonempty sets of real numbers. We have $|X+Y| \\geq|X|+|Y|-1$, with equality if and only if $X$ and $Y$ are arithmetic progressions with the same common difference, or one of $X$ and $Y$ is a singleton set.\nPutting these two together gives the estimates\n$$\n197 \\geq|A+B|+|B+C|+|C+A| \\geq 2(|A|+|B|+|C|)-3=197\n$$\nSo all the inequalities must be sharp. Consequently we conclude that:\\\\\nClaim - Either the sets $A, B, C$ are disjoint arithmetic progressions with the same common difference $d=\\min _{x \\neq y}$ in same set $|x-y|$, or two of the sets are two singleton. Moreover, $\\{3,4, \\ldots, 199\\}=(A+B) \\sqcup(B+C) \\sqcup(C+A)$.\nFrom here it is not hard to deduce the layouts above are the only ones, but there are some details. First, we make the preliminary observation that $3=1+2,4=1+3$, $198=98+100,199=99+100$ and these numbers can't be decomposed in other ways; thus from the remark about the disjoint union:\nClaim (Convenient corollary) - The pairs $(1,2),(1,3),(98,100),(99,100)$ are all in different sets.\\\\\nWe now consider the four cases.\n\\begin{itemize}\n\\item If two of the boxes are singletons, it follows from the corollary that we should have $A=\\{1\\}, B=\\{100\\}$ and $C=\\{2, \\ldots, 99\\}$, up to permutation.\n\\item Otherwise $A, B, C$ are disjoint arithmetic progressions with the same common difference $d$. As two of $\\{1,2,3,4\\}$ are in the same box (by pigeonhole), we must have $d \\leq 3$.\n\\item If $d=3$, then no two elements of different residues modulo 3 can be in the same box, so we must be in the first construction claimed earlier.\n\\item If $d=2$, then the convenient corollary tells us we may assume WLOG that $1 \\in A$ and $2 \\in B$, hence $3 \\in C$ (since $3 \\notin A$ by convenient corollary, and $3 \\notin B$ because common difference 2). Thus we must have $A=\\{1\\}, B= \\{2,4, \\ldots, 100\\}$ and $C=\\{3,5, \\ldots 99\\}$ which does not work since $1+4=2+3$. Therefore there are no solutions in this case.\n\\item If $d=1$, then by convenient corollary the numbers 1 and 2 are in different sets, as are 99 and 100. So we must have $A=\\{1\\}, B=\\{2, \\ldots, 99\\}, C=\\{100\\}$ which we have already seen is valid.\n\\end{itemize}"}, "code": [{"language": "lean4", "text": ""}], "techniques": ["Construction", "Induction", "Invariant"]}], "leakage": {"GPT-5": false, "Gemini-2.5": false, "Opus-4.1": false}}];

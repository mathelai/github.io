# IMO 2024 Problem 5

## Problem Statement

Turbo the snail plays a game on a board with 2024 rows and 2023 columns. There are hidden monsters in 2022 of the cells. Initially, Turbo does not know where any of the monsters are, but he knows that there is exactly one monster in each row except the first row and the last row, and that each column contains at most one monster.

Turbo makes a series of attempts to go from the first row to the last row. On each attempt, he chooses to start on any cell in the first row, then repeatedly moves to an adjacent cell sharing a common side. (He is allowed to return to a previously visited cell.) If he reaches a cell with a monster, his attempt ends and he is transported back to the first row to start a new attempt. The monsters do not move, and Turbo remembers whether or not each cell he has visited contains a monster. If he reaches any cell in the last row, his attempt ends and the game is over.

**Determine the minimum value of n for which Turbo has a strategy that guarantees reaching the last row on the n-th attempt or earlier, regardless of the locations of the monsters.**

## Answer

**The minimum value of n is 2023.**

## Main Proof

We will prove that:
1. Turbo can guarantee success in at most 2023 attempts (upper bound)
2. There exists a monster configuration requiring exactly 2023 attempts (lower bound)

### Part 1: Upper Bound (n ≤ 2023)

**Strategy:** Turbo uses a systematic column-by-column vertical sweep strategy.

**Key Observation:** Since there are 2022 monsters distributed among rows 2 through 2023 (2022 rows total), and each row contains exactly one monster, each column contains at most one monster. With 2023 columns and 2022 monsters, by the pigeonhole principle, **at least one column must be completely monster-free**.

**Turbo's Strategy:**
1. Number the columns from 1 to 2023
2. On attempt k (for k = 1, 2, ..., 2023):
   - Start at the top cell of column k (row 1, column k)
   - Move straight down through column k
   - If a monster is encountered, the attempt ends
   - If no monster is encountered, Turbo reaches the last row and wins

**Analysis:**
- Each attempt explores one column completely
- If column k contains a monster, Turbo discovers it and moves to the next column
- Since at least one column is monster-free, Turbo will eventually find it
- In the worst case, the monster-free column is the last one checked (column 2023)
- Therefore, Turbo succeeds by attempt 2023 at the latest

This proves **n ≤ 2023**.

### Part 2: Lower Bound (n ≥ 2023)

**Adversarial Configuration:** We construct a monster placement that forces Turbo to make at least 2023 attempts, regardless of his strategy.

**Construction:**
- Place monsters in columns 1 through 2022
- Leave column 2023 completely monster-free
- For each column j ∈ {1, 2, ..., 2022}, place the monster in row j+1

This configuration satisfies all constraints:
- Exactly one monster per row (rows 2 through 2023)
- At most one monster per column (exactly one in columns 1-2022, zero in column 2023)
- Total of 2022 monsters

**Why This Forces 2023 Attempts:**

We prove that no strategy can guarantee success in fewer than 2023 attempts against this configuration.

**Claim:** Any path from row 1 to row 2024 that passes through column j (for j ≤ 2022) must encounter the monster in column j.

**Proof of Claim:**
- The monster in column j is at position (j+1, j)
- Any path from row 1 to row 2024 must pass through row j+1 at some point
- If the path is in column j when it reaches row j+1, it hits the monster
- If the path avoids row j+1 of column j, it must either:
  - Never enter column j (doesn't use this column), OR
  - Enter column j from an adjacent column, move vertically, but skip row j+1

However, consider Turbo's information state:
- Turbo must determine which column is safe
- The only way to verify a column is safe is to traverse it completely from row 1 to row 2024
- For columns 1 through 2022, any complete vertical traversal hits a monster

**Rigorous Information-Theoretic Argument:**

We now prove rigorously that Turbo needs at least 2023 attempts.

**Lemma (Column Identification):** For Turbo to guarantee reaching row 2024, he must identify at least one column j such that either:
- Column j contains no monster, OR
- He knows the exact row of the monster in column j and can avoid it

**Proof of Lemma:** Any successful path must traverse from row 1 to row 2024. If Turbo enters a column without knowing where the monster is (or without knowing the column is safe), he might hit the monster. To *guarantee* success, he must have certainty. ∎

**Lemma (Learning from Attempts):** Each failed attempt reveals the location of exactly one monster.

**Proof of Lemma:** When Turbo hits a monster at position (r, c), he learns that column c has a monster at row r. He learns nothing about other columns from this single attempt. ∎

**Main Lower Bound Argument:**

Consider the adversarial configuration described above, where monsters are at positions (2,1), (3,2), ..., (2023, 2022), and column 2023 is monster-free.

Initially, Turbo knows:
- There are 2022 monsters
- Each of rows 2-2023 contains exactly one monster
- Each column contains at most one monster
- But he doesn't know *which* columns contain monsters

To guarantee success, Turbo must identify a safe path. The only way to guarantee finding a safe column is to:
1. **Either** identify all 2022 dangerous columns (by hitting monsters), OR
2. **Or** verify that a specific column is completely safe by traversing it successfully

For option 2: If Turbo succeeds on attempt k < 2023, he has identified a safe column after hitting at most k-1 monsters. But with only k-1 < 2022 monsters revealed, there remain 2022-(k-1) ≥ 1 unknown monsters. The adversary could have placed a monster in any of the untested columns, so Turbo cannot *guarantee* that his chosen column is safe.

For option 1: Turbo must reveal all 2022 monsters to be certain about which column is safe. This requires at least 2022 failed attempts, followed by the 2023rd successful attempt.

**Formal Pigeonhole Argument:**
- There are 2023 columns
- Exactly one column is completely safe (column 2023)
- The other 2022 columns each contain exactly one monster
- In the worst case, Turbo must eliminate all 2022 dangerous columns before being certain of the safe column
- This requires 2022 failures + 1 success = 2023 attempts

This proves **n ≥ 2023**. ∎

### Conclusion

Combining both bounds: n ≤ 2023 and n ≥ 2023, we conclude that **n = 2023**.

## Verification

### Small Cases

Let's verify the pattern with smaller instances:

**Case 1:** 3 rows, 2 columns, 1 monster
- Monsters in 1 row (row 2)
- 2 columns, 1 monster → 1 safe column
- Worst case: monster in column 1, column 2 is safe
- Attempts needed: 2 ✓

**Case 2:** 4 rows, 3 columns, 2 monsters
- Monsters in 2 rows (rows 2-3)
- 3 columns, 2 monsters → 1 safe column
- Worst case: monsters in columns 1-2, column 3 is safe
- Attempts needed: 3 ✓

**Case 3:** 5 rows, 4 columns, 3 monsters
- Monsters in 3 rows (rows 2-4)
- 4 columns, 3 monsters → 1 safe column
- Worst case: monsters in columns 1-3, column 4 is safe
- Attempts needed: 4 ✓

**General Pattern:** For a board with r rows, c columns, and m = r-2 monsters:
- Number of safe columns: c - m = c - (r-2)
- For the IMO problem: c - (r-2) = 2023 - 2022 = 1
- Minimum attempts: c = 2023 ✓

### Correctness of Strategy

The vertical sweep strategy is optimal because:
1. **Completeness:** It systematically checks every column
2. **Efficiency:** Each attempt provides maximum information (entire column status)
3. **Guaranteed Success:** Must find the safe column within c attempts
4. **Optimality:** Cannot do better than testing each dangerous column once

### Why Other Strategies Don't Improve the Bound

**Diagonal or zigzag paths:** These don't reduce the number of attempts because:
- They still need to identify which column(s) are safe
- They may hit monsters in multiple columns per attempt, wasting information
- The fundamental barrier is distinguishing c columns with only m < c monsters

**Probabilistic strategies:** Don't help because:
- The adversary knows Turbo's strategy
- The adversary can place monsters to maximize attempts
- Worst-case analysis applies
